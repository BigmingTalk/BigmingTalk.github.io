<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[操作系统之进程及异常控制流]]></title>
      <url>http://bigmingtalk.github.io/2017/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>处理器充电后，程序计数器中会有一系列的指令相继执行，两次指令执行之间的过度称为控制转移，控制转移的序列称为控制流。最简单的控制流是平滑的，也就是连续执行的两次指令在存储器中是相邻的，但也可能由诸如跳转、调用和返回导致不相邻。我们称使控制流突变称为异常控制流。异常控制流出现在各个层次中。常见的异常控制流有：</p>
<ol>
<li>异常：位于硬件和操作系统交界的部分。</li>
<li>系统调用：为应用程序到操作系统的入口点的异常。</li>
<li>进程和信号：位于应用和操作系统的交界之处。</li>
<li>非本地跳转：异常控制流的一种应用层形式。</li>
</ol>
<a id="more"></a>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常一部分由硬件实现，一部分由操作系统实现。异常就是控制流中的突变，用来响应处理器状态中的某些变化。异常的基本思想如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_65.png" alt="异常的剖析"></p>
<p>在处理器中状态被编码为不同的位和信号，状态变化称为事件。事件可能和当前指令的执行直接相关，如发生虚拟存储器缺页、算术溢出，或者一条指令试图除以零；也有可能与当前指令的执行无关，如一个系统定时器产生信号或者一个I/O请求完成。</p>
<p>任何情况下当处理器检测到有事件发生时，它就会通过一张叫做异常表的跳转表，进行一个间接过程调用（异常），到一个专门设计用来处理这类事件的操作系统子程序（异常处理程序，exception handler）。</p>
<p>当一次处理程序完成处理后，根据异常事件的类型，会发生以下三种情况之一：</p>
<ol>
<li>处理程序将控制返回给当事件发生时正在执行的指令。</li>
<li>处理程序将控制返回给如果没有发生异常时将会执行的下一条程序。</li>
<li>处理程序终止被中断的程序。</li>
</ol>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>异常处理需要软硬件紧密合作。系统中可能的每种类型的异常都分配了一个唯一的非负整数的异常号。一部分异常号是处理器设计者分配，另一部分是操作系统内核设计者分配。前者包括被零除、缺页、存储器访问违例、断点以及算术溢出，后者包括系统调用和来自外部I/O涉笔的信号。异常表如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_66.png" alt="异常表"></p>
<p>异常表的起始地址放在一个叫做异常表基址寄存器的特殊CPU寄存器中。生成异常处理程序地址的过程如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_67.png" alt="异常处理程序"></p>
<p>异常类似于过程调用，但是也有一些重要的不同之处如下：</p>
<ol>
<li>过程调用时在调整到处理程序之前，处理器将返回地址压入栈中，而异常时根据类型返回地址要么是当前指令，要么是下一条指令。</li>
<li>过异常处理程序需要处理器把一些额外的处理器状态压到栈里，处理程序返回时重新开始被中断的程序会需要这些状态，比如当前条件码以及其他内容的寄存器内容。</li>
<li>异常处理程序如果控制一个用户程序转移到内核，那么这些项目被压入到内核栈，而不是用户栈。</li>
<li>异常处理程序在内核模式下。</li>
</ol>
<p>当异常处理程序处理完事件之后，执行一条“中断返回”的指令，可选地址返回到被中断的程序，该指令将适当的状态弹回到处理器的控制和数据寄存器中，如果异常中断的是一个用户程序，就将状态恢复为用户模式。</p>
<h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p>异常可以分为四类：中断、陷阱、故障和终止。中断是异步的，而其他的异常类型是同步发生的。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_68.png" alt="异常的类别"></p>
<h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>中断是异步发生的，是来自处理器外部的I/O设备的信号的结果。硬件中断不是由任何一条专门的指令造成的，从这个意义上来说它的异步的。硬件中断的异常处理程序称为中断处理程序。下图是一个中断的处理：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_69.png" alt="中断处理"></p>
<h4 id="陷阱和系统调用"><a href="#陷阱和系统调用" class="headerlink" title="陷阱和系统调用"></a>陷阱和系统调用</h4><p>陷阱是有意的异常，是执行一条指令的结果，和中断处理程序一样，陷阱处理程序将控制权返回到下一条指令。示意图如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_70.png" alt="系统调用"></p>
<p>陷阱最重要的用途是在用户程序和内核之间提供一个像过程一样的接口，称为系统调用。用户程序向内核请求服务，比如读一个文件(read)，创建一个新的进程(fork)，加载一个新的程序(execve)，或者终止当前进程(exit)。为了允许这些内核服务的受控的访问，处理器提供了一条特殊的指令”syscall n”指令。当用户程序想要服务n时，执行该指令。执行syscall指令会导致一个到异常处理程序的陷阱，该处理程序对参数解码，并调用适当的内核程序。</p>
<p>从程序员角度看，系统调用和普通函数调用时一样的，但是其实普通函数调用运行在用户模式，用户模式限制了函数可以执行的指令的类型，而且只能访问与调用函数相同的栈。而系统调用运行在内核模式，允许执行任何指令，并访问定义在内核中的栈。</p>
<h4 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h4><p>故障由错误情况引起，它可能被故障修复程序修正。故障发生时处理器将控制转移给故障处理程序。如果处理程序能修正错误情况，就将控制返回到引起故障的指令，从而重新执行它。否则，处理程序返回到内核的abort例程，abort例程会终止引起故障的引用程序。故障处理如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_71.png" alt="故障处理"></p>
<p>经典的故障示例是缺页异常，当指令引用一个虚拟地址，而与该地址相对应的物理页面不存在存储器，就需要从磁盘中取，故而引发故障。一个页面时虚拟存储器中一个连续的块（一般为4KB）。缺页处理程序从磁盘加载适当的页面，然后将控制返回给引起故障的指令。当指令再次执行时，相应的物理页面已经驻留在存储器中了，指令就可以没有故障地运行完成。</p>
<h4 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h4><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，如DRAM或者SRAM位被损坏时发生的奇偶错误。终止处理程序从不将控制返回给应用程序，示意图如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_72.png" alt="终止"></p>
<h3 id="Linux-IA32系统中的异常"><a href="#Linux-IA32系统中的异常" class="headerlink" title="Linux/IA32系统中的异常"></a>Linux/IA32系统中的异常</h3><p>IA32系统定义了256种不同的异常类型，0~31是Intel架构师定义的异常。如下图所示:<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_73.png" alt="IA32系统异常示例"></p>
<h4 id="Linux-IA32故障和终止"><a href="#Linux-IA32故障和终止" class="headerlink" title="Linux/IA32故障和终止"></a>Linux/IA32故障和终止</h4><ul>
<li>除法错误：除以零，或者结果对于目标操作数太大，Linux不会试图从除法错误中恢复，而是中止程序，Linux外壳通常将除法错误报告为“浮点异常”。</li>
<li>一般保护故障：引用一个未定义的虚拟存储器区域，或者程序试图写一个只读的文本段。Linux不会试图恢复该类故障，Linux外壳将其报告为“段故障(Segmention fault)”。</li>
<li>缺页：会重新执行产生故障的指令的一个异常示例。处理程序将磁盘上的页加载到存储器中，然后重新开始执行产生该故障的指令。</li>
<li>机器检查：检测到硬件错误，不返回控制给应用程序。</li>
</ul>
<h4 id="Linux-IA32系统调用"><a href="#Linux-IA32系统调用" class="headerlink" title="Linux/IA32系统调用"></a>Linux/IA32系统调用</h4><p>Linux提供了上百种系统调用，常见的系统调用如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_74.png" alt="Linux系统调用"></p>
<p>每个系统调用都有一个唯一的整数号，对应于一个到内核中跳转表的偏移量。在IA32上，系统调用通过一条int n的陷阱指令提供，其中n可能是异常表中256个条目中任何一个条目。C程序用syscall函数可以调用任何系统调用，但是标准C库提供了一组方便的包装函数，这些包装函数将参数打包到一起，以适当的系统调用号陷入内核，然后将系统调用的返回状态传递回调用程序。</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程的节点定义就是一个执行中的程序的实例。系统中每个程序都是运行在某个进程的上下文中，上下文是由程序正确运行所需的状态组成的。这些状态包括存放在存储器中的程序的代码和数据，它的栈、通用目的寄存器的内容、程序计数器、环境变量以及代开文件描述符的集合。</p>
<p>进程提供给应用程序两个关键的抽象：</p>
<ol>
<li>一个独立的逻辑控制流，它提供一个假象，好像我们的程序独占地使用处理器。</li>
<li>一个私有的地址空间，它提供一个假象，好像我们的程序独占地使用存储器系统。</li>
</ol>
<h3 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h3><p>如果单步地执行程序，可以看到一系列的程序计数器（PC）的值，这些值唯一地对应于包含在程序的可执行目标文件中的指令，或者是包含在运行时动态链接到程序的共享对象中的指令，这个PC值的序列叫做逻辑控制流，或简称逻辑流。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_75.png" alt="逻辑控制流"></p>
<h3 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h3><p>一个逻辑流的执行在时间上与另一个流重叠，称为并发流，这两个流称为并发地运行。更准确地说，流X和流Y互相并发，当且仅当X在Y开始之后和Y结束之前开始，或者Y在X开始之后和X结束之前开始。例如，上一个图中A和B并发，A和C也并发，但是B和C没有并发，因为B的最后一套指令在C的第一条指令之前执行。</p>
<p>多个流并发的执行的一般现象称为并发，一个进程和其他进程流量运行的概念称为多任务。一个进程执行它的控制流的一部分的每一时间段叫做时间片。因此，多任务也叫做时间分片。</p>
<p>并发色思想与流运行的处理器核数或者计算机数无关。如果两个流在时间上重叠，那么它们就是并发的，即使它们是运行在同一个处理器上。如果两个流并发地运行在不同的处理器核或者计算机上，我们称它们为并行流，它们并发地运行，且并行地执行。</p>
<h3 id="私有地址空间"><a href="#私有地址空间" class="headerlink" title="私有地址空间"></a>私有地址空间</h3><p>进程为每个程序提供了一个假象，好像它独占地使用系统地址空间。若计算机的地址为n位，则地址空间为2^n个可能地址的集合。每个进程为每个程序提供其私有地址空间。每个私有地址空间相关联的存储器内容一般是不同的，但是每个空间都有相似的统一结构。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_76.png" alt="进程地址空间"></p>
<h3 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h3><p>处理器为了限制一个应用可以执行的指令以及它可以访问的地址空间范围，处理器通常在某个控制寄存器中有一个模式位。该寄存器描述了进程当前享有的特权。当设置了模式位时，进程就运行在内核模式中，也叫超级用户模式。</p>
<p>一个运行在内核模式的进程可以执行指令集中的任何指令，并且可以访问系统中任何存储器位置。而用户模式时额不允许执行特权指令，比如停止处理器，改变模式位，或者发起一个I/O操作。也不允许用户模式中的进程直接引用地址空间中内核区内的代码和数据。任何这种尝试都会导致保护故障。用户程序必须通过系统调用接口间接地访问内核代码和数据。</p>
<p>运行应用程序代码的进程初始时是在用户模式中的。进程从用户模式变为内核模式的唯一方法是通过诸如中断、故障或者陷入系统调用这样的异常。当异常发生时，控制传递到异常处理程序，处理器将模式从用户模式变为内核模式，处理程序运行在内核模式中，当它返回到应用程序代码时，处理器将模式从内核模式转为用户模式。</p>
<h4 id="proc文件系统"><a href="#proc文件系统" class="headerlink" title="/proc文件系统"></a>/proc文件系统</h4><p>Linux提供了/proc文件系统，运行用户模式进程访问内核数据结构的内容。/porc文件系统将许多内核数据结构的内容输出为一个用户程序可以读的文本文件的层次结构。比如可以用/proc文件系统找出一般的系统属性，比如CPU类型(/proc/cpuinfo)，或者某个特殊的进程使用的存储器段(/proc/<process id="">/maps)。Linux 2.6版本内核引入/sys文件系统，它输出关于系统总线和设备的额外的低层信息。</process></p>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>内核为每个进程维持一个上下文。上下文就是内核重新启动一个被强占的进程所需的状态。它由一些对象的值组成，包括通用目的寄存器、浮点寄存器、程序计数器、用户栈、状态寄存器、内核栈和各种内核数据结构，比如描绘地址空间的页表、包含有关当前进程信息的进程表，以及包含进程已经打开文件的信息的文件表。</p>
<p>内核通过调度器来调度不同进程的运行，当调度了一个新的进程运行后，需要使用上下文切换的机制来将控制转移到新的进程。上下文切换包含：</p>
<ol>
<li>保存当前进程的上下文</li>
<li>恢复某个先前被强占的进程的上下文</li>
<li>将控制传递给这个新回复的进程</li>
</ol>
<p>中断也会引发上下文切换，比如周期性定时器中断机制，通常是1毫秒或10毫秒一次。下图展示了进程A通过执行系统调用read陷入到内核，内核的陷阱处理程序请求来自磁盘控制器的DMA传输，并且安排在磁盘控制器完成从磁盘到存储器的数据传输后，磁盘中断处理器。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_77.png" alt="上下文切换"></p>
<h4 id="高速缓存污染"><a href="#高速缓存污染" class="headerlink" title="高速缓存污染"></a>高速缓存污染</h4><p>一般而言，硬件高速缓存存储器不暖和祖如中断和上下文切换这样的异常控制流很好地交互。如果当前进程被一个中断暂时中断，那么对于中断处理程序来说高速缓存是冷的，即程序所需要的数据都不在高速缓存中，如果处理程序从主存中访问了足够多的表项，那么当被中断的进程继续时，高速缓存对它来说也是冷的了。即中断处理程序污染了高速缓存。</p>
<h3 id="系统调用错误处理"><a href="#系统调用错误处理" class="headerlink" title="系统调用错误处理"></a>系统调用错误处理</h3><p>通常，如果Unix系统级函数遇到错误时，会返回-1，并设置全局整数变量errno来表示什么出错了。程序员应该总是检查错误。我们一般通过包装函数来解决，比如写一个包装函数Fork来对fork进行包装，如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_78.png" alt="unix_error"><br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_79.png" alt="fork"></p>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>Unix提供了大量从C程序总操作进程的系统调用。</p>
<h3 id="获取进程ID"><a href="#获取进程ID" class="headerlink" title="获取进程ID"></a>获取进程ID</h3><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_80.png" alt="getpid"></p>
<h3 id="创建和终止进程"><a href="#创建和终止进程" class="headerlink" title="创建和终止进程"></a>创建和终止进程</h3><p>我们可以简单地认为进程总是处于以下三种状态之一：</p>
<ul>
<li>运行：进程要么在CPU上执行，要么在等待被执行且最终会被内核调度。</li>
<li>停止：进程的执行被挂起，且不会被调度。当收到SIGSTOP,SIGTSTP,SIGTTIN或者SIGTTOU信号时，进程就停止，并且保存停止知道她收到一个SIGCONT信号，这时进程再次开始运行（信号是一件软件中断的形式）</li>
<li>终止：进程永远地停止了。进程会因为三种原因终止：1. 收到一个信号，该信号的默认行为是终止进程 2. 从主程序返回 3. 调用exit函数</li>
</ul>
<h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><p>exit函数以status退出状态来终止进程（另一种设置退出状态的方法是从主程序中返回一个整数值）。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_81.png" alt="exit"></p>
<h4 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h4><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_82.png" alt="fork"></p>
<p>新创建的子进程得到与父进程用户级虚拟地址空间相同的（但是独立的）一份拷贝，包括文本、数据和bss段、堆以及用户栈。子进程还获得与父进程任何打开文件描述符相同的拷贝，这意味着当父进程调用fork时，子进程可以读写父进程中打开的任何文件。而他们最大的区别是有不同的PID。</p>
<p>fork函数调用一次，返回两次，父进程中返回子进程的ID（子进程ID肯定大于0），子进程中返回0。所以这样就会有各种各样的笔试题中会有考试，而且是常常结合逻辑运算中的短路一起考，问你最终有几个进程或者是输出什么，尼玛都是套路啊..当然fork也可能失败，则只有父进程返回-1。</p>
<h4 id="回收子进程"><a href="#回收子进程" class="headerlink" title="回收子进程"></a>回收子进程</h4><p>当一个进程由于某种原因终止时，内核并不是立即把它从系统中清楚。相反，进程被保持在一种已终止的状态中，直到被它的父进程回收。当父进程回收已终止的子进程时，内核将子进程的退出状态传递给父进程，然后抛弃已终止的进程。从此时开始，该进程就不存在了。</p>
<p>僵死进程：一个终止了但是还未被回收的进程。</p>
<p>如果父进程没有回收它的僵死子进程就终止了，那么内核就会安排init进程来回收它们。init进程的PID为1，并且是在系统初始化时内核创建的。</p>
<p>一个进程通过调用waitpid函数来等待它的子进程终止或者停止：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_83.png" alt="waitpid"></p>
<h5 id="判断等待集合的成员"><a href="#判断等待集合的成员" class="headerlink" title="判断等待集合的成员"></a>判断等待集合的成员</h5><p>等待集合成员由参数pid来确定：</p>
<ol>
<li>如果pid&gt;0，那么等待集合就是一个单独的子进程，它的进程ID等于pid</li>
<li>如果pid=-1，那么等待集合就是由父进程所有的子进程组成。</li>
</ol>
<p>waitpid函数还支持其他类型的等待集合，包括Unix进程组，这里不再展开讨论。</p>
<h5 id="修改默认行为"><a href="#修改默认行为" class="headerlink" title="修改默认行为"></a>修改默认行为</h5><p>通过将options设置为WNOHANG和WUNTRACED的各种组合，修改默行为：</p>
<ol>
<li>WNOHANG：如果等待集合中的任何子进程都还没有终止，那么久立即返回（返回值为0）。默认的行为是挂起调用进程，直到有子进程终止。一般是在等待子进程终止的同时，如果还有些有用的工作，这个选项会有用。</li>
<li>WUNTRACED：挂起调用进程的执行，直到等待集合中一个进程变为已终止或者被停止。返回的PID为导致返回的已终止或被停止子进程的PID。默认的行为是只返回已终止的子进程。当你想要检查已终止和被停止的子进程时，这个选项会有用。</li>
<li>WNOHANG|WUNTRACED：立即返回，如果等待集合中没有任何子进程被停止或已终止，那么返回0，或者返回值等于那么被停止或已终止的子进程的PID。</li>
</ol>
<h5 id="检查已回收子进程的退出状态"><a href="#检查已回收子进程的退出状态" class="headerlink" title="检查已回收子进程的退出状态"></a>检查已回收子进程的退出状态</h5><p>如果status参数是非空的，那么waitpid就会在status参数放上关于导致返回的子进程的状态信息。wait.h头文件定义了解释status参数的几个宏：</p>
<ol>
<li>WIFEXITED：如果子进程通过调用exit或者一个返回正常终止，就返回真。</li>
<li>WEXITSTATUS：返回一个正常终止的子进程的退出状态。只有在WIFEXITED返回为真时，才会定义这个状态。</li>
<li>WIFSIGNALED：如果子进程是因为一个未被捕获的信号终止的，那么就返回真。</li>
<li>WTERMSIG：返回导致子进程终止的信号的编号，只有在WIFSIGNALED返回为真时，才定义这个状态。</li>
<li>WIFSTOPPED：如果引起返回的子进程当前是被停止的，那么返回为真。</li>
<li>WSTOPSIG：返回引起子进程被停止的信号的编号，只有在WIFSTOPPED返回为真时，才定义这个状态。</li>
</ol>
<h5 id="错误条件"><a href="#错误条件" class="headerlink" title="错误条件"></a>错误条件</h5><p>如果调用进程没有子进程，那么waitpid返回-1，并且设置errno为ECHILD。如果waitpid函数被一个信号中断，那么它返回-1，并设置errno为EINTR。</p>
<h5 id="wait函数"><a href="#wait函数" class="headerlink" title="wait函数"></a>wait函数</h5><p>wait函数是waitpid函数的一个简单版本，调用wait(&amp;status)等价于waitpid(-1, &amp;status, 0)。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_84.png" alt="wait"></p>
<h4 id="让进程休眠"><a href="#让进程休眠" class="headerlink" title="让进程休眠"></a>让进程休眠</h4><p>sleep函数将一个进程挂起一段指定的时间。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_85.png" alt="sleep"></p>
<p>如果请求的时间量到了，sleep返回0，否则返回还剩下的要休眠的秒数。后一种情况是可能的，如果因为sleep函数被一个信号中断而过早地返回。</p>
<p>pause函数让调用进程休眠，直到该进程收到一个信号。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_86.png" alt="pause"></p>
<h4 id="加载并运行程序"><a href="#加载并运行程序" class="headerlink" title="加载并运行程序"></a>加载并运行程序</h4><p>execve函数在当前进程的上下文中加载并运行一个新程序。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_87.png" alt="execve"><br>execve函数加载并运行可执行目标文件filename，且带参数列表argv和环境变量列表envp。只有当出现错误时，例如找不到filename，execve才会返回到调用程序。与fork一次调用返回两次不同，execve调用一次并从不返回。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_88.png" alt="列表组织结构"><br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_89.png" alt="新程序开始时用户栈"></p>
<p>getenv函数在环境数组中搜索字符串”name=value”，如果找到了，就返回一个指向value的指针，否则返回NULL。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_90.png" alt="getenv"></p>
<p>如果环境数组包含一个形如name=value的字符串，那么unsetenv会删除它，而setenv会用newvalue代替oldvalue，但是只有在overwrite非零时才会这样。如果name不存在，那么setenv就把name=newvalue添加到数组中。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_91.png" alt="setenv"></p>
<h5 id="fork与execve的不同"><a href="#fork与execve的不同" class="headerlink" title="fork与execve的不同"></a>fork与execve的不同</h5><p>fork函数在新的子进程中运行相同的程序，新的子进程是父进程的一个复制品。execve函数在当前进程的上下文中加载并运行一个新的程序。它会覆盖当前进程的地址空间，但并没有创建一个新进程。新的程序仍然有相同的PID，并且继承了调用execve函数时已打开的所有文件描述符。</p>
<h4 id="利用fork和execve运行程序"><a href="#利用fork和execve运行程序" class="headerlink" title="利用fork和execve运行程序"></a>利用fork和execve运行程序</h4><p>Unix外壳和Web服务器大量使用了fork和execve函数。外壳是一个交互性的应用级程序，它代表用户运行其他程序。最早的外壳是sh程序，后面出现了变种，如csh，tcsh，ksh，bash以及非常牛逼的zsh。外壳执行一系列的读/求值步骤然后终止。读步骤读取来自用户的一个命令行。求值步骤解析命令行，并代表用户运行程序。</p>
<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的事件。下图展示了Linux系统中支持的30种不同类型的信号。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_92.png" alt="Linux信号集"></p>
<p>每种信号类型都对应于某种系统事件。低层的硬件异常是由内核异常处理程序处理的，正常情况下对用户进程不可见。信号提供了一种机制，通知用户进程发生了这些异常，比如一个进程试图除以零内核就发送一个SIGFPE信号给它。如果当进程在前台运行你键入ctrl-c则内核发送一个SIGINT信号给该前台进程。一个进程可以通过另一个进程发送一个SIGKILL信号强制终止它。当一个子进程终止或者停止时，内核会发送一个SIGCHLD信号给父进程。</p>
<p>传送信号分为两步：</p>
<ul>
<li>发送信号：内核通过更新目的进程上下文中的某个状态，发送一个信号给目的进程。发送信号可以有如下两个原因：1. 内核检测到一个系统事件，比如被零除错误或者子进程终止。 2.一个进程调用了kill函数，显式地要求内核发送一个信号给目的进程，一个进程可以发送信号给它自己。</li>
<li>接收信号：目的进程被内核强迫以某种方式对信号的发送做出反应时，目的进程就接收了信号。进程可以忽略这个信号，终止或者通过执行一个称为信号处理程序的用户层函数捕获这个信号。</li>
</ul>
<p>信号处理程序捕获信号的基本思想如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_93.png" alt="信号处理函数"></p>
<p>待处理信号：一个只发出而没有被接收的信号叫做待处理信号。任何时刻一种类型至多只会有一个待处理信号。如果一个进程有一个类型为k的待处理信号，那么任何接下来发送到这个进程的类型为k的信号都不会排队等待，它们只是被简单地丢弃。</p>
<p>阻塞：一个进程可以有选择性地阻塞接收某种信号。当一种信号被阻塞时，它仍可以被发送，但是产生的待处理信号不会被接收，直到进程取消对该信号的阻塞。</p>
<p>一个待处理信号最多只能被接收一次。内核为每个进程在pending位向量中维护着待处理信号的集合，而在blocked位向量中维护着被阻塞的信号集合。只要接收到了一个类型为k的信号，内核就会设置pending中的第k位，而当接收了该类型为k的信号时，内核就会清除pending中的第k位。</p>
<h3 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h3><p>Unix系统提供了很多向进程发送信号的机制，其都是基于进程组的概念提供的。</p>
<h4 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h4><p>每个进程只属于一个进程组，进程组是由一个正整数进程组ID来标识的。getpgrp函数返回当前进程的进程组ID，如下图所示。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_94.png" alt="getpgrp"></p>
<p>默认情况下一个子进程和它的父进程同属于一个进程组。setpgid设置进程pid的进程组改为pgid。如果pid为0，那么就是用当前进程的PID。如果pgid为0，那么就用pid指定的进程的PID作为进程组ID。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_95.png" alt="setpgid"></p>
<p>例如进15642调用setpgid(0,0)会创建一个新的进程组，其进程组ID是15642，并且把进程15642加入到该新的进程组中。</p>
<h4 id="用-bin-kill程序发送信号"><a href="#用-bin-kill程序发送信号" class="headerlink" title="用/bin/kill程序发送信号"></a>用/bin/kill程序发送信号</h4><p>命令 &gt; /bin/kill -9 15462将发送信号9（SIGKILL）给进程15462，一个为负的PID会导致信号被发送到进程组PID中的每个进程。比如 &gt; /bin/kill -9 -15462将发送一个SIGKILL信号给进程组15462中的每个进程。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_96.png" alt="kill"></p>
<h4 id="从键盘发送信号"><a href="#从键盘发送信号" class="headerlink" title="从键盘发送信号"></a>从键盘发送信号</h4><p>Unix外壳用作业的抽象概念表示对一个命令行求值而创建的进程。任何时刻至多只有一个前台作业和0个或多个后台作业。比如 &gt; ls | sort创建一个由两个进程组成的前台作业，这两个进程通过Unix管道连接起来。一个进程运行ls程序，另一个运行sort程序。</p>
<p>外壳为每个作业创建一个独立的进程组。进程组ID是取自作业中父进程中的一个。比如下图展示了有一个前台作业和两个后台作业的外壳。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_97.png" alt="前台和后台进程组"></p>
<p>键盘中输入ctrl-c会导致一个SIGINT信号发送到外壳。外壳捕获该信号，然后发送SIGINT信号到前台进程组中的每个进程，默认情况下是终止前台作业。类似地输入ctrl -z是停止（挂起）前台作业。</p>
<h3 id="接收信号"><a href="#接收信号" class="headerlink" title="接收信号"></a>接收信号</h3><p>当内核从一个异常处理程序返回，准备将控制传递给进程p时，内核会检查进程p的未被阻塞的待处理信号的集合(pengding&amp;~blocked)。如果该集合为空，那么内核将控制传递到p的逻辑控制流中的下一条指令。如果集合非空，那么内核选择集合中某个信号k（通常是最小的k），并且强制进程p接收信号k。</p>
<p>每个信号类型都有一个预定义的默认行为，一般是：</p>
<ul>
<li>进程终止</li>
<li>进程终止并转存存储器(dump core)</li>
<li>进程挂起知道被SIGCONT信号重启</li>
<li>进程忽略该信号</li>
</ul>
<p>进程可以通过使用signal函数修改和信号相关联的默认行为，唯一的例外是SIGSTOP和SIGKILL，它们的默认行为是不能被修改的。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_98.png" alt="signal"></p>
<p>signal函数根据handler改变信号signum相关联的行为：</p>
<ul>
<li>handler为SIG_IGN，则忽略</li>
<li>handler为SIG_DFL，那么类型为signum的信号恢复为默认行为</li>
<li>否则，handler就是用户定义的函数的二地址，该函数称为信号处理程序，只要进程接收到一个类型为signum的信号，就会调用该程序。通过把处理程序的地址传递给signal函数从而改变默认行为，叫做设置信号处理程序。调用信号处理程序称为捕获信号。执行信号处理程序称为处理信号。</li>
</ul>
<h3 id="信号处理常见问题"><a href="#信号处理常见问题" class="headerlink" title="信号处理常见问题"></a>信号处理常见问题</h3><ol>
<li>待处理信号被阻塞</li>
<li>待处理信号不会排队等待</li>
<li>系统调用可以被中断，被中断的系统调用在信号处理程序返回时不再继续，而是立即返回给用户一个错误条件，并将errno设置为EINTR。</li>
</ol>
<h2 id="非本地跳转"><a href="#非本地跳转" class="headerlink" title="非本地跳转"></a>非本地跳转</h2><p>C语言提供了一种用户级异常控制流形式，称为非本地跳转，它将控制直接从一个函数转移到另一个当前正在执行的函数，而不需要经过正常的调用-返回序列。非本地跳转是通过setjmp和longjmp函数来提供的。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_99.png" alt="setjmp"></p>
<p>setjmp函数在env缓冲区中保存当前调用环境，以供后面longjmp使用，并返回0.调用环境包括程序计数器，栈指针和通用目的寄存器。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_100.png" alt="longjmp"><br>longjmp函数从env缓冲区中恢复调用环境，然后触发一个从最近一次初始化env的setjmp调用的返回。然后setjmp返回，并带有非零的返回值retval。</p>
<p>setjmp函数只被调用一次，但返回多次，一次是当第一次调用setjmp，而调用环境保存在缓冲区env中时；一次是为每个相应的longjmp调用。而longjmp函数则被调用一次，但从不返回。</p>
<p>非本地跳转的一个重要应用是允许从一个深层嵌套的函数调用中立即返回，通常是由检测到某种错误引起。如果一个深层嵌套的函数调用中发现一个错误，我们可以使用非本地跳转直接返回到一个普通的本地化的错误处理程序，而不是费力地解开调用栈。下图的代码是一个简单的实例。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_102.png" alt="非本地跳转实例"></p>
<p>非本地跳转的另一个重要应用是使一个信号处理程序分支到一个特殊的代码位置，而不是返回到被信号到达中断了的指令的位置。下图程序在用键盘输入ctrl-c时，该程序用信号和非本地跳转实现软重启。具体原因是因为捕获SIGINT信号，交给handler处理，handler执行一个非本地跳转，回到主函数的开始处。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170319_103.png" alt="非本地跳转-信号处理"></p>
<h3 id="C-和Java中的软件异常"><a href="#C-和Java中的软件异常" class="headerlink" title="C++和Java中的软件异常"></a>C++和Java中的软件异常</h3><p>C++和Java中的异常机制使更高层次的，是C语言的setjmp和longjmp函数的更加结构化的版本。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>异常控制流发生在计算机系统的各个层次，是计算机系统提供并发的基本机制。</p>
<ul>
<li>硬件层：异常时处理器中的某些事件触发的控制流中的突变。主要有四种不同的异常：中断、故障、终止和陷阱</li>
<li>操作系统层：提供进程的概念，进程给用用提供两个抽象：<ul>
<li>逻辑控制流：提供给每个程序一个假象，好像它是独占地使用处理器</li>
<li>私有地址空间：提供给每个程序一个假象，好像它是在独占地使用主存</li>
</ul>
</li>
<li>应用层：C程序使用非本地跳转来规避正常的调用/返回栈规则，直接从一个函数分支到另一个函数</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单说说链接器和链接过程]]></title>
      <url>http://bigmingtalk.github.io/2017/03/17/%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4%E9%93%BE%E6%8E%A5%E5%99%A8%E5%92%8C%E9%93%BE%E6%8E%A5%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>链接是将各种代码和数据部分收集起来组合成为一个单一文件的过程，这个文件可以被加载到存储器并执行。链接可以发生在以下时间点：</p>
<ol>
<li>编译时：即源代码被翻译成机器代码时</li>
<li>加载时：在程序被加载器加载到存储器并执行时</li>
<li>运行时：由应用程序来执行链接过程</li>
</ol>
<a id="more"></a>
<p>执行链接过程的程序称为链接器。链接器的好处是分离编译，即一个大型的应用程序不需要组织为一个巨大的源程序，而是可以分解为若干个更小、更好管理的模块，可以独立地修改和编译这些模块。当我们改变这些模块中的一个时，只需要简单重新编译它，并重新链接，而不需要重新编译其它文件。</p>
<p>链接器处理目标文件的二进制文件，其有三种不同的形式：可重定位的、可执行的和共享的。可重定位的目标文件由静态链接器合并成一个可执行的目标文件，它可以加载到存储器中并执行。共享目标文件（共享库）是在运行时由动态链接器链接和加载的，或者隐含地在调用程序被加载和开始执行时，或者根据需要在程序调用dlopen库的函数时。</p>
<p>链接器有两个主要任务：符号解析和重定位。符号解析将目标文件中的每个全局符号都绑定到一个唯一的定义，而重定位确定每个符号的最终存储器地址，并修改对那些目标的引用。</p>
<p>静态链接器是由像GCC这样的编译驱动器调用的。它们将多个可重定位目标文件合并成一个单独的可执行目标文件。多个目标文件可以定义相同的符号，而链接器用来解析这些多重定义的规则可能在用户程序中引入微妙的错误。每个目标模块m主要有三种符号：</p>
<ol>
<li>由m定义并能被其他模块引用的全局符号。全局连接器符号对应于非静态的C函数以及定义为不带C static属性的全局变量。</li>
<li>由其他模块定义并被模块m引用的全局符号。这些符号称为外部符号，对应于定义在其他模块中的C函数和变量。</li>
<li>只被模块m定义和引用的本地符号。有的本地链接器符号对应于符号对于带static属性的C函数和全局变量。</li>
</ol>
<p>链接器对多重定义的全局符号，会定义为强的或者是弱的。函数和已初始化的全局变量是强符号，而未初始化的全局变量是弱符号。根据强弱符号的定义，Unix链接器使用下面的规则来处理多重定义的符号：</p>
<ol>
<li>不允许有多个强符号</li>
<li>如果有一个强符号和多个弱符号，那么选择强符号</li>
<li>如果有多个弱符号，那么从这些弱符号中任意选择一个</li>
</ol>
<p>多个目标文件可以被连接到一个单独的静态库中。链接器用库来解析其他目标模块中的符号引用。许多链接器通过从左到右的顺序扫描来解析符号引用。</p>
<p>加载器将可执行文件的内容映射到存储器，并运行这个程序。链接器还可能生成部分链接的可执行目标文件，这样的文件中有对定义在共享库中的程序和数据的未解析的引用。在加载时，加载器将部分链接的可执行文件映射到存储器，然后调用动态链接器，它通过加载共享库和重定位程序中的引用来完成链接任务。</p>
<p>被编译为位置无关代码的共享库可以加载到任何地方，也可以在运行时被多个进程共享，为了加载、链接和访问共享库的函数和数据，应用程序还可以在运行时使用动态链接器。</p>
<p>静态链接的示意图如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170317_59.png" alt="静态链接"></p>
<p>与静态库的链接如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170317_60.png" alt="与静态库的链接"></p>
<p>用共享库来动态链接如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170317_61.png" alt="用共享库来动态链接"></p>
<p>典型的ELF可重定位目标文件：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170317_62.png" alt="可重定位目标文件"></p>
<p>典型的ELF可执行目标文件：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170317_63.png" alt="可执行的目标文件"></p>
<p>Linux运行时存储器映像：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170317_64.png" alt="Linux运行时存储映像"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出理解高速缓存及多路组相联]]></title>
      <url>http://bigmingtalk.github.io/2017/03/16/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%8F%8A%E5%A4%9A%E8%B7%AF%E7%BB%84%E7%9B%B8%E8%81%94/</url>
      <content type="html"><![CDATA[<p>早期计算机系统的存储器层次结构只有三层：CPU寄存器、DRAM主存和磁盘存储。不过，由于CPU和主存之间逐渐增大的差距，系统设计者在CPU寄存器和主存之间插入了一个小的SRAM作为高速缓存存储器，称为L1高速缓存（一级缓存），L1缓存访问速度几乎和寄存器一样快，典型的为2~4个周期。随着差距由越来越大，系统设计者又在L1高速缓存和主存之间插入了更大的L2高速缓存，大约10个时钟周期访问到，在L2和主存之间加入比L2更大的高速缓存L3等，大约30~40个时钟周期访问到。</p>
<p>虽然安排上有很多变化，但是通用原则是一样的为了方便讨论，我们假设一个简单的存储器层次结构，CPU和主存之间只有一个L1高速缓存。</p>
<a id="more"></a>
<p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_45.png" alt="高速缓存的通用组织"><br>假设一个计算机系统，每个存储器地址有m位，则有形成M=2^m个不同的地址，如上图所示，一个机器的高速缓存被组织成一个有S=2^s个高速缓存组的数组，每个组包含E个高速缓存行。每个行是由一个B=2^b字节的数据块组成的，一个有效位指明该行是否包含有意义的信息，还有t=m-(b+s)个标记位（当前块的存储器地址的位的一个子集），它们唯一地标识存储在这个高速缓存行中的块。</p>
<p>一般而言，高速缓存结构可以用元组（S,E,B,m）来描述，高速缓存的容量大小C指的是所有块大小的和。标记位和有效位不包括在内。因此C=SxExB。</p>
<p>当一条加载指令指示CPU从主存地址A读一个字时，它将地址发送到高速缓存。如果高速缓存正保存着地址A处那个字的拷贝，它就立即将那个字发回给CPU。那么高速缓存是如何知道它是否包含地址A处那个字的拷贝呢？</p>
<p>参数S和B将m分为了三个字段，如上图中所示。A中s个组索引是一个到S个组的数组的索引，第一组是组0，第二组是组1，以此类推。组索引位被解释为一个无符号整数，它告诉我们这个字必须存储在哪个组中。一旦我们知道这个字必须放在哪个组中，A中的t个标记位就告诉我们这个组中的哪一行包含这个字（如果有的话）。当且仅当设置了有效位并且该行的标记位与地址A中的标记位相匹配时，组中的这一行才包含这个字。一旦由组索引标识的组中定位了由标号所标识的行，那么b个块偏移位给出了在B个字节的数据块中的字偏移。下图是这些概念的一个小节：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_46.png" alt="概念小结"></p>
<h2 id="直接映射高速缓存"><a href="#直接映射高速缓存" class="headerlink" title="直接映射高速缓存"></a>直接映射高速缓存</h2><p>根据E（每个组的高速缓存行数）高速缓存被分为不同的类。每个行只有1行（E=1）的高速缓存称为直接映射高速缓存。其相比于其他是最容易理解的，示意图如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_47.png" alt="直接映射高速缓存"></p>
<p>假设现在CPU执行一条读存储器字w的指令，它向L1高速缓存请求该字。如果命中则高速缓存会很快抽取出w，并返回给CPU，如果不命中则L1高速缓存向主存请求包含w的块的一个拷贝时，CPU必须等待。当被请求的块最终从存储器到达时，L1高速缓存将这个快存放在它的一个高速缓存行中，从被存储的块中抽取出字w，然后将它返回给CPU。高速缓存确定一个请求是否命中，然后抽取出请求的字的过程，分为三步：</p>
<ol>
<li>组选择</li>
<li>行匹配</li>
<li>字抽取</li>
</ol>
<h3 id="直接映射高速缓存中的组选择"><a href="#直接映射高速缓存中的组选择" class="headerlink" title="直接映射高速缓存中的组选择"></a>直接映射高速缓存中的组选择</h3><p>在该步中，高速缓存从w的地址中间抽取出s个组索引位。这些位被解释为一个组号的无符号整数。如果把高速缓存看成是一个关于组的一维数组，则这些组索引位就是一个到这个数组的索引。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_48.png" alt="直接映射高速缓存中的组选择"></p>
<h3 id="直接映射高速缓存中的行匹配"><a href="#直接映射高速缓存中的行匹配" class="headerlink" title="直接映射高速缓存中的行匹配"></a>直接映射高速缓存中的行匹配</h3><p>上一步我们已经选择了某个组，这一步就是要确定是否有字w的一个拷贝存储在组i包含的一个高速缓存行中。在直接映射高速缓存中这很容易且很快，因为每个组只有一行。当且仅当设置了有效位且高速缓存中的标记与w中的标记相匹配时，这一行包含w的一个拷贝，即缓存命中，否则不命中。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_49.png" alt="直接映射高速缓存中的行匹配和字选择"></p>
<h3 id="直接映射高速缓存中的字选择"><a href="#直接映射高速缓存中的字选择" class="headerlink" title="直接映射高速缓存中的字选择"></a>直接映射高速缓存中的字选择</h3><p>块偏移位提供了所需要的字的第一个字节的偏移，就像我们把高速缓存看成一个行的数组一样，我们把块看成一个字节的数组，而字节偏移是到这个数组的一个索引。上图中该示例中块偏移位是0100，它表明w的拷贝时从块中的字节4开始的（假设字长为4字节）。</p>
<h3 id="直接映射高速缓存中不命中时的行替换"><a href="#直接映射高速缓存中不命中时的行替换" class="headerlink" title="直接映射高速缓存中不命中时的行替换"></a>直接映射高速缓存中不命中时的行替换</h3><p>如果缓存不命中，那么它需要从存储器层次结构中的下一层取出被请求的块，然后将新的块存储在组索引位指示的组中的一个高速缓存行中。一般而言，如果组中都是有效高速缓存行了，必须驱逐出一个现存的行。对于直接映射高速缓存来说，每个组只有一行，替换策略就是直接替换。</p>
<h3 id="直接高速缓存中的一些技巧"><a href="#直接高速缓存中的一些技巧" class="headerlink" title="直接高速缓存中的一些技巧"></a>直接高速缓存中的一些技巧</h3><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_50.png" alt="高速缓存实例"><br>上图是一个直接高速缓存，描述为（S,E,B,m）=（4,1,2,4）。也就是说，高速缓存有4个组，每个组一行，每行2个字节，而地址是4位的，我们还假设每个字都是单字节的，当然这些假设都是不现实的，不过可以使实例保持简单。</p>
<p>上图中有一些有趣的事情：</p>
<ol>
<li>标记位和索引位连起来唯一标识存储器中的每个块。例如块0是由地址0和1组成的，块1是由地址2和3组成的，依次类推。</li>
<li>因为有8个存储器块，但是只有四个高速缓存组，多个块映射到同一个高速缓存组（即他们有相同的组索引）。如块0和块4都映射到组0，块1和块5都映射到组1，等等。</li>
<li>映射到同一个高速缓存组的块由标记位唯一地标识。例如块0的标记位为0，而块4的标记位为1，块1的标记位为0，块5的标记位为1。</li>
</ol>
<h3 id="直接映射高速缓存中的冲突不命中"><a href="#直接映射高速缓存中的冲突不命中" class="headerlink" title="直接映射高速缓存中的冲突不命中"></a>直接映射高速缓存中的冲突不命中</h3><p>高速缓存反复地加载和驱逐相同的高速缓冲块的组的情况称为抖动，即使程序有良好的空间局部性，而我们的高速缓存也有足够的空间来存放高速缓存组，但是因为每次引用刚好覆盖相同的高速缓存组，所以每次引用还是会导致冲突不命中，这是因为这些块都被映射到同一个高速缓存组中而每组又只有一个高速缓存行造成的。解决该问题的一个简单的方法是添加一些填充位，使得缓存映射到不同的高速缓存组。</p>
<h3 id="为什么用中间的位来做索引"><a href="#为什么用中间的位来做索引" class="headerlink" title="为什么用中间的位来做索引"></a>为什么用中间的位来做索引</h3><p>之所以不用高位做索引是因为用高位做索引会使得一些连续的存储器块就会映射到相同的高速缓冲块中。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_51.png" alt="组索引位"></p>
<p>头四个块映射到第一个高速换出租，第二个四个快映射到第二个组。如果一个程序有良好的空间局部性，顺序扫描一个数组的元素，那么在任何时刻，高速缓存都只保存一个块大小的数组内容，这样对高速缓存的使用效率很低。而以中间位为索引，相邻的块总是映射到不同的高速缓存行，这这种情况下，高速缓存能够存放整个大小为C的数组片，这里C是高速缓存的大小。</p>
<h2 id="组相联高速缓存"><a href="#组相联高速缓存" class="headerlink" title="组相联高速缓存"></a>组相联高速缓存</h2><p>一个1&lt;E&lt;C/B的高速缓存通常称为E路组相联高速缓存，对于E=C/B的情况，即全相联高速缓存，会做另外讨论。下图是一个2路组相联高速缓存的结构。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_52.png" alt="组相联高速缓存"></p>
<h3 id="组相联高速缓存中的组选择"><a href="#组相联高速缓存中的组选择" class="headerlink" title="组相联高速缓存中的组选择"></a>组相联高速缓存中的组选择</h3><p>和直接映射高速缓存的组选择一样，组索引标识组。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_53.png" alt="组相联高速缓存的组选择"></p>
<h3 id="组相联高速缓存中的行匹配和字选择"><a href="#组相联高速缓存中的行匹配和字选择" class="headerlink" title="组相联高速缓存中的行匹配和字选择"></a>组相联高速缓存中的行匹配和字选择</h3><p>此时因为一个组中不止一行，所以必须检查每个行的标记位和有效位，以确定所请求的字是否在集合中。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_54.png" alt="组相联高速缓存的行匹配和字选择"></p>
<h3 id="组相联高速缓存中不命中时的行替换"><a href="#组相联高速缓存中不命中时的行替换" class="headerlink" title="组相联高速缓存中不命中时的行替换"></a>组相联高速缓存中不命中时的行替换</h3><p>如果CPU请求的字不在组中的任何一行，就是缓存不命中，高速缓存从存储器中（下一层存储器）取出该行后如果有空行，那就放入即可，如果没有空行，就需要选择一个非空的行替换。我们程序员很难再代码中利用高速缓存替换策略，不过常见的替换策略有：</p>
<ol>
<li>最不常使用（Least-Frequently-Used, LFU）替换过去某个窗口内引用次数最少的那一行。</li>
<li>最近最少使用（Least-Recently-Used, LRU）策略会替换最后一次访问时间最久远的那一行。</li>
</ol>
<h2 id="全相联高速缓存"><a href="#全相联高速缓存" class="headerlink" title="全相联高速缓存"></a>全相联高速缓存</h2><p>一个全相联高速缓存是由一个包含所有高速缓存行的组（E=C/B）组成的。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_55.png" alt="全相联高速缓存"></p>
<h3 id="全相联高速缓存中的组选择"><a href="#全相联高速缓存中的组选择" class="headerlink" title="全相联高速缓存中的组选择"></a>全相联高速缓存中的组选择</h3><p>因为只有一个组，所以地址中没有组索引位，地址只被划分为一个标记和以块偏移，如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_56.png" alt="全相联高速缓存中的组选择"></p>
<h3 id="全相联高速缓存中的行匹配和字选择"><a href="#全相联高速缓存中的行匹配和字选择" class="headerlink" title="全相联高速缓存中的行匹配和字选择"></a>全相联高速缓存中的行匹配和字选择</h3><p>其和组相联高速缓存中是一样的，如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_57.png" alt="全相联高速缓存中的行匹配和字选择"></p>
<p>因为高速缓存电路必须并行地搜索许多相匹配的标记，构造一个又大又快的相联高速缓存很困难，而且很昂贵。全相联高速缓存只适合做小的高速缓存，例如虚拟存储器系统中的翻译备用缓冲器（TLB），它缓存页表项。</p>
<h2 id="直写，写回，写分配，非写分配"><a href="#直写，写回，写分配，非写分配" class="headerlink" title="直写，写回，写分配，非写分配"></a>直写，写回，写分配，非写分配</h2><p>如果要写一个已经缓存了的字w写命中，在高速缓存更新了它的w的拷贝之后，怎么更新w在层次结构中紧接着低一层中的拷贝呢？</p>
<ul>
<li>直写：立即将w的高速缓存块写回到紧接着的低一层中，简单，缺点是每次写都会引起总线流量。</li>
<li>尽可能地推迟存储器更新，只有当替换算法要驱逐更新过的块时，才把它写到紧接着的低一层中。由于局部性，写回能明显地减少总线流量，缺点是实现更为复杂。高速缓存必须为每个高速缓存行维护一个额外的修改位，表明这个高速缓存块是否被修改过。</li>
</ul>
<p>处理写不命中也有不同的方式，主要有：</p>
<ul>
<li>写分配： 加载相应的低一层中的块到高速缓存中，然后更新该高速缓存块。写分配试图利用写的空间局部性，但是缺点是每次不命中都会导致一个块从低一层到高速缓存中。</li>
<li>非写分配：避开高速缓存，直接把该字写到低一层中。</li>
</ul>
<p>通常而言，直写高速缓存通常是非写分配的，写回高速缓存是写分配的。通常，由于较长的传送时间，存储器层次结构中较低层的缓存更可能使用写回，而不是直写。例如，虚拟存储器系统（用主存作为存储在磁盘上的块的缓存）只使用写回。</p>
<h2 id="Intel-COre-i7的高速缓存层次结构"><a href="#Intel-COre-i7的高速缓存层次结构" class="headerlink" title="Intel COre i7的高速缓存层次结构"></a>Intel COre i7的高速缓存层次结构</h2><p>实际上，高速缓存既保存数据，也保存指令，将它们分开为独立的高速缓存有很多好处，因为通常指令是只读的。分开的高速缓存可以有不同的块大小，相联度和容量。Intel Core i7的高速缓存层次结构如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_58.png" alt="Intel COre i7"></p>
<h2 id="高速缓存参数的性能影响"><a href="#高速缓存参数的性能影响" class="headerlink" title="高速缓存参数的性能影响"></a>高速缓存参数的性能影响</h2><p>有很多指标来衡量高速缓存的性能：</p>
<ul>
<li>不命中率</li>
<li>命中率</li>
<li>命中时间：从高速缓存传送一个字到CPU所需时间，包括组选择、行确认和字选择的时间，对于L1来说通常是几个时钟周期</li>
<li>不命中处罚：由于不命中所需要的额外的时间。L1不命中需要从L2得到服务的处罚，典型的是数100个周期；从L3得到服务的处罚，40个周期；从主存得到的服务的处罚，100个周期。</li>
</ul>
<p>优化高速缓存的成本和性能其实是一个trade-off的事情，主要要考虑如下：</p>
<ol>
<li>高速缓存大小的影响：较大的高速缓存会提高命中率，但是会增加命中时间，对于L1来说命中时间往往更重要。</li>
<li>块大小的影响：较大的块能利用空间局部性，提高命中率，但是对于给定的高速缓存大小，块大说明高速缓存行少，会损失时间局部性，这会损害时间局部性比空间局部性更好的程序的命中率。而且快越大，传送时间越长，通常高速缓存块大小为32~64字节。</li>
<li>相联度的影响：较高的相联度降低了高速缓存由于冲突不命中出现抖动的可能性，不过成本较高，而且每一行需要额外的LRU状态位和额外的控制逻辑。且会增加命中时间，因为需要比较更多的行。在Intel Core i7中，L1和L2都是8路组相联，L3是16路组相联。</li>
<li>写策略的影响：直写任意实现，且能使用独立于高速缓存的写缓冲区，用来更新存储器。但是写回引起的传送少，允许更多的到存储器的带宽用于执行DMA的I/O设备。此外，越往外层次结构下面走，传送时间增加，减少传送的数量变得更为重要，一般而言，高速缓存越往下层，越可能使用写回而不是直写。</li>
</ol>
<h2 id="高速缓存行、组合块的区别"><a href="#高速缓存行、组合块的区别" class="headerlink" title="高速缓存行、组合块的区别"></a>高速缓存行、组合块的区别</h2><ul>
<li>块： 一个固定大小的信息包，在高速缓存和主存之间来回传送。</li>
<li>行：高速缓存中存储块以及其他信息（如有效位和标记位）的容器。</li>
<li>组： 一个或多个行的集合。</li>
</ul>
<p>因为一行总是存储一个块，所以通常会互换使用，只要理解块和行之间的区别就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机存储层次结构概览]]></title>
      <url>http://bigmingtalk.github.io/2017/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/</url>
      <content type="html"><![CDATA[<p>本文中将主要介绍基本的存储技术（SRAM存储器、DRAM存储器、ROM存储器、机械硬盘和固态银盘），并描述它们是如何被组织成层次结构的。理解计算机存储层次结构有利于我们编写局部性更好的程序，局部性对我们的应用程序的性能有着很大的影响。</p>
<a id="more"></a>
<h1 id="常见的存储技术"><a href="#常见的存储技术" class="headerlink" title="常见的存储技术"></a>常见的存储技术</h1><h2 id="随机访问存储器（RAM）"><a href="#随机访问存储器（RAM）" class="headerlink" title="随机访问存储器（RAM）"></a>随机访问存储器（RAM）</h2><p>随机访问存储器（Random-Access Memory, RAM）分为两类：静态的和动态的。静态RAM（SRAM）比动态RAM（DRAM）更快，但同时也更贵。SRAM用来作为高速缓存存储器，可以在CPU芯片下，也可以在片下。DRAM作为主存以及图形系统的帧缓冲区。一般一个桌面系统的SRAM不会超过几兆字节，但是DRAM可以使上千兆字节（比如我的MBP是16G的内存）。</p>
<h3 id="静态RAM"><a href="#静态RAM" class="headerlink" title="静态RAM"></a>静态RAM</h3><p>SRAM是将每个位存储在一个双稳态的存储器单元里。每个单元是用一个六晶体管电路实现的。该电路可以无限期地保持在两个不同的电压配置或状态之一。其他状态都是不稳定的。类似于下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_31.png" alt="SRAM"></p>
<p>当钟摆倾斜到最左边或最右边时，它是稳定的。在其他任何位置，钟摆都会倒向一边或另一边。</p>
<h3 id="动态RAM"><a href="#动态RAM" class="headerlink" title="动态RAM"></a>动态RAM</h3><p>DRAM将每个位存储为对一个电容的充电，电容很小，通常只有大约30毫微微法拉——30*10^(-15)法拉。DRAM可以制造得非常密集——每个单元由一个电容和一个访问晶体管组成。</p>
<p>与SRAM不同，DRAM存储器单元对干扰非常敏感。当电容的电压被扰乱以后，就永远不能恢复了。而暴露在光线下容易导致电容电压改变。我们常见的数码照相机和摄像机中的传感器本质上就是DRAM单元的阵列。</p>
<p>很多原因会导致漏电，DRAM单元在10~100毫秒的时间内失去电荷。不过相对于计算机时钟周期的纳秒级而言，这个保持时间相当长。存储器必须周期性地通过读出，然后重写来刷新存储器的每一位。有些系统也使用纠错码，使得计算机的字会被多编码几位（如32位的字用38位来编码），这样一来电路可以发现并纠正一个字中任何单个的错误位。</p>
<h3 id="静态RAM和动态RAM的比较"><a href="#静态RAM和动态RAM的比较" class="headerlink" title="静态RAM和动态RAM的比较"></a>静态RAM和动态RAM的比较</h3><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_32.png" alt="SRAM和DRAM的比较"></p>
<h3 id="传统的DRAM"><a href="#传统的DRAM" class="headerlink" title="传统的DRAM"></a>传统的DRAM</h3><p>DRAM芯片中的单元会被划分为d个超单元(supercell)，每个超单元都由w个DRAM单元组成。一个dxw的DRAM总共存储了dw位信息。超单元被组织成一个r行c列的长方形阵列，这里rc=d。每个超单元有形如(i, j)的地址，这里i表示行，j表示列。信息通过称为引脚的外部连接器流入和流出芯片。每个引脚携带一个1位的信号。如下图中是一个16x8的DRAM芯片，有d=16个超单元，每个超单元有w=8位，r=4行，c=4列。有两组引脚：8个data引脚，它们能传送一个字节到芯片或从芯片传出一个字节，以及2个addr引脚，它们携带2位的行或列超单元地址。其他携带控制信息的引脚没有显示出来。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_33.png" alt="DRAM芯片高级视图"></p>
<p>每个DRAM芯片被连接到某个称为存储控制器的电路，该电路可以一次传送w位到每个DRAM芯片或一次从每个DRAM芯片传出w位。为了读出超单元(i,j)的内容，存储控制器将行地址i发送到DRAM，然后是列地址j。DRAM把超单元(i,j)的内容发回给控制器作为响应。行地址i称为RAS（Row Access Strobe，行访问选通脉冲）请求。列地址j称为CAS（Column Access Strobe）请求。这里RAS和CAS请求共享相同的DRAM地址引脚。</p>
<p>下图中要读取超单元(2,1)，存储控制器先发送行地址2，DRAM响应将行2的整个内容都拷贝到一个内部行缓冲区。接下来，存储控制器发送地址1，DRAM的响应是从行缓冲区拷贝出超单元(2,1)中的8位，并把它们发送到存储控制器。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_35.png" alt="读一个DRAM超单元的内容"></p>
<p>将DRAM组织成二维阵列而不是线性数组的一个原因是降低芯片上地址引脚的数量，如果上面示例的128位DRAM被组织成一个16个超单元的线性数组，地址为0~15，则芯片需要4个地址引脚而不是2个。当然，二维阵列的缺点是需要分两步发送地址，增加了访问时间。</p>
<h3 id="存储器模块"><a href="#存储器模块" class="headerlink" title="存储器模块"></a>存储器模块</h3><p>DRAM芯片被包装在存储器模块中，它是插到主板的扩展槽上。常见的包装包括168个引脚的双列直插存储器模块，它以64位位块传送数据到存储控制器和从存储控制器传出数据，还包括72个引脚的单列直插存储器模块，它以32位位块传送数据。</p>
<p>下图展示了一个存储器模块的基本思想。示例模块用8个64Mbit的8Mx8的DRAM芯片，总共存储64MB（兆字节），这8个芯片编号0~7，每个超单元存储主存的一个字节，而用相应超单元地址(i,j)的8个超单元来表示主存中字节地址A处的64位双字(IA32会称64位为4字)。如图中所示，DRAM0会存储第一个（低位）字节，DRAM1存储下一个字节，依此类推。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_36.png" alt="读一个存储器模块的内容"></p>
<p>要取出存储器地址A处的一个64位双字，存储控制器将A转换为一个超单元地址(i,j)，并将它发送到存储器模块，然后存储器模块再将i和j广播到每个DRAM，作为响应，每个DRAM输出它的(i,j)超单元的8位内容，模块中的电路收集这些输出，并把它们合并成一个64位双字，再返回给存储控制器。</p>
<p>通过将多个存储器模块连接到存储控制器，能够聚合主存。在这种情况下，当控制器收到一个地址A时，控制器选择包含A的模块k，将A转换成它的(i,j)的形式，并将(i,j)发送到模块k即可。</p>
<p>###增强的DRAM<br>基于传统的DRAM单元，市场退出很多改进访问基本DRAM单元速度的DRAM存储器，常见的有：</p>
<ul>
<li>快页模式DRAM</li>
<li>扩展数据输出DRAM</li>
<li>同步DRAM</li>
<li>双倍数据速率同步DRAM</li>
<li>Rambus DRAM</li>
<li>视频DRAM</li>
</ul>
<p>对于这些DRAM技术有兴趣的童靴，自己可以深入地去了解它们的改进，这里不再详细展开论述。</p>
<h2 id="只读存储器-ROM"><a href="#只读存储器-ROM" class="headerlink" title="只读存储器(ROM)"></a>只读存储器(ROM)</h2><p>如果断电，DRAM和SRAM会丢失它们的信息，从该角度来看它们是易失的(volatile)。另一方面，非易失存储器即使是在关电后，也仍然保存着它们的信息。由于历史原因，虽然ROM中有的类型即可以读也可以写，但是它们整体上都称为只读存储器(Read-Only Memory, ROM)。ROM是以它们能够被编程（写）的次数和对它们进行重新编程所用的机制来区分的。</p>
<p>常见的ROM有：</p>
<ol>
<li>PROM（Programmable ROM，可编程ROM）只能被编程一次。PROM的每个存储器单元有一种熔丝，它只能被高电流熔断一次。</li>
<li>可擦写可编程ROM（Erasable Programmable ROM， EPROM）能够被擦除和重编程的次数的数量级可以达到1000次。</li>
<li>电子可擦除PROM（Electrically Erasable PROM， EEPROM）类似于EPROM，能够被编程的次数达到100000次数量级。</li>
<li>闪存（flash memory）是一类非易失性存储器，基于EEPROM，闪存到处都是，包括数码相机，手机，音乐播放器，笔记本上都有。固态硬盘是一种基于闪存的磁盘驱动器。</li>
</ol>
<p>处在ROM设备中的程序通常称为固件。当一个计算机系统通电以后，它会运行在ROM中的固件。一些系统在固件中提供了少量基本的输入和输出函数，例如PC的BIOS（基本输入/输出系统）例程。复杂的设备，向图形卡和磁盘驱动控制器，也依赖固件翻译来自CPU的I/O请求。</p>
<h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>数据流通过称为总线的共享电子电路在处理器和DRAM之间来来回回。总线事务是指每次CPU和主存之间的数据传送都是通过一系列步骤来完成的。读事务从主存传送数据到CPU，写事务从CPU传送数据到主存。</p>
<p>典型的连接CPU和主存的总线结构如下图所示。主要部件是CPU芯片，称为I/O桥的芯片组（其中包括存储控制器），以及组成主存的DRAM存储器模块。部件由一对总线连接起来，其中一条总线是系统总线，它连接CPU和I/O桥，另一条总线是存储器总线，它连接I/O桥和主存。I/O桥将系统总线的电子信号翻译成存储总线的电子信号。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_37.png" alt="总线结构"></p>
<p>总线设计在计算机系统中非常复杂且变化迅速，不同厂商有不同的总线体系结构，例如Intel使用北桥和南桥的芯片组将CPU连接到存储器和I/O设备。</p>
<h2 id="磁盘存储"><a href="#磁盘存储" class="headerlink" title="磁盘存储"></a>磁盘存储</h2><p>磁盘是广为应用的保存大量数据的存储设备，磁盘的读信息时间在毫秒级。</p>
<h3 id="磁盘构造"><a href="#磁盘构造" class="headerlink" title="磁盘构造"></a>磁盘构造</h3><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_38.png" alt="磁盘"><br>磁盘（也称磁盘驱动器）由盘片构成，每个盘片有两面，每面都称为表面，表面覆盖着磁性记录材料。盘片中央有一个可以旋转的主轴，它使得盘片以固定的旋转速率旋转，通常是5400~15000转每分钟。磁盘通常包含一个或多个这样的盘片，并封装在一个密封的容器内。</p>
<p>每个表面有一组称为由一组称为磁道的同心圆组成。每个磁道被划分为一组扇区。每个扇区包含相等数量的数据位（通常是512自己），这些数据编码在扇区的磁性材料中。扇区之间有一些间隙分隔开。这些间隙不存储数据位，间隙存储用来标识扇区的格式化位。</p>
<p>磁盘制造商常用术语柱面来描述多个盘片驱动器的构造。这里柱面是所有盘片表面上到主轴中心的距离相等的磁道的集合。例如一个驱动器有三个盘片和六个表面，每个表面上的磁道的编号是一致的，那么柱面k就是六个磁道k的集合。</p>
<h3 id="磁盘容量"><a href="#磁盘容量" class="headerlink" title="磁盘容量"></a>磁盘容量</h3><p>磁盘容量是一个磁盘可以记录的最大位数，其由以下技术因素决定：</p>
<ol>
<li>记录密度：磁盘一英寸的段中可以放入的位数</li>
<li>磁道密度：从盘片中心出发半径上一英寸的段内可以有的磁道数</li>
<li>面密度：记录密度和磁道密度的乘积</li>
</ol>
<p>最初的磁盘将每个磁道分为数目相同的扇区，扇区的数据由最靠内的磁道能记录的扇区数决定。为了保持每个磁道内有固定的扇区数，越往外的磁道扇区隔得越开。随着面密度的提高，扇区之间的间隙变得不可接受的大。因此，现代大容量磁盘使用一种多区记录的技术。柱面的集合被分割成不相交的子集合，称为记录区。每个区包含一组连续的柱面。一个区中每个柱面中的每条磁道都有相同数量的扇区，这个扇区的数量是由该区中最里面的磁道所能包含的扇区数确定的。</p>
<p>因此，一个磁盘的容量为：<br>磁盘容量 = 字节数/扇区 x 平均扇区数/磁道 x 磁道数/表明 x 表面树/盘片 x 盘片数/磁盘</p>
<h4 id="关于一个G有多大："><a href="#关于一个G有多大：" class="headerlink" title="关于一个G有多大："></a>关于一个G有多大：</h4><p>像K(kilo), M(mega), G(giga), T(tera)这样的前缀的含义依赖于上下文。对于与DRAM和SRAM容量相关的计算单元，通常K=2^10, M=2^20, G=2^30, T=2^40。而像磁盘和网络这样的I/O设备容量相关的计量单位，通常K=10^3, M=10^6,G=10^9, T=10^12。</p>
<h3 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h3><p>磁盘通过读/写头来读写存储在磁盘表明的位，而读写头连接到一个传动臂上，如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_39.png" alt="磁盘的动态特性"></p>
<p>寻道：通过沿着半径轴前后移动这个传动臂，驱动器可以将读/写头定位在盘面上的任何磁道上，这种机械运动称为寻道。有多个盘片的磁盘针对每个盘面都要一个独立的读/写头，读/写头垂直排列，一致行动。在任何时刻，所有的读/写头都位于一个柱面上。</p>
<p>对扇区的访问时间主要有三部分组成：</p>
<ol>
<li>寻道时间：传动臂移动到目标扇区所在的磁道上的时间，平均寻道时间为3~9ms。</li>
<li>旋转时间：读/写头到期望的磁道上后，扇区旋转到读    /写头位置的时间，平均需要旋转半圈，该时间与磁盘的转速有关。</li>
<li>传送时间：开始传送数据需要的时间，也就是旋转完一个扇区所需要的时间，比如一个磁道有400个扇区，那个传送时间就是旋转一个扇区所需要的时间，而旋转时间是平均200个扇区的时间，所以传送时间小很多。</li>
</ol>
<h3 id="逻辑磁盘块"><a href="#逻辑磁盘块" class="headerlink" title="逻辑磁盘块"></a>逻辑磁盘块</h3><p>现代磁盘构造复杂，为了对操作系统隐藏这些复杂性，一个B个扇区大小的逻辑块的序列，编号为0，1，2，…，B-1。磁盘中有一个小的硬件/固件设备，称为磁盘控制器，维护着逻辑块号和实际（物理）磁盘扇区之间的映射关系。</p>
<p>当操作系统想要执行一个I/O操作时，例如读一个磁盘扇区的数据到主存，操作系统会发送一个命令道磁盘控制器，让它读某个逻辑块号。控制器上的固件执行一个快速查找，将一个逻辑块号翻译成一个（盘面，磁道，扇区）的三元组，该三元组唯一地标识了对应的物理扇区，控制器上的硬件接收这个三元组，将读/写头移动到适当的柱面，等待扇区移动到读/写头下，将读/写头感知到的位放到控制器上的一个小缓冲区中，然后将它们拷贝到主存中。</p>
<h3 id="I-O总线"><a href="#I-O总线" class="headerlink" title="I/O总线"></a>I/O总线</h3><p>像图形卡、鼠标、键盘和磁盘这样的输入/输出设备，都是通过I/O总线，例如Intel的外围设备互连（Peripheral Component Interconnect, PCI）总线连接到CPU和主存的。系统总线和存储器总线是与CPU相关的，与它们不同，诸如PCI总线设计成与底层CPU无关，下图是一个典型的I/O总线结构，它连接了CPU，主存和I/O设备。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_40.png" alt="总线结构示例"></p>
<p>I/O总线比系统总线和存储器总线慢，但是它可以容纳种类繁多的第三方I/O设备。在上图中有三种不同设备连接到总线：</p>
<ol>
<li>通用串行总线（Universal Serial Bus，USB）控制器是一个连接到USB总线的设备的中转机构，USB总线是一个广泛使用的标准，现在最新的是USB 3.1，理论速度可以达到10Gbps。</li>
<li>图形适配器负责代表CPU在显示器上画像素。</li>
<li>主机总线适配器将一个或多个磁盘连接到I/O总线，使用的是一个特别的主机总线接口定义的通信协议。两个常用的磁盘接口是SCSI和SATA。SCSI磁盘通常比SATA驱动器更快但也更贵。SCSI主机总线适配器可以支持多个磁盘驱动器，与SATA适配器不同，它只能支持一个驱动器。</li>
</ol>
<p>其他的设备如网络适配器可以通过将适配器插入到主板上的扩展槽中，从而连接到I/O总线，这些插槽提供了到总线的直接电路连接。</p>
<h3 id="磁盘访问"><a href="#磁盘访问" class="headerlink" title="磁盘访问"></a>磁盘访问</h3><p>CPU使用一种称为存储器映射I/O的技术向I/O设备发出命令。在使用存储器映射I/O的系统中，地址空间中有一块地址是为与I/O设备通信保留的，每个这样的地址称为一个I/O端口。当一个设备连接到总线时，它与一个或多个端口相关联（或它被映射到一个或多个端口）。</p>
<p>DMA：也称为直接存储器访问，在磁盘控制器收到来自CPU的读命令后，它将逻辑块好翻译成一个扇区地址，该扇区的内容直接传送到主存，不需要CPU的干涉。设备可以自己执行读或者写总线事务，而不需要CPU干涉的过程，称为直接存储器访问（Direct Memory Access，DMA）。这种数据传送称为DMA传送。在DMA传送完成后，磁盘扇区的内容被安全地存储在主存中后，磁盘控制器通过给CPU发送一个中断信号来通知CPU。基本思想是中断会发送信号到CPU芯片的一个外部引脚上。这会导致CPU暂停它当前正在做的工作，跳转到一个操作系统例程，这个程序会记录I/O以及完成，然后将控制返回到CPU被中断的地方。</p>
<h2 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h2><p>固态硬盘（Solid State Disk，SSD）是一种基于闪存的存储技术，SSD包插到I/O总线上的标准硬盘插槽中（通常是USB或SATA），行为和其他硬盘一样，处理来自CPU的读写逻辑磁盘块的请求。一个SSD包由一个或多个闪存芯片和闪存翻译层组成，闪存芯片替代传统旋转磁盘中的机械驱动器，而闪存翻译层是一个硬件/固件设备，扮演着与磁盘控制器系统的角色，将对逻辑块的请求翻译成对底层物理设备的访问。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_41.png" alt="固态硬盘"></p>
<p>如上图所示，一个闪存由B个块的序列组成，每个块由P页组成，页的大小通常是512字节到4KB，块是由32-128页组成，页的大小为16KB-512KB。数据以页为单位读写，大约在进行100000次重复写之后，块就会磨损，该块就不能在使用了。</p>
<p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_42.png" alt="固态硬盘读写"><br>固态硬盘的读写速度如上图所示，随机写很慢，有两个原因：</p>
<ol>
<li>写之前要擦除块，需要较长的时间，1ms左右，比访问页所需时间高一个数量级</li>
<li>如果写操作试图修改一个包含已经有数据的页时，那么该页所有带有用数据的页都必须被拷贝到一个新块。</li>
</ol>
<p>比起普通磁盘，SSD的有点是它们由半导体存储器构成，没有移动部件，因而随机访问时间比普通磁盘要快，能耗更低，也更结实。而缺点就是反复写之后闪存块会磨损，其次，SSD每字节比普通磁盘贵大约100倍。</p>
<h1 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h1><p>局部性：倾向于引用邻近于其他最近引用过的数据项的数据项，或者最近引用过的数据项本身，这种倾向性称为局部性原理。</p>
<p>时间局部性：在一个具有良好时间局部性的程序中，被引用过一次的存储器位置很可能在不远的将来再被多次引用。</p>
<p>空间局部性：乳沟一个存储器位置被引用了一次，那么程序很可能在不远的将来引用附近的一个存储器位置。</p>
<p>局部性在计算机系统的各个层次，从硬件到操作系统，再到应用程序，它们的设计都利用了局部性。</p>
<ol>
<li>硬件层：引入高速缓存存储器保存最近引用的指令和数据，从而提高对主存的访问速度。</li>
<li>操作系统级：系统使用主存作为虚拟地址空间最近被引用块的高速缓存，同时操作系统用主存来缓存磁盘文件系统中最近被引用的磁盘快。</li>
<li>Web浏览器：将租金引用的文件放在本地磁盘中，利用的是时间局部性。</li>
<li>Web服务器：将最近被请求的文档放在前端磁盘高速缓存中。</li>
</ol>
<h1 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h1><p>下图展示了常见的存储器层次结构：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_43.png" alt="存储器层次结构"></p>
<p>存储器层次结构的中心思想是，对于每个位于k层的更快更小的存储设备作为位于k+1层的更大更慢的存储设备的缓存。数据是以块大小为传送单元在第k层和第k+1层之间来回拷贝，块大小在不同层次中不同，如L1和L0之间的传送通常是一个字的块，而L2和L1之间可能是8~16个字的块。一般而言，离CPU越远的设备块大小越大，因为访问时间较长，较大的块可以补充较长的访问时间。</p>
<h2 id="缓存不命中种类"><a href="#缓存不命中种类" class="headerlink" title="缓存不命中种类"></a>缓存不命中种类</h2><p>缓存不命中的种类有很多种，有：</p>
<ol>
<li>冷不命中：空的缓存，也称为冷缓存，肯定不会命中。</li>
<li>冲突不命中：缓存足够大，但是对象被映射到同一个缓存块，请求块之间来回替换，导致每次都不命中。</li>
<li>容量不命中：工作集的大小超过缓存大小，就是缓存太小了</li>
</ol>
<h2 id="替换策略"><a href="#替换策略" class="headerlink" title="替换策略"></a>替换策略</h2><p>常见的替换策略有随机替换，最近最少使用替换（Least Recently Used，LRU）等，最近最不频繁使用（Least Frequently Used）等。</p>
<h2 id="缓存管理"><a href="#缓存管理" class="headerlink" title="缓存管理"></a>缓存管理</h2><p>如之前所说，存储器层次结构的本质是，每一存储设备都是较低一层的缓存，管理缓存的逻辑可以是硬件、软件或者是两者的结合。下图是缓存系统的管理。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170316_44.png" alt="缓存"></p>
<p>另外，关于高速缓存存储器中多路组相联的详细介绍可以参见我的另一篇文章<a href="http://www.bigming.me/2017/03/16/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%8F%8A%E5%A4%9A%E8%B7%AF%E7%BB%84%E7%9B%B8%E8%81%94/" target="_blank" rel="external">深入浅出理解高速缓存及多路组相联</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[整数与浮点数在计算机中的表示与计算]]></title>
      <url>http://bigmingtalk.github.io/2017/03/15/%E6%95%B4%E6%95%B0%E4%B8%8E%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA%E4%B8%8E%E8%AE%A1%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>现代计算机存储和处理的信息都以二值信号表示，当构造存储和处理信息时，使用二进制比其他进制更好，因为二值信号能够很容易地被表示、存储和传输。本文将详细描述整数和浮点数在计算机中的表示与计算。</p>
<a id="more"></a>
<h1 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h1><p>正如<a href="http://www.bigming.me/2017/03/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%92%E5%BA%A6%E7%9C%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/" target="_blank" rel="external">程序员角度看计算机系统</a>一文中所说的，机器级程序将存储器视为一个非常大的字节数组，称为虚拟存储器。存储器的每个字节都由一个唯一的数字来标识，称为它的地址，所有可能地址的集合称为虚拟地址空间。</p>
<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>将一个十进制x转换为m进制，可以反复地用m除x，得到一个商q和一个余数r，也就是x=q*m+r，然后我们用十六进制表示的r作为最低位数字，并且通过对q反复进行这个过程得到剩下的数字。比如取m=16，十进制314156则可以这样转换：</p>
<ol>
<li>314156 = 19634 * 16 + 12  (C)</li>
<li>19634 = 1227 * 16 + 2     (2)</li>
<li>1227 = 76 * 16 + 11       (B)</li>
<li>76 = 4 * 16 + 12          (C)</li>
<li>4 = 0 * 16 + 4            (4)</li>
</ol>
<p>所以其十六进制表示为0x4CB2C。</p>
<p>而发过来，将一个m进制数字转换为十进制数字，可以用相应的m的幂乘以每个m进制数字，比如取m=16，给定数字0x7AF，则其对应的十进制是7*(16^2)+10*16+15=1967。</p>
<h2 id="字"><a href="#字" class="headerlink" title="字"></a>字</h2><p>每台计算机都有一个字长(word size)，指明整数和指针数据的标称大小。因为虚拟地址是以这样的一个字来编码的，所以字长决定的是最重要的系统参数就是虚拟地址空间的最大大小。对于一个字长为w位的机器而言，虚拟地址的范围为0~2^w - 1。现在的字长在32位和64位机器上分别为32和64。</p>
<h2 id="寻址与字节顺序"><a href="#寻址与字节顺序" class="headerlink" title="寻址与字节顺序"></a>寻址与字节顺序</h2><p>对于跨越多字节的对象，比如若int为4字节，则我们需要建立两个规则：</p>
<ol>
<li>该对象的地址是什么？</li>
<li>在存储器中如何排列这些字节？</li>
</ol>
<p>在几乎所有的机器上，多字节对象都被存储位连续的字节序列，对象的地址为所使用字节中最小的地址。</p>
<h3 id="大端法与小端法"><a href="#大端法与小端法" class="headerlink" title="大端法与小端法"></a>大端法与小端法</h3><p>小端法：最低有效字节在最低地址处，大多数Intel兼容机都采用这种规则。<br>大端法：最高有效字节在最低地址处，如大多数的IBM机等。<br>双端法：可以进行配置，使处理器作为大端或小端机器运行。</p>
<p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_14.png" alt="大端与小端"><br>注意，在字0x01234567中，最高有效字节为0x01，最低有效字节为OX67。</p>
<h2 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h2><p>常见的布尔运算有与（&amp;），或（|），非（~）和异或（^）。运用位运算可以提高程序的执行速度。</p>
<h3 id="不使用额外变量交换两个变量的值"><a href="#不使用额外变量交换两个变量的值" class="headerlink" title="不使用额外变量交换两个变量的值"></a>不使用额外变量交换两个变量的值</h3><p>有一个非常有意思的题目是不使用额外变量交换两个变量的值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</div><div class="line">	*y = *x ^ *y;</div><div class="line">	*x = *x ^ *y;</div><div class="line">	*y = *x ^ *y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里有一点bug是若x和y指向同一个区域，则会有<code>*x ^ *y = 0</code>。当然还有一种方式是不用位运算，用加法也可以解决，如下所示：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</div><div class="line">	*y = *x + *y;</div><div class="line">	*x = *y - *x;</div><div class="line">	*y = *y - *x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然这里加法可能会溢出，但是即便加法溢出了也不会影响算法的最终结果的正确性，这是由整数运算的性质所决定的。</p>
<h3 id="掩码运算"><a href="#掩码运算" class="headerlink" title="掩码运算"></a>掩码运算</h3><p>这里掩码是一个位模式，表示从一个字中选出的位的集合，比如x&amp;0xFF生成一个由x的最低有效字节组成的值，而其他的字节被置为0.表达式~0将生成一个全1的掩码，不管机器的字大小是多少。尽管对于一个32位机器来说，同样的掩码可以写成0xFFFFFFFF，但是这样的代码是不可移植的。而(1&lt;&lt;k)-1可以得到后k位为1的一个掩码。</p>
<h3 id="bis与bic"><a href="#bis与bic" class="headerlink" title="bis与bic"></a>bis与bic</h3><p>int bis(int x, int m);<br>int bic(int x, int m);</p>
<p>这两个函数就是输入一个数据字x和一个掩码m，生成一个结果z，z是由根据m的位来修改x的位得到的。使用bis指令（位设置）就是在m为1的每个位置上将z的对应的位设置为1，使用bic指令（位清除）指令就是在m为1的每个位置，将z对应的位置为0.</p>
<p>则x|y用bis和bic指令表示就是x|y = bis(x,y);而x^y = (x&amp;~y)|(~x&amp;y) = bis(bic(x,y), bic(y,x)), x&amp;y = bic(x,~y)。</p>
<h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><p>左移： 低位补0<br>逻辑右移：高位补0<br>算术右移：高位补符号位</p>
<p>当x&gt;&gt;k中k很大很大时，其实是等价于x&gt;&gt;(k mod w)，其中w为字长。</p>
<h1 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h1><h2 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h2><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_15.png" alt="无符号数"><br>无符号数很简单，只要对应的位乘以其对应的幂次方相加即可，如二进制1011则为1*8+0*4+1*2+1\1* = 11。对应的示意图如上所示。</p>
<h2 id="有符号数"><a href="#有符号数" class="headerlink" title="有符号数"></a>有符号数</h2><p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_16.png" alt="有符号数"><br>最常见的有符号数的表示就是使用补码，其将字的最高有效位解释为负权，其余是一样的。如同样的二进制1011，最高位的1解释为负权，即-8，所以结果就是1*(-8)+0*4+1*2+1*1=-5。当然实际中int一般为32位，也就是最高位为负权，后31为正权。如上图所示。</p>
<h2 id="无符号数和有符号数之间的转换"><a href="#无符号数和有符号数之间的转换" class="headerlink" title="无符号数和有符号数之间的转换"></a>无符号数和有符号数之间的转换</h2><p>强制类型转换的结果其实保持位不变，只是改变了解释这些位的方式，也就是说，其底层的位表示并没有发生改变。其转换关系如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_17.png" alt="w为4时表示"></p>
<p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_18.png" alt="补码到无符号数"></p>
<p><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_19.png" alt="无符号数到补码"></p>
<p>C语言中如果一个运算数是有符号的而另一个是无符号的，那么C语言会隐式地将有符号参数强制类型转换为无符号数，并假设两个数都是非负的，来执行这个计算，这种方式对于标准的算术运算并无多大差异，但是对于像&lt;和&gt;这些关系运算来说，就会有非直观的结果，因为对于一个有符号的负数，其最高位为1，若认为其实非负的，就是一个较大的数值。</p>
<h2 id="零扩展于符号扩展"><a href="#零扩展于符号扩展" class="headerlink" title="零扩展于符号扩展"></a>零扩展于符号扩展</h2><p>将一个无符号数转换为一个更大的数据类型，只需要简单地在表示的开头添加0，这些运算称为零扩展。</p>
<p>而将一个补码数字转换为一个更大的数据类型时则执行符号扩展，规则是在表示中添加最高有效位的值的副本。符号扩展能够正常工作，因为其最后表示的数值并不会发生改变。</p>
<h2 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h2><p>将一个w位的数截断为一个k位数字时，会丢弃高w-k位。截断一个数字可能会改变它的值——溢出的一种形式。因为截断后最高位的正负就有可能发生改变。</p>
<h2 id="有符号数与无符号数的建议"><a href="#有符号数与无符号数的建议" class="headerlink" title="有符号数与无符号数的建议"></a>有符号数与无符号数的建议</h2><p>有符号数到无符号数的隐式强制类型转换导致了一个些非直观的行为，而这些非直观的特性经常导致程序错误。编写程序时尽量不要进行无符号数和有符号数之间的计算比较，一定需要计算比较时要格外注意。</p>
<h1 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h1><p>比较表达式x&lt;y和x-y&lt;0有可能会产生不同的结果，两个正数相加会得到一个负数，这些都是由于计算机运算的有限性造成的。</p>
<h2 id="无符号数相加"><a href="#无符号数相加" class="headerlink" title="无符号数相加"></a>无符号数相加</h2><p>无符号数相加很简单，若溢出，则相当于取模操作，如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_20.png" alt="无符号数相加"></p>
<h2 id="有符号数（补码）相加"><a href="#有符号数（补码）相加" class="headerlink" title="有符号数（补码）相加"></a>有符号数（补码）相加</h2><p>这里有符号数相加指的是补码加法，其实也是很简单的，只不过有负溢出和正溢出，负溢出时使最高位为0，所以被解释为一个整数，而正溢出时使最高位为1，所以被认为是一个负数，如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_21.png" alt="有符号数相加"></p>
<h2 id="补码的非"><a href="#补码的非" class="headerlink" title="补码的非"></a>补码的非</h2><p>所谓非就是x的非是-x，这里有一条很好记的性质，就是-x = ~x + 1，也就是x的非等于x取反加一。</p>
<h2 id="无符号数乘法"><a href="#无符号数乘法" class="headerlink" title="无符号数乘法"></a>无符号数乘法</h2><p>结果也就是真实结果取模，即若w位无符号数，最后想结果就是对2^w次取模，无论溢出还是不溢出。</p>
<h2 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h2><p>对于无符号数和补码的乘法来说，乘法运算的位级表示都是一样的，也就是说，机器可以用一种乘法指令来进行有符号数和无符号数的乘法。如果溢出则都将高位截断，虽然无符号数和补码两种乘法乘积的6位表示不同，但是截断后的乘积的位级表示是相同的，只是对截断后的结果的解释不同而已。如下表所示(表中应该是虽然完整的乘积位级表示不相同，而不是相同，写错了)：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_22.png" alt="补码乘法"></p>
<p>对于更特殊的乘以或除以2的幂我们可以用位移操作来实现。</p>
<h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><p>现在的浮点数标注都是根据IEEE 754标准而制定的。</p>
<h2 id="IEEE-754浮点表示"><a href="#IEEE-754浮点表示" class="headerlink" title="IEEE 754浮点表示"></a>IEEE 754浮点表示</h2><p>IEEE 754浮点标准用V=(-1)^s <em> M </em> 2^E的形式来表示一个数：</p>
<ol>
<li>符号(sign)：s决定这个数是负数(s=1)还是正数(s=0)，而对于数值0的符号位解释作为特殊情况处理。</li>
<li>尾数：M是一个二进制小树，它的范围是[1,2)或[0,1)。</li>
<li>阶码：E的作用是对浮点数加权，这个权重是2的E次幂（可能是负数）。</li>
</ol>
<p>将浮点数的位表示划分为三个字段，分别对这些值进行编码：</p>
<ol>
<li>一个单独的符号位s直接编码符号s。</li>
<li>k位的解码字段exp编码解码E。</li>
<li>n位小数字段frac编码尾数M，但是编码出来的值也依赖于解码字段的值是否等于0。</li>
</ol>
<p>单精度中s,exp,frac范围为1,8,23位，而双精度时s,exp,frac分别为1,11,64位。根据exp的的值，被编码的值可以分成三种不同的情况，如下图为单精度格式和双精度格式的情况：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_23.png" alt="单精度格式和双精度格式的情况"></p>
<p>感觉exp的值，被编码的值可以分为三种不同的情况（最后一种又分为两种情况）。如下所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_24.png" alt="exp"></p>
<h3 id="规格化的值"><a href="#规格化的值" class="headerlink" title="规格化的值"></a>规格化的值</h3><p>这是最普遍的情况，当exp的位模式既不全为0，也不全为1时，都属于这类情况。这种情况中，阶码字段被解释为以偏置形式表示的有符号整数，也就是说，阶码的值是E=e-Bias，其中e是无符号数，其位表示就是exp，而Bias是一个等于2^(k-1)-1的值（单精度为127，双精度为1023），所以对于指数的取值范围，单精度时-126~127，双精度时-1022~1023。</p>
<p>对于小数字段frac的解释为描述小数值f，其中0&lt;=f&lt;1，其二进制表示为0.f，二进制小数点在最高有效位的左边。尾数定义为M=1+f，这种方式也叫做隐含的以1开头的表示。我们总是能够调整阶码E使得尾数M在范围[1,2）之中，所以这种表示方法是一种轻松获得一个额外精度位的技巧，由于第一位总是等于1，因此我们就不需要显示地表示它。</p>
<h3 id="非规格化的值"><a href="#非规格化的值" class="headerlink" title="非规格化的值"></a>非规格化的值</h3><p>当阶码全为0时，所表示的数就是非规格化的形式，这时阶码值E=1-Bias，而尾数的值是M=f,也就是小数字段的值，不包含隐含的开头1.之所以是阶码值是1-Bias而不是-Bias是因为这种方式使得从非规格化值转换到规划化值是平滑的。非规格化数有两个用途：</p>
<ol>
<li>一是提供了一种表示0的方法，因为规格化数时M&gt;=1,因此我们不能表示0，实际上，+0.0的浮点表示全是0，而符号位为1，其他域为0时则是-0.0，根据IEEE的浮点格式，认为值+0.0和-0.0在某些方面是不同，某些方面又是相同的。</li>
<li>表示非常接近于0的数。它们提供了一种属性，称为逐渐溢出，其中，可能的数值分布均匀地接近于0.0。</li>
</ol>
<h3 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h3><p>当阶码全为1，而小数域全为0时，得到的值表示无穷，当s=0时时正无穷，s=1时为负无穷。当我们把两个非常大的数相乘，或者除以0时，无穷能够表示溢出的结果。当小数域为非零时，结果值称为NaN，就是Not a Number。一些运算的结果不能是实数或无穷，就会返回NaN，比如根号负一，或无穷-无穷。在某些应用中表示无初始化的数据时它们也很有用。</p>
<h3 id="数字分布"><a href="#数字分布" class="headerlink" title="数字分布"></a>数字分布</h3><p>下图是用6位格式来表示，其中k=3的阶码位和n=2的尾数位，可以看到可表示的数不是均匀分布的，越靠近原点出越稠密。<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_26.png" alt="可表示的数的分布"></p>
<h2 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h2><p>IEEE浮点个事定义了四种不同的舍入方式，其中向偶数舍入也称为最接近的值舍入，是默认的方式，试图找到一个最接近的匹配值，如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/Snip20170315_27.png" alt="浮点数舍入方式"></p>
<h2 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h2><p>浮点单元的设计者使用了一些聪明的小技巧来避免执行精确的计算，只要计算得到的结果能够保证到一个正确的舍入结果就可以了。其独立于任何具体的硬件或者软件实现。</p>
<p>浮点加法不具有结合性，如(3.14+1e10)-1e10求职得到0.0，因为舍入会使值3.14丢失，但3.14+(1e10-1e10)是3.14。浮点加法满足单调性属性，，即如果a&gt;=b,则对于任意a,b,x，除了NaN，都有x+a&gt;=x+b，无符号或补码加法不具有这个属性。</p>
<p>浮点重发是可交换的，但是同样不具备结核性，因为可能溢出，或者由于舍入而失去精度，并且浮点乘法在加法上不具备分配性。并且同样的，浮点乘法满足单调性。</p>
<h2 id="C语言中的浮点数"><a href="#C语言中的浮点数" class="headerlink" title="C语言中的浮点数"></a>C语言中的浮点数</h2><p>假设int是32位的，则从int转float不会溢出，但可能会被舍入。而从double转float，可能会溢出为正无穷或负无穷，另外由于精度较小，可能会被舍入。从float或double转换为int，值会向零舍入，例如，1.999转换为1，-1.999转换为-1。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序员角度看计算机系统]]></title>
      <url>http://bigmingtalk.github.io/2017/03/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%92%E5%BA%A6%E7%9C%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>计算机系统是有硬件和软件组成的，所有计算机系统都有相似的硬件和软件组件。对于程序员来说，深入了解这些组件如何工作，以及这些组件是如何影响程序的正确性和性能的，是非常重要的一项技能。本篇文章将结合下面这段hello.c的源码，让你系统概括地了解当你在执行hello程序时，系统究竟发生了什么。hello.c的源码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello Bigming\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="信息就是位-上下文"><a href="#信息就是位-上下文" class="headerlink" title="信息就是位+上下文"></a>信息就是位+上下文</h1><p>当我用编辑器编辑了hello.c的文本文件时，源程序实际上就是由值为0和1组成的位序列。一个字节为8位。</p>
<p>ASCII码：用一个字节大小的整数值来表示每个字符。如hello.c中开头的#对应的整数值为35，而include中的i对应的整数位105，等等。当然，由于ASCII码表示的字符有限，后来发展出了Unicode标准，以及对应的UTF-8，UTF-16等编码，具体可以查看我的另一篇<a href="http://www.bigming.me/2016/10/09/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%82%B9%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83/" target="_blank" rel="external">博客</a>。</p>
<p>文本文件：基于字符编码的文件，常见的编码有ASCII编码，UNICODE编码等。</p>
<p>二进制文件：基于值编码的文件，你可以根据具体应用，指定某个值（可以看作是自定义编码）。</p>
<p>计算机的存储在物理上都是二进制的，所以文本文件与二进制文件在物理上都是一样的，区别在于其编码层次上，在具体编码中，ASCII码为一个字节即8位，而Unicode一般为2个字节16位，而二进制文件可以看成是变长编码，具体的编码方式完全可以自己定义。</p>
<p>hello.c的表示方法说明了一个基本思想：系统中所有的信息——包括磁盘文件、存储器中的程序、存储器中存放的用户数据以及网络上传送的数据，都是由一串位表示的，区分不同数据对象的唯一方法师我们读到这些数据对象时的上下文，在不同上下文中，一个同样的字节序列可以表示一个整数、浮点数、字符串或者机器指令。</p>
<h1 id="程序编译系统"><a href="#程序编译系统" class="headerlink" title="程序编译系统"></a>程序编译系统</h1><p><img src="http://oe0mec5i6.bkt.clouddn.com/compile.png" alt="编译系统"></p>
<p>GCC编译器驱动程序读取源文件hello.c，把它翻译成一个可执行目标文件hello,该翻译过程分为4个阶段完成。执行这四个阶段的程序分别为预处理器、编译器、汇编器和链接器，如上图所示。</p>
<ol>
<li>预处理阶段：预处理器根据以字符#开头的命令，修改原始的C程序，如将hello.c中开头的<code>#include &lt;stdio.h&gt;</code>告诉预处理器读取stdio.h中的内容并把它直接插入到程序文本中。得到另一个C程序，通常以.i作为文件扩展名，对应的命令为 gcc -E hello.c -o hello.i</li>
<li>编译阶段：编译器将文本文件hello.i翻译成文本文件hello.s，其是一个汇编语言程序，汇编语言的好处是它为不同高级语言的不同编译器提供了通用的输出语言，相当于提供了一层抽象。</li>
<li>汇编阶段：汇编器将hello.s翻译成机器语言指令，并将结果保存在hello.o中，hello.o是一个二进制文件，它的字节编码是机器语言指令而不是字符，如果我们用文本文件打开它，将是一堆乱码。</li>
<li>链接阶段：hello程序中调用了printf函数，printf函数存在于一个名为printf.o的单独的预编译好了的目标文件中，链接器将处理这种合并，得到可执行文件hello，它可以被加载到内存中，由系统执行。</li>
</ol>
<p>了解编译系统如何工作是大有溢出的，原因有：</p>
<ol>
<li>优化程序性能，编译器中有许多的优化措施</li>
<li>理解链接时出现的错误：静态链接与动态链接</li>
<li>避免安全漏洞</li>
</ol>
<h1 id="处理器执行指令"><a href="#处理器执行指令" class="headerlink" title="处理器执行指令"></a>处理器执行指令</h1><p>我们在类Unix系统或Linux系统中执行该可执行文件，一般是在shell中，shell是一个命令行解释器，它输出一个提示符，等待你输入一个命令行，然后执行这个命令。如果该命令行第一个单词不是一个内置shell命令，则shell会假设这是一个可执行文件的名字，加载并执行该文件。如下所示:<br><img src="http://oe0mec5i6.bkt.clouddn.com/shell.png" alt="Shell加载"></p>
<h2 id="系统硬件组成"><a href="#系统硬件组成" class="headerlink" title="系统硬件组成"></a>系统硬件组成</h2><p><img src="http://oe0mec5i6.bkt.clouddn.com/systen_hardware.png" alt="系统硬件组成"><br>上图是一个典型系统的硬件组织。</p>
<ol>
<li>总线：一组电子管道，它携带信息字节并负责在各个部件间传递。通常总线被设计成传送定长的字节块，也就是字（word），字中的字节数（即字长）是一个基本的系统参数，在各个系统中情况不尽相同，现在一般机器字长为4个字节（32位），有的是8个字节（64位）。</li>
<li>I/O设备：I/O设备(输入输出设备)是系统与外部世界的联系通道，如上图中的键盘，鼠标，显示器，以及磁盘等。每个I/O设备都通过一个控制器或适配器与I/O总线相连。控制器与适配器区间主要在于它们的封装方式。控制器是置于I/O设备本身的或者系统的主印制电路板（主板）上的芯片组，而适配器则是一块插在主板插槽上的卡。</li>
<li>主存：从物理上说，由一组动态随机存取存储器（DRAM）芯片组成，从逻辑上说，是一个线性的字节数组，每个字节都有其唯一的地址。</li>
<li>处理器：中央处理单元（CPU），简称处理器，是解释执行存储在主存中指令的引擎。处理器的核心是一个字长的寄存器，也称为程序计数器（PC），在任何时刻，PC都指向主存中某条机器语言指令（即含有该条指令的地址）。当然，除了PC，还有一些1字长的寄存器，每次执行都会更新PC，指向下一条指令，当然这里下一条指令不一定和存储器中刚刚执行的指令相邻。算术逻辑单元（ALU）计算新的数据和地址值，通常分为加载、存储、操作以及跳转几个操作。现代处理其实是非常复杂的，并不是只是它的指令集结构看上去那么简单。我们这样区分处理器的指令集结构和微体系结构：指令集结构描述的是每条机器代码指令的效果；而微体系结构描述的是处理器实际上是如何实现的。</li>
</ol>
<p>直接存储器存取（DMA）：数据可以不通过处理器而直接从磁盘到达主存。</p>
<h1 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h1><p><img src="http://oe0mec5i6.bkt.clouddn.com/storage_level.png" alt="存储器层次结构"></p>
<p>存储器之间的存取速度是相差很大的，高速缓存作为暂时的集结区域，用来存放处理器近期可能会需要的信息。高速缓存也可以有很多级，如L1,L2甚至到L3的。高速缓存一般用一种叫做静态随机访问存储器（SRAM）的硬件技术实现的。</p>
<p>局部性原理：即程序具有访问局部区域里的数据和代码的趋势，通过让高速缓存存放可能经常访问的数据的方法，大部分的高速缓存操作都能在快速的高速缓存中完成。</p>
<h1 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h1><p><img src="http://oe0mec5i6.bkt.clouddn.com/system_level.png" alt="计算机系统的分层试图"><br>当Shell加载和运行hello程序是，shell和hello程序都没有直接访问键盘、显示器、磁盘或者主存，取而代之的是，它们依靠操作系统提供的服务。</p>
<p>操作系统有两个基本功能：</p>
<ol>
<li>防止硬件被失控的应用程序滥用</li>
<li>向应用程序提供简单一致的机制来控制复杂而又通常大相径庭的低级硬件设备</li>
</ol>
<p>操作系统通过几个基本的抽象概念（进程、虚拟存储器和文件）来实现上述两个功能。文件是对I/O设备的抽象表示，虚拟存储器是对主存和磁盘I/O设备的抽象表示，进程则是对处理器、主存和I/O设备的抽象表示。如下图所示：<br><img src="http://oe0mec5i6.bkt.clouddn.com/abstract1.png" alt="操作系统提供的抽象表示"></p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是操作系统对一个正在运行的程序的一种抽象，一个系统中可以同时运行多个进程，而每个进程都好像独占地使用硬件。并发运行时指一个进程的指令和另一个进程的指令交错执行。</p>
<p>进程间实现进程间交错执行的机制称为上下文切换，而操作系统保持跟踪进程运行所需的所有状态信息，这种状态也就是上下文，它包括许多信息，如PC何寄存器文件的当前值，以及主存的内容。当操作系统决定要把控制器从当前进程转移到某个新进程时，就会进行上下文切换，即保存当前进程的上下文、恢复新进程的上下文，然后将控制权转移到新进程。下图展示了hello程序运行场景：<br><img src="http://oe0mec5i6.bkt.clouddn.com/contex.png" alt="hello程序运行场景"></p>
<p>该示例场景中有两个并发的进程：shell进程和hello进程。起初，只有shell进程在运行，即等待命令行上的输入。当我们让它运行hello程序时，shell通过调用系统调用函数，来执行我们的请求，系统调用会将控制权传递给操作系统。操作系统保存shell进程的上下文，创建一个新的hello进程及其上下文，然后将控制权传递给新的hello进程。hello进程终止后，操作系统恢复shell进程的上下文，并将控制权传回给它，shell进程将继续等待下一个命令行输入。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>现代操作系统中，一个进程实际上可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。因为多线程之间比多进程之间更容易共享数据，也因为线程一般来说都比进程更高效。</p>
<h2 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h2><p>虚拟存储器是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用主存。每个进程看到的是一致的存储器，称为虚拟地址空间。下图是Linux进程的虚拟地址空间。地址空间最上面的区域是伪操作系统中的代码和数据保留的，这对所有进程来说都是一样的。地址空间的底部区域存放用户进程定义的代码和数据，图中的地址从下往上市增大的。<br><img src="http://oe0mec5i6.bkt.clouddn.com/address.png" alt="进程的虚拟地址空间"></p>
<p>每个进程看到的虚拟地址空间是由大量准确定义的区构成，每个区都有专门的功能。</p>
<h3 id="程序代码和数据"><a href="#程序代码和数据" class="headerlink" title="程序代码和数据"></a>程序代码和数据</h3><p>对于所有进程来说，代码都是从同一固定地址开始的，紧接着的是和C全局变量相对应的数据位置。代码和数据区是直接按照可执行目标文件的内容初始化的，如可执行文件hello。</p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>代码和数据区后紧随着的是运行时堆。代码和数据区是在进程一开始运行时就被规定了大小，与此不同，当调用malloc和free等C标准库函数时，堆可以在运行时动态地扩展和收缩。</p>
<h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p>大约在地中空间中间部分是一块用来存放像C标准库和数学库这样共享库的代码和数据区域。共享库的概念非常强大，而且也相当难懂，在未来讲动态链接时再详细展开讨论。</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>位于用户虚拟地址空间顶部的是用户栈，编译器用它来实现函数调用。和堆一样，用户栈在程序执行期间可以动态地扩展和收缩。每次我们调用一个函数时，栈就会增长；从一个函数返回时，栈就会收缩。</p>
<h3 id="内核虚拟存储器"><a href="#内核虚拟存储器" class="headerlink" title="内核虚拟存储器"></a>内核虚拟存储器</h3><p>内核总是驻留在内存中，是操作系统的一部分。地址空间顶部的区域是为内核保留的，不允许应用程序读写这个区域的内容或直接调用内核代码定义的函数。</p>
<p>虚拟存储器的运作需要硬件和操作系统软件之间精密复杂的交互，包括对处理器生成的每个地址的硬件翻译。其基本思想是把一个进程虚拟存储器的内存存储在磁盘上，然后用主存作为磁盘的高速缓存。</p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件就是字节序列，仅此而已。每个I/O设备，包括磁盘、键盘、显示器、甚至网络，都可以视为文件。系统中所有输入输出都是通过使用一个小组称为Unix I/O的系统函数调用读写文件来实现的。</p>
<p>文件为应用程序提供了一个统一的视角，来看待系统中可能含有的所有各式各样的I/O设备。</p>
<h1 id="系统间网络通信"><a href="#系统间网络通信" class="headerlink" title="系统间网络通信"></a>系统间网络通信</h1><p>现代系统通常通过网络和其他系统连接在一起，从一个单独的机器来看，网络可以视作一个I/O设备。通过网络适配器，可以从网络中读取一段数据，也可以通过网络适配器发送一段数据到其他机器。</p>
<h1 id="重要主题"><a href="#重要主题" class="headerlink" title="重要主题"></a>重要主题</h1><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><p>并发是一个通用的概念，指一个同时具有多个活动的系统。而并行是指用并发使一个系统运行的更快，并行在计算机系统的多个抽象层次上运用。</p>
<h3 id="线程级并发"><a href="#线程级并发" class="headerlink" title="线程级并发"></a>线程级并发</h3><p><img src="http://oe0mec5i6.bkt.clouddn.com/multi_core.png" alt="所有的处理器"><br>多处理器系统：由单操作系统内核控制的多处理器组成的系统。多处理器有多核系统以及超线程。</p>
<p>多核：就是有多个CPU核，如下图所示为Intel Core i7处理器的组织结构，微处理器芯片有4个CPU核，每个核有自己的L1和L2高速缓存，但是它们共享更高层次的高速缓存，以及到主存的接口。<br><img src="http://oe0mec5i6.bkt.clouddn.com/core_i7.png" alt="Intel Core i7"></p>
<p>超线程：由称为同时多线程，是一项允许一个CPU执行多个控制流的技术。它涉及CPU某些硬件的多个备份，如程序计数器和寄存器文件；而其他的硬件部分只有一份，比如执行浮点算术运算的单元。举例来说，Intel Core i7处理器可以让一个核执行两个线程，所以一个4核的系统实际上可以并行地执行8个线程。</p>
<p>多处理器在两个方面提高了系统性能：</p>
<ol>
<li>减少了在执行多个任务时模拟并发的需要</li>
<li>使应用程序运行地更快</li>
</ol>
<h3 id="指令级并行"><a href="#指令级并行" class="headerlink" title="指令级并行"></a>指令级并行</h3><p>现代处理器同时可以执行多条指令的属性称为指令级并行。每条指令从开始到结束需要大约20个甚至更多的周期，但是处理器使用了很多聪明技巧来同时处理各种指令。流水线技术奖一条指令所需要的活动划分为不同的步骤，将处理器的硬件组织成一系列的阶段，每个阶段执行一步。</p>
<p>超标量：如果处理器可以达到比一个时钟周期一条指令更快的执行速率，就称之为超标量(superscalar)处理器。</p>
<h3 id="单指令、多数据并行"><a href="#单指令、多数据并行" class="headerlink" title="单指令、多数据并行"></a>单指令、多数据并行</h3><p>在最低层次上，许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行执行的操作，这种方式称为单指令、多数据，即SIMD并行。</p>
<h2 id="计算机系统中抽象的重要性"><a href="#计算机系统中抽象的重要性" class="headerlink" title="计算机系统中抽象的重要性"></a>计算机系统中抽象的重要性</h2><p><img src="http://oe0mec5i6.bkt.clouddn.com/abstract2.png" alt="抽象"></p>
<p>抽象的使用是计算机科学中最为重要的概念之一。如上图所示：指令集结构提供了对实际处理器硬件的抽象，而在学习操作系统中，文件是对I/O的抽象，虚拟存储器是对程序存储器的抽象，而进程是对一个正在运行的程序的抽象。而虚拟机是对整个计算机的抽象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fibonacci数列的O(logn)解法]]></title>
      <url>http://bigmingtalk.github.io/2017/02/09/Fibonacci%E6%95%B0%E5%88%97%E7%9A%84O-logn-%E8%A7%A3%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>斐波那契额数列是面试中常见的一种考题，求解斐波那契数列也有很多种方法，可以用递归，迭代等不同的方法来解答。本文分别用递归，迭代以及矩阵相乘（二分相乘）的方法来求解，其复杂度分别为O(2^n), O(n)以及O(logn)。具体见如下代码所示：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Algorithm;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 17/2/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fabonacci</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">Fibonacci_Solution1</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span>[] result = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> result[n];</div><div class="line">        <span class="keyword">return</span> Fibonacci_Solution1(n - <span class="number">1</span>) + Fibonacci_Solution1(n - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">Fibonacci_Solution2</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> result[n];</div><div class="line"></div><div class="line">        <span class="keyword">long</span>  first = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span>  second = <span class="number">1</span>;</div><div class="line">        <span class="keyword">long</span>  third = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i)</div><div class="line">        &#123;</div><div class="line">            third = first + second;</div><div class="line">            first = second;</div><div class="line">            second = third;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> third;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[][] matrixMultiply2By2(<span class="keyword">long</span>[][] matrix1, <span class="keyword">long</span>[][] matrix2) &#123;</div><div class="line">        <span class="keyword">if</span> (matrix1 == <span class="keyword">null</span> || matrix2 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (matrix1.length != <span class="number">2</span> || matrix1[<span class="number">0</span>].length != <span class="number">2</span> ||</div><div class="line">                matrix2.length != <span class="number">2</span> || matrix2[<span class="number">0</span>].length != <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span>[][] result = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">        result[<span class="number">0</span>][<span class="number">0</span>] = matrix1[<span class="number">0</span>][<span class="number">0</span>] * matrix2[<span class="number">0</span>][<span class="number">0</span>] + matrix1[<span class="number">0</span>][<span class="number">1</span>] * matrix2[<span class="number">1</span>][<span class="number">0</span>];</div><div class="line">        result[<span class="number">0</span>][<span class="number">1</span>] = matrix1[<span class="number">0</span>][<span class="number">0</span>] * matrix2[<span class="number">0</span>][<span class="number">1</span>] + matrix1[<span class="number">0</span>][<span class="number">1</span>] * matrix2[<span class="number">1</span>][<span class="number">1</span>];</div><div class="line">        result[<span class="number">1</span>][<span class="number">0</span>] = matrix1[<span class="number">1</span>][<span class="number">0</span>] * matrix2[<span class="number">0</span>][<span class="number">0</span>] + matrix1[<span class="number">1</span>][<span class="number">1</span>] * matrix2[<span class="number">0</span>][<span class="number">1</span>];</div><div class="line">        result[<span class="number">1</span>][<span class="number">1</span>] = matrix1[<span class="number">1</span>][<span class="number">0</span>] * matrix2[<span class="number">0</span>][<span class="number">1</span>] + matrix1[<span class="number">1</span>][<span class="number">1</span>] * matrix2[<span class="number">1</span>][<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[][] matrixPower(<span class="keyword">int</span> n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">assert</span>(n &gt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">long</span>[][] matrix = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</div><div class="line">            matrix = <span class="keyword">new</span> <span class="keyword">long</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,  &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            matrix = matrixPower(n / <span class="number">2</span>);</div><div class="line">            matrix = matrixMultiply2By2(matrix, matrix);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            matrix = matrixPower((n - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">            matrix = matrixMultiply2By2(matrix, matrix);</div><div class="line">            matrix = matrixMultiply2By2(matrix, <span class="keyword">new</span> <span class="keyword">long</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> matrix;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">Fibonacci_Solution3</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> result[n];</div><div class="line"></div><div class="line">        <span class="keyword">long</span>[][] powerNMinus2 = matrixPower(n - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> powerNMinus2[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Fabonacci.Fibonacci_Solution1(<span class="number">13</span>));</div><div class="line">        System.out.println(Fabonacci.Fibonacci_Solution2(<span class="number">13</span>));</div><div class="line">        System.out.println(Fabonacci.Fibonacci_Solution3(<span class="number">13</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java容器（Java Collection Framework）总览]]></title>
      <url>http://bigmingtalk.github.io/2017/01/04/Java%E5%AE%B9%E5%99%A8%EF%BC%88Java-Collection-Framework%EF%BC%89%E6%80%BB%E8%A7%88/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>所谓Java容器，就是容纳Java对象的对象。Java Collection Framework（JCF）提供了Java开发者常用的容器，起始于JDK 1.2。在Java中，容器只能存放对象，对于像int，long，float，double等基本数据类型，需要将它们包装成对象类型后才能够放到容器中。当然，Java编译器很多时间能够自动装箱和自动拆箱，这简化了编程，提高了开发效率，但会导致额外的性能和空间开销。</p>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>Java通过泛型机制使Java容器能够任何类型的对象。Java泛型是编译器为我们提供的一个语法糖。语法糖是指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。Java属于低糖语言，Java中常见的语法糖主要是泛型、变长参数、自动装箱/拆箱等，虚拟机在运行时不支持这些语法，它们在编译阶段还原为简单的基本语法结构，该过程称为解语法糖。</p>
<p>实质上Java的单继承机制使保证这一特性的根本，因为所有的对象都是Object的子类，所以容器里只需要能够放Object对象就行了。Java语言的泛型采用的是擦除法实现的伪泛型，在字节码（Code属性）中，泛型信息编译（类型变量、参数化类型）之后都通通被擦除掉。使用擦除法的好处是实现简单（主要修改Javac编译器，虚拟机内部只做了很少的改动）、非常容易实现Backport，运行期也能够节省一些类型所占的内存空间。坏处是运行期就无法像C#等有真泛型支持的语言那样，将泛型类型与用户定义的普通类型同等对待，例如运行期做反射时无法获得到泛型信息。</p>
<p>泛型机制帮助我们提高了开发效率，由编译器自动帮我们完成了强制转换。JDK 1.4以及之前版本不支持泛型，类型转换需要程序员显示完成。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JDK 1.4 or before</span></div><div class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Monday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Tuesday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Wensday"</span>));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</div><div class="line">    String weekday = (String)list.get(i);<span class="comment">//显式类型转换</span></div><div class="line">    System.out.println(weekday.toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JDK 1.5 or latter</span></div><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//参数化类型</span></div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Monday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Tuesday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Wensday"</span>));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</div><div class="line">    String weekday = list.get(i);<span class="comment">//隐式类型转换，编译器自动完成</span></div><div class="line">    System.out.println(weekday.toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。C、C++在内存管理领域拥有每一个对象的所有权，又担负着每一个对象生命开始到终结的维护责任。而Java把内存控制的权利交给了Java虚拟机，所以Java程序不需要处理令人头疼的内存问题，因此JCF不需要像C++ STL那样需要专门的空间适配器(allocator)。</p>
<p>并且，Java对象都在堆上，且对象只能通过引用(Reference，跟C++中的引用不是同一个概念，可以理解为包装过的指针)访问，因此，容器里实际存放的是对象的引用，而不是对象本身，因此也就不存在C++容器的复制拷贝问题。</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>与C++ STL一样，JCF也提供了迭代器（Iterator）为我们提供了遍历容器中元素的方法。迭代器是通过容器本身得到的，也就是说每个容器都会通过内部类的形式来实现自己的迭代器，因为只有容器本身清楚容器里元素的组织方式。相比于STL的迭代器，JCF的迭代器更容易使用一些。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//visit a list with iterator</span></div><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Monday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Tuesday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Wensday"</span>));</div><div class="line">Iterator&lt;String&gt; it = list.iterator();<span class="comment">//得到迭代器</span></div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">    String weekday = it.next();<span class="comment">//访问元素</span></div><div class="line">    System.out.println(weekday.toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JDK 1.5 引入了增强的for-each循环，简化了迭代容器时的写法。如《Effective Java》中所说，for-each循环不仅让你遍历集合和数组，还能让你遍历任何实现Iterable借口的对象。并且，for-each循环在简洁性和预防Bug方面有着传统for循环无可比拟的优势，并且没有性能损失。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用增强for迭代</span></div><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Monday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Tuesday"</span>));</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"Wensday"</span>));</div><div class="line"><span class="keyword">for</span>(String weekday : list)&#123;<span class="comment">//enhanced for statement</span></div><div class="line">	System.out.println(weekday.toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="容器接口"><a href="#容器接口" class="headerlink" title="容器接口"></a>容器接口</h1><p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/collections/overview.html" target="_blank" rel="external">Collections Framework Overview</a>中介绍，为了规范容器的行为，统一设计，从接口层面看，JCF定义了14种容器接口，它们的关系如下图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/JCF_Collection_Interfaces.png" alt="Java Collection Interface"></p>
<p>Map接口与Collection接口是独立的，并没有继承关系，因为Map表示的是关联式容器而不是集合。当然，Java也提供了从Map装换到Collection的方法，可以方便地将Map装换到集合视图，如可以调用Map的<code>keySet()</code>和<code>entrySet()</code>方法分别得到键的集合和值的集合。</p>
<p>上图中有Queue接口，但是没有Stack接口，这是因为Stack的功能由JDK1.6中引入的Deque所代替。Deque是Double Ended Queue的缩写，即双端队列，既可以实现队列的功能，也可以实现栈的功能。</p>
<h1 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h1><p>上述接口的具体实现如下表所示：</p>
<table align="center"><tr><td colspan="2" rowspan="2" align="center" border="0"></td><th colspan="5" align="center">Implementations</th></tr><tr><th>Hash Table</th><th>Resizable Array</th><th>Balanced Tree</th><th>Linked List</th><th>Hash Table + Linked List</th></tr><tr><th rowspan="4">Interfaces</th><th>Set</th><td><tt>HashSet</tt></td><td></td><td><tt>TreeSet</tt></td><td></td><td><tt>LinkedHashSet</tt></td></tr><tr><th>List</th><td></td><td><tt>ArrayList</tt></td><td></td><td><tt>LinkedList</tt></td><td></td></tr><tr><th>Deque</th><td></td><td><tt>ArrayDeque</tt></td><td></td><td><tt>LinkedList</tt></td><td></td></tr><tr><th>Map</th><td><tt>HashMap</tt></td><td></td><td><tt>TreeMap</tt></td><td></td><td><tt>LinkedHashMap</tt></td></tr></table>

<h1 id="容器总览"><a href="#容器总览" class="headerlink" title="容器总览"></a>容器总览</h1><p>除了上述所说的接口外，JCF中还包含许多抽象类作为具体实现的父类，如AbstractCollection，AbstractSet等。其所有的基础关系如下面两幅图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%B8%80%E8%A7%88%E5%9B%BE.bmp" alt="集合空间一览图"><br>在该图中，包含了JCF中所有的接口，抽象类以及具体类，以及一些常用的接口和类，如Comparable和Comparator接口以及Iterator几口和ListIterator接口等。</p>
<p><img src="http://oe0nilvpj.bkt.clouddn.com/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="Java集合框架图"><br>在上图中，实线边框的是具体的实现类，虚线边框的是抽象类，而点线边框的是接口。</p>
<p># </p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html" target="_blank" rel="external">http://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html</a><br><a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/1-Overview.md" target="_blank" rel="external">https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/1-Overview.md</a><br><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/collections/overview.html" target="_blank" rel="external">http://docs.oracle.com/javase/6/docs/technotes/guides/collections/overview.html</a><br><a href="http://docs.oracle.com/javase/1.5.0/docs/guide/language/foreach.html" target="_blank" rel="external">http://docs.oracle.com/javase/1.5.0/docs/guide/language/foreach.html</a><br><a href="http://www.cnblogs.com/leeplogs/p/5891861.html" target="_blank" rel="external">http://www.cnblogs.com/leeplogs/p/5891861.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说B-树，B+树，B*树]]></title>
      <url>http://bigmingtalk.github.io/2016/12/28/%E8%AF%B4%E8%AF%B4B-%E6%A0%91%EF%BC%8CB-%E6%A0%91%EF%BC%8CB-%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>在开始介绍今天的各种树之前，有必要把一些概念说清楚。</p>
<ol>
<li>Binary Tree（二叉树）：二叉树的每个节点最多有两个子节点</li>
<li>Binary Search Tree（二叉搜索树）：二叉搜索树每个节点只存储一个键值，并且左子树（如果有）所有节点的值都要小于根节点的值，右子树（如果有）所有节点的值都要大于根节点的值。</li>
<li>B-Tree（Balanced Tree）：也就是今天要说的B-树，这里的-不是minus的意思，而是作为连接符的横杠，而我们也经常把B-树直接翻译为B树，所以B树与B-树通常是指一个概念，B代表的是Balance，而不是Binary。而B+树和B*树则是B-树的基础上正对不同场景的优化版本，将会在后文中有所介绍。</li>
</ol>
<a id="more"></a>
<p>在大规模数据存储中，二叉查找树的深度会过大，当内存无法存储所有节点数据时，需要读取磁盘，进行IO操作，从而树的高度越高，I/O操作次数越多，效率也就越低。所以诸如之前所讲的<a href="http://www.bigming.me/2016/12/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%8ATreeMap%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">红黑树</a>，<a href="http://www.bigming.me/2016/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E6%9E%90%E7%90%86%E8%A7%A3AVL%E6%A0%91[%E5%90%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0]/" target="_blank" rel="external">AVL树</a> 因为树的高度太高而不适合这种需要大量IO操作的查询。所以，B树通过多叉的实现来降低树的高度，从而减少IO操作的次数。</p>
<h1 id="B树（B-树）"><a href="#B树（B-树）" class="headerlink" title="B树（B-树）"></a>B树（B-树）</h1><p>为方便描述，下面一律用B数这个名称。B树是一种多路平衡搜索树（非二叉），若其是M路，则：</p>
<ol>
<li>任意非叶子节点最多可以有M个子女，且M&gt;2；</li>
<li>根节点的子女数为[2,M]；</li>
<li>除了根节点以外的非叶子节点的子女数目为M/2（取上整）个到M个；</li>
<li>每个节点存放至少M/2-1（取上整）和至多M-1个键值（至少两个）；</li>
<li>非叶子节点的关键字个数=指向子女的指针个数-1；</li>
<li>非叶子节点的关键字K[1],K[2],…,K[M-1]且有K[i]&lt;K[i+1]；</li>
<li>非叶子节点的指针P[1],P[2],…,P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其他P[i]指向关键字属于(K[i-1],K[i])的子树；</li>
<li>所有叶子节点都位于同一层。</li>
</ol>
<p>B树与二叉搜索树的最大区别在于其每个节点可以存不止一个键值，并且其子女不止两个，不过还是需要满足键值数=子女数-1。因此，对于相同数量的键值，B树比二叉搜索树要更加矮一些，特别是当M较大时，树高会更低。</p>
<p><img src="http://oe0nilvpj.bkt.clouddn.com/B-Tree.png" alt="B-Tree"><br>上图中是一个简单的B树，在实际应用中，M可以取到很大，比如大于1000。一般情况下M的取值会使得每个磁盘盘块可以正好存放一个B数节点。上图中的35节点，35是一个key（或者说是索引，比如磁盘文件的文件名），而小黑块则代表的是该key所指向的内容在磁盘中实际的存储位置，是一个指针（比如35这个文件在硬盘中的位置）。</p>
<h2 id="B树的搜索"><a href="#B树的搜索" class="headerlink" title="B树的搜索"></a>B树的搜索</h2><p>B树的搜索与二叉搜索树类似，只不过需要在节点内部进行一次搜索查找。从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p>
<h2 id="B树的插入"><a href="#B树的插入" class="headerlink" title="B树的插入"></a>B树的插入</h2><p>B树的插入首先查找插入所在的节点，若该节点未满，插入即可，若该节点以及满了，则需要将该节点分裂，并将该节点的中间的元素移动到父节点上，若父节点未满，则结束，若父节点也满了，则需要继续分裂父节点，如此不断向上，直到根节点，如果根节点也满了，则分裂根节点，从而树的高度+1。</p>
<p>下面是B树插入的一个演示动画，往B树中一次插入的元素为6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4。<br><img src="http://oe0nilvpj.bkt.clouddn.com/B-Tree.gif" alt="B-Tree Build"></p>
<h2 id="B树的删除"><a href="#B树的删除" class="headerlink" title="B树的删除"></a>B树的删除</h2><p>B树的删除首先要找到删除的节点，并删除节点中的元素，如果删除的元素有左右孩子，则上移左孩子最右节点或右孩子最左节点到父节点，若没有左右孩子，则直接删除。删除后，若某节点中元素数目不符合B树要求（小于M/2-1取上整），则需要看起相邻的兄弟节点是否有多余的元素，若有，则可以向父节点借一个元素，然后将最丰满的相邻兄弟结点中上移最后或最前一个元素到父节点中（有点类似于左旋）。若其相邻兄弟节点没有多余的元素，则与其兄弟节点合并成一个节点，此时也需要将父节点中的一个元素一起合并。</p>
<p>关于B树插入和删除操作更详细的图解大家可以参考<a href="http://blog.csdn.net/v_JULY_v/article/details/6530142/" target="_blank" rel="external">这篇文章</a></p>
<h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p><img src="http://oe0nilvpj.bkt.clouddn.com/B+Tree.png" alt="B+Tree"><br>B+树是B树的一个变种，其也是一种多路平衡搜索树，其与B树的主要区别是：</p>
<ol>
<li>非叶子节点的指针数量与关键字数量相等；</li>
<li>非叶子节点的子树指针P[i]，指向关键字值属于[K[i],K[i+1]）的子树（B树是开区间，B+树是左闭右开，也就是说B树不允许关键字重复，而B+树允许）；</li>
<li>所有关键字都在叶子节点出现，所有的叶子节点增加了一个链指针（稠密索引，且链表中的关键字切好是有序的）； </li>
<li>非叶子节点相当于是叶子节点的索引（稀疏索引），叶子节点相当于是存储数据的数据层。</li>
</ol>
<p>B+树主要是应文件系统所需而产生的。文件系统中，文件的目录是一级一级索引，只有最底层的叶子节点（文件）保存数据。非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，所有的非叶子节点都可以看成是索引部分。</p>
<p>非叶子节点（比如[5，28，65]）只是一个key（索引，实际的数据在叶子节点上，对应于叶子节点[5,8,9]中的5，[28,30,33]中的28，[65,73,79]中的65才是真正的数据或指向真实数据的指针）。</p>
<h2 id="B-树的搜索"><a href="#B-树的搜索" class="headerlink" title="B+树的搜索"></a>B+树的搜索</h2><p>B+的搜索与B树也是基本相同的。唯一的区别是B+树只有达到叶子结点才命中，因为只有叶节点中存放着真实数据或真实数据的指正，而B树可以在非叶子结点命中，其性能也等价于在元素全集做一次二分查找。</p>
<h2 id="B-树的插入"><a href="#B-树的插入" class="headerlink" title="B+树的插入"></a>B+树的插入</h2><p>B+树的插入与B树类似，如果节点中有多余的空间放入元素，则直接插入即可。如果节点本来就已经满了，则将其分裂为两个节点，并将其中间元素的索引放入到父节点中，在这里如果是叶子节点的话，是拷贝中间元素的索引到父节点中（因为叶子节点需要包含所有的元素），而如果是非叶子节点，则是上移节点的中间元素到父节点中。</p>
<p>下面是B+树插入的一个演示动画：<br><img src="http://oe0nilvpj.bkt.clouddn.com/B+Tree.gif" alt="B+Tree Insert"></p>
<h2 id="B-树的删除"><a href="#B-树的删除" class="headerlink" title="B+树的删除"></a>B+树的删除</h2><p>在叶节点中删除元素，如果节点还满足B+树的要求，则okay。如果元素个数过少，并且其邻近兄弟节点有多余的元素，则从邻近兄弟节点中借一个元素，并修改父节点中的索引使其满足新的划分。如果其邻近兄弟节点也没有多余的元素，则将其和邻近兄弟节点合并，并且我们需要修改其父节点的索引以满足新的划分。并且如果父节点的索引元素太少不满足要求，则需要继续看起兄弟节点是否多余，如果没有多余则还需要与兄弟节点合并，如此不断向上，直到根节点。如果根节点中元素也被删除，则把根节点删除，并由合并来的节点作为新的根节点，树的高度减1。</p>
<p>关于B+树的插入和删除操作可以看<a href="http://www.cburch.com/cs/340/reading/btree/" target="_blank" rel="external">这篇文章</a>，里面有更详细的图解。</p>
<h2 id="B-树与B树的比较"><a href="#B-树与B树的比较" class="headerlink" title="B+树与B树的比较"></a>B+树与B树的比较</h2><p>B+树的非叶子节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，盘块所能容纳的关键字数量也越多，具有更好的空间局部性，一次性读入内存的需要查找的关键字也越多，相对的IO读写次数也就降低了。</p>
<p>另外对于B+树来说，因为非叶子节点只是叶子节点中关键字的索引，所以任何关键字的查找都必须走一条从根节点到叶子节点的路，所有关键字查询的路径长度相同。而若经常访问的元素离根节点很近，则B树访问更迅速，因为其不一定要到叶子节点。</p>
<p>数据库索引采用B+树的主要原因是B树在提高了IO性能的同时并没有解决元素遍历效率低下的问题，而也正是为了解决该问题，B+树应运而生。因为叶子节点中增加了一个链指针，B+树只需要取遍历叶子节点可以实现整棵树的遍历。而且数据库中基于范围的查询是非常频繁的，B树对基于范围的查询效率太低。</p>
<h1 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h1><p>B*树又是B+树的变种，其与B+树的区别有：</p>
<ol>
<li>B*树在B+树的非根和非叶子节点再增加指向兄弟节点的指针</li>
<li>B*树规定非叶子节点的键值个数至少为(2/3)*M，这样每个节点的使用率就从B+树的1/2上升到2/3，所以空间使用率更高。</li>
</ol>
<p>B*树的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；B*树分配新结点的概率比B+树要低，空间使用率更高；</p>
<p>关于B*树的搜索，插入和删除操作其思想和B+树是类似的，这里不再详细说明，有兴趣的童鞋可以自己画一画图。</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://www.itwendao.com/article/detail/2018.html" target="_blank" rel="external">http://www.itwendao.com/article/detail/2018.html</a><br><a href="http://www.cburch.com/cs/340/reading/btree/" target="_blank" rel="external">http://www.cburch.com/cs/340/reading/btree/</a><br><a href="http://www.10tiao.com/html/687/201608/2247483906/1.html" target="_blank" rel="external">http://www.10tiao.com/html/687/201608/2247483906/1.html</a><br><a href="http://www.doc00.com/doc/1001006sj" target="_blank" rel="external">http://www.doc00.com/doc/1001006sj</a><br><a href="https://my.oschina.net/surya/blog/16449" target="_blank" rel="external">https://my.oschina.net/surya/blog/16449</a><br><a href="http://www.cnblogs.com/vincently/p/4526560.html" target="_blank" rel="external">http://www.cnblogs.com/vincently/p/4526560.html</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6530142/" target="_blank" rel="external">http://blog.csdn.net/v_JULY_v/article/details/6530142/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入浅析理解AVL树[含代码实现]]]></title>
      <url>http://bigmingtalk.github.io/2016/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E6%9E%90%E7%90%86%E8%A7%A3AVL%E6%A0%91%5B%E5%90%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%5D/</url>
      <content type="html"><![CDATA[<p>之前大一还是大二的时候学过AVL树，那时候觉得AVL树好难啊，虽然应付了考试，但是考试过后那是忘得一干二净。以至于后来有一次别人说起AVL树的时候都想歪歪了，什么时候岛国的妹子都还需要用一棵树来排个序…现在想想实在罪过…</p>
<h1 id="AVL概念介绍"><a href="#AVL概念介绍" class="headerlink" title="AVL概念介绍"></a>AVL概念介绍</h1><p>与之前介绍的<a href="http://www.bigming.me/2016/12/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%8ATreeMap%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">红黑树</a>一样，AVL数也是一棵自平衡二叉树，同时也是最先发明的自平衡二叉树。在AVL树中任何节点的两棵子树的高度最大差别为1。其查找，插入，删除在平均和最坏情况下都是O(logn)的复杂度，同时对于增加和删除操作则可能需要一次或多次的树旋转来重新平衡这棵树。AVL之所以取这么个名字也完全和到过没有什么关系，而是它们的发明者为G.M. Adelson-Velsky和E.M. Landis，他们在1962年的论文《An algorithm for the organization of information》中发表了它。</p>
<a id="more"></a>
<p>在AVL树中，有一个非常重要的概念，就是节点的平衡因子，它等于该节点的左子树的高度减去右子树的高度（当然也可以相反，原理是一致的）。因为AVL树规定树中任何节点的两棵子树的高度最大差别为1，所以当平衡因子只有为1，0，-1时该节点才被认为是平衡的。而带有平衡因子2或-2则认为该节点不平衡，需要对以该节点为根的子树进行旋转重新平衡这棵树。在实际情况中，不可能存在绝对值大于2的平衡因子，因为一旦出现绝对值为2平衡因子时就会对树进行调整，使其重新平衡。</p>
<p>在实际实现中，平衡因子既可以直接存储在每个节点中，也可以只在节点中存储子树高度，并通过左右子树高度差计算得到。</p>
<h1 id="AVL树的搜索，插入与删除"><a href="#AVL树的搜索，插入与删除" class="headerlink" title="AVL树的搜索，插入与删除"></a>AVL树的搜索，插入与删除</h1><p>AVL树的搜索，插入与删除操作基本上市与二叉搜索树的操作相同的。唯一的区别在于插入与删除后可能导致树不平衡，需要进行旋转操作来使AVL树重新达到平衡。</p>
<h2 id="AVL树的搜索"><a href="#AVL树的搜索" class="headerlink" title="AVL树的搜索"></a>AVL树的搜索</h2><p>AVL树的搜索操作非常简单，只需要比较节点值与搜索值的大小关系，若相等，则搜索成功，否则根据大于关系确定是在左子树中继续搜索还是在右子树中继续搜索，直到null节点为止。其复杂度由树的高度决定，即O(logn)。</p>
<p>AVL树的搜索代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 与二叉搜索树相同</span></div><div class="line">   <span class="function"><span class="keyword">private</span> Node <span class="title">search</span><span class="params">(Node root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.value == value) &#123;</div><div class="line">           <span class="keyword">return</span> root;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (root.value &lt; value) &#123;</div><div class="line">           <span class="keyword">return</span> search(root.right, value);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span> search(root.left, value);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="AVL树的旋转操作"><a href="#AVL树的旋转操作" class="headerlink" title="AVL树的旋转操作"></a>AVL树的旋转操作</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/Tree_Rebalancing.png" alt="LL,RR,LR,RL"><br>AVL树的旋转操作只有四种类型，即LL，RR，LR以及RL，如上图所示。与<a href="http://www.bigming.me/2016/12/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%8ATreeMap%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">红黑树</a>中介绍的树的左旋和右旋其实是一致的。对于LL类型，只需要进行一次右旋即可；对于RR类型，只需要一次左旋即可；对于LR类型，则需要先进行一次左旋，再进行一次右旋；而对于RL类型，则需要先进行一次右旋，再进行一次左旋。</p>
<p>之所以只有这四种情况是因为在插入之前树是平衡的，当插入数据后不平衡的话，假设不平衡的节点为P，P的左子树为L，右子树为R，则有两种情况：</p>
<ol>
<li>平衡因子为2，即左子树的高度减右子树的高度等于2；</li>
<li>平衡因子为-2，即左子树的高度减右子树的高度等于-2。</li>
</ol>
<p>对于情况1，只可能发生在插入的元素在P的左子树L上，但是是在L的左子树上还是L的右子树上则又分为两种情况，即LL类型和LR类型。对于情况2也是类似的。</p>
<p>同时，对于删除操作也是只有这四种情况的，只是相比于插入操作，删除操作是降低了某一子树的高度。</p>
<p>下面的旋转代码实现中，我们增加了一个height函数，是为了解决null情况下求高度的问题，当为null时返回高度0即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// null节点也认为高度为0</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> node.height;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// LL旋转，需要注意的是旋转后node节点为l节点的子节点，</span></div><div class="line"><span class="comment">// 所以要先对node节点的height先赋值</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">LLRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    Node l = node.left;</div><div class="line">    node.left = l.right;</div><div class="line">    l.right = node;</div><div class="line">    node.height = height(node.left) &gt; height(node.right) ? height(node.left) + <span class="number">1</span> : height(node.right) + <span class="number">1</span>;</div><div class="line">    l.height = height(l.left) &gt; height(l.right) ? height(l.left) + <span class="number">1</span> : height(l.right) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// RR旋转，需要注意的是旋转后node节点为r节点的子节点，</span></div><div class="line"><span class="comment">// 所以要先对node节点的height先赋值</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">RRRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    Node r = node.right;</div><div class="line">    node.right = r.left;</div><div class="line">    r.left = node;</div><div class="line">    node.height = height(node.left) &gt; height(node.right) ? height(node.left) + <span class="number">1</span> : height(node.right) + <span class="number">1</span>;</div><div class="line">    r.height = height(r.left) &gt; height(r.right) ? height(r.left) + <span class="number">1</span> : height(r.right) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// LR旋转，先对node.left进行RR旋转，再对node进行LL旋转</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">LRRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    node.left = RRRotation(node.left);</div><div class="line">    <span class="keyword">return</span> LLRotation(node);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// RL旋转，先对node.right进行LL旋转，再对node进行RR旋转</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">RLRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    node.right = LLRotation(node.right);</div><div class="line">    <span class="keyword">return</span> RRRotation(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="AVL树的插入操作"><a href="#AVL树的插入操作" class="headerlink" title="AVL树的插入操作"></a>AVL树的插入操作</h2><p>AVL树的插入操作与二叉搜索树的插入是类似的，插入位置是在叶节点，不过在插入后需要重新计算其高度值。并且当其平衡因子为2或-2时，需要根据具体情况来做旋转操作。插入操作是通过递归来实现的，通过带返回的特性从而使在删除回溯过程中树能够顺利连接起来！当然，也可以不用递归实现插入操作，只不过那样需要对节点引入父指针，因为在旋转过程中需要重新对不平衡节点的父节点的左（或右）子树节点值进行修改。</p>
<p>插入过程代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 插入函数，通过递归实现，插入后需要进行高度判断</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(Node root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">        root = <span class="keyword">new</span> Node(value, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (root.value &lt; value) &#123; <span class="comment">// root右边插入</span></div><div class="line">            root.right = insert(root.right, value); <span class="comment">// 递归实现</span></div><div class="line">            <span class="keyword">if</span> (height(root.right) - height(root.left) == <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (root.right.value &gt; value) &#123; <span class="comment">// 说明插入元素在root.right.left子树上</span></div><div class="line">                    root = RLRotation(root);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    root = RRRotation(root); <span class="comment">// 说明插入元素在root.right.right子树上</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.value &gt; value)&#123;</div><div class="line">            root.left = insert(root.left, value); <span class="comment">// 与上面情况是对称的</span></div><div class="line">            <span class="keyword">if</span> (height(root.left) - height(root.right) == <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (root.left.value &gt; value) &#123;</div><div class="line">                    root = LLRotation(root);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    root = LRRotation(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"insert error, value exists"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 插入后重新调整树的高度，这里也是递归结束后回溯实现的</span></div><div class="line">    root.height = height(root.left) &gt; height(root.right) ? height(root.left) + <span class="number">1</span> : height(root.right) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="AVL树的删除过程"><a href="#AVL树的删除过程" class="headerlink" title="AVL树的删除过程"></a>AVL树的删除过程</h2><p>AVL删除过程与二叉搜索树的删除过程也是类似的，一般有3种情况：</p>
<ol>
<li>删除节点为叶节点</li>
<li>删除节点的左子树和右子树恰好有一个为空</li>
<li>删除节点的左子树和右子树都不为空</li>
</ol>
<p>对于第一种情况，直接删除即可，在代码实现中即赋值为null；对于第二种情况，则是让删除节点的父节点直接跳过删除节点，连接到删除节点的左子树（右子树为空时）或右子树（左子树为空时）。对于第三种情况，则是找到删除节点左子树中的最右节点或删除节点右子树的最左节点，假设该节点为P，然后将P节点的值赋给删除的节点，然后递归地在其左子树或右子树中删除P（因为P是最左或最右节点，肯定最多只有一个孩子，所以递归不会一直进行下去）。</p>
<p>删除操作与插入操作一样，也是递归实现的，并且通过带返回的特性从而使在删除回溯过程中树能够顺利连接起来，在连接起来后需要重新计算平衡因子，若不平衡则对树进行特定的旋转，使其重新达到平衡。并且在返回时需要重新计算返回节点的高度值。</p>
<p>删除的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除节点</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (root.value &lt; value) &#123; <span class="comment">// 在右子树中删除</span></div><div class="line">        root.right = remove(root.right, value);</div><div class="line">        <span class="keyword">if</span> (height(root.left) - height(root.right) == <span class="number">2</span>) &#123; <span class="comment">// 右子树删除高度可能会变低</span></div><div class="line">            <span class="keyword">if</span> (height(root.left.left) &gt; height(root.left.right)) &#123; <span class="comment">// 属于LL类型</span></div><div class="line">                root = LLRotation(root);</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 属于LR类型</span></div><div class="line">                root = LRRotation(root);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.value &gt; value) &#123; <span class="comment">// 在左子树中删除</span></div><div class="line">        root.left = remove(root.left, value);</div><div class="line">        <span class="keyword">if</span> (height(root.right) - height(root.left) == <span class="number">2</span>) &#123; <span class="comment">// 左子树删除高度可能会变低</span></div><div class="line">            <span class="keyword">if</span> (height(root.right.right) &gt; height(root.right.left)) &#123;</div><div class="line">                root = RRRotation(root);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                root = RLRotation(root);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 找到要删除的元素</span></div><div class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            两个子树都非空的情况，则</div><div class="line">            1. 根据左右子树树高找到左子树最大节点或右子树最小节点</div><div class="line">            2. 将该节点的值赋值给root</div><div class="line">            3. 递归删除该节点</div><div class="line">             */</div><div class="line">            <span class="keyword">if</span> (height(root.left) &gt; height(root.right)) &#123;</div><div class="line">                Node l = root.left;</div><div class="line">                <span class="keyword">while</span> (l.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    l = l.right;</div><div class="line">                &#125;</div><div class="line">                root.value = l.value;</div><div class="line">                root.left = remove(root.left, l.value);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Node r = root.right;</div><div class="line">                <span class="keyword">while</span> (r.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    r = r.left;</div><div class="line">                &#125;</div><div class="line">                root.value = r.value;</div><div class="line">                root.right = remove(root.right, r.value);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 有一个孩子为空，则把该孩子返回即可，都为空则是返回null，回溯的时候会将连接关系补好.</span></div><div class="line">            root = root.left != <span class="keyword">null</span> ? root.left : root.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root != <span class="keyword">null</span>)</div><div class="line">        root.height = height(root.left) &gt; height(root.right) ? height(root.left) + <span class="number">1</span> : height(root.right) + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="所有代码"><a href="#所有代码" class="headerlink" title="所有代码"></a>所有代码</h2><p>关于AVL树的所有代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/27.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Node root;</div><div class="line"></div><div class="line">    <span class="comment">// AVL树节点类，含有高度，</span></div><div class="line">    <span class="comment">// 高度是指从叶节点到该节点的高度，叶节点高度为0.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        <span class="keyword">int</span> height;</div><div class="line">        Node left;</div><div class="line">        Node right;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value, Node left, Node right)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">            <span class="keyword">this</span>.height = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AVLTree</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.root = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 与二叉搜索树相同</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">search</span><span class="params">(Node root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.value == value) &#123;</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (root.value &lt; value) &#123;</div><div class="line">            <span class="keyword">return</span> search(root.right, value);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> search(root.left, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// null节点也认为高度为0</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> node.height;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// LL旋转，需要注意的是旋转后node节点为l节点的子节点，</span></div><div class="line">    <span class="comment">// 所以要先对node节点的height先赋值</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">LLRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        Node l = node.left;</div><div class="line">        node.left = l.right;</div><div class="line">        l.right = node;</div><div class="line">        node.height = height(node.left) &gt; height(node.right) ? height(node.left) + <span class="number">1</span> : height(node.right) + <span class="number">1</span>;</div><div class="line">        l.height = height(l.left) &gt; height(l.right) ? height(l.left) + <span class="number">1</span> : height(l.right) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> l;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// RR旋转，需要注意的是旋转后node节点为r节点的子节点，</span></div><div class="line">    <span class="comment">// 所以要先对node节点的height先赋值</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">RRRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        Node r = node.right;</div><div class="line">        node.right = r.left;</div><div class="line">        r.left = node;</div><div class="line">        node.height = height(node.left) &gt; height(node.right) ? height(node.left) + <span class="number">1</span> : height(node.right) + <span class="number">1</span>;</div><div class="line">        r.height = height(r.left) &gt; height(r.right) ? height(r.left) + <span class="number">1</span> : height(r.right) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// LR旋转，先对node.left进行RR旋转，再对node进行LL旋转</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">LRRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        node.left = RRRotation(node.left);</div><div class="line">        <span class="keyword">return</span> LLRotation(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// RL旋转，先对node.right进行LL旋转，再对node进行RR旋转</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">RLRotation</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        node.right = LLRotation(node.right);</div><div class="line">        <span class="keyword">return</span> RRRotation(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 插入函数，通过递归实现，插入后需要进行高度判断</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(Node root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            root = <span class="keyword">new</span> Node(value, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (root.value &lt; value) &#123; <span class="comment">// root右边插入</span></div><div class="line">                root.right = insert(root.right, value); <span class="comment">// 递归实现</span></div><div class="line">                <span class="keyword">if</span> (height(root.right) - height(root.left) == <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (root.right.value &gt; value) &#123; <span class="comment">// 说明插入元素在root.right.left子树上</span></div><div class="line">                        root = RLRotation(root);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        root = RRRotation(root); <span class="comment">// 说明插入元素在root.right.right子树上</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.value &gt; value)&#123;</div><div class="line">                root.left = insert(root.left, value); <span class="comment">// 与上面情况是对称的</span></div><div class="line">                <span class="keyword">if</span> (height(root.left) - height(root.right) == <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (root.left.value &gt; value) &#123;</div><div class="line">                        root = LLRotation(root);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        root = LRRotation(root);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"insert error, value exists"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 插入后重新调整树的高度，这里也是递归结束后回溯实现的</span></div><div class="line">        root.height = height(root.left) &gt; height(root.right) ? height(root.left) + <span class="number">1</span> : height(root.right) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除节点</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (root.value &lt; value) &#123; <span class="comment">// 在右子树中删除</span></div><div class="line">            root.right = remove(root.right, value);</div><div class="line">            <span class="keyword">if</span> (height(root.left) - height(root.right) == <span class="number">2</span>) &#123; <span class="comment">// 右子树删除高度可能会变低</span></div><div class="line">                <span class="keyword">if</span> (height(root.left.left) &gt; height(root.left.right)) &#123; <span class="comment">// 属于LL类型</span></div><div class="line">                    root = LLRotation(root);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 属于LR类型</span></div><div class="line">                    root = LRRotation(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.value &gt; value) &#123; <span class="comment">// 在左子树中删除</span></div><div class="line">            root.left = remove(root.left, value);</div><div class="line">            <span class="keyword">if</span> (height(root.right) - height(root.left) == <span class="number">2</span>) &#123; <span class="comment">// 左子树删除高度可能会变低</span></div><div class="line">                <span class="keyword">if</span> (height(root.right.right) &gt; height(root.right.left)) &#123;</div><div class="line">                    root = RRRotation(root);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    root = RLRotation(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 找到要删除的元素</span></div><div class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">/*</span></div><div class="line">                两个子树都非空的情况，则</div><div class="line">                1. 根据左右子树树高找到左子树最大节点或右子树最小节点</div><div class="line">                2. 将该节点的值赋值给root</div><div class="line">                3. 递归删除该节点</div><div class="line">                 */</div><div class="line">                <span class="keyword">if</span> (height(root.left) &gt; height(root.right)) &#123;</div><div class="line">                    Node l = root.left;</div><div class="line">                    <span class="keyword">while</span> (l.right != <span class="keyword">null</span>) &#123;</div><div class="line">                        l = l.right;</div><div class="line">                    &#125;</div><div class="line">                    root.value = l.value;</div><div class="line">                    root.left = remove(root.left, l.value);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Node r = root.right;</div><div class="line">                    <span class="keyword">while</span> (r.left != <span class="keyword">null</span>) &#123;</div><div class="line">                        r = r.left;</div><div class="line">                    &#125;</div><div class="line">                    root.value = r.value;</div><div class="line">                    root.right = remove(root.right, r.value);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 有一个孩子为空，则把该孩子返回即可，都为空则是返回null，回溯的时候会将连接关系补好.</span></div><div class="line">                root = root.left != <span class="keyword">null</span> ? root.left : root.right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)</div><div class="line">            root.height = height(root.left) &gt; height(root.right) ? height(root.left) + <span class="number">1</span> : height(root.right) + <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印二叉树的连接关系</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Node root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"value: "</span> + root.value);</div><div class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.printf(<span class="string">"%2d is %2d's left child \n"</span>, root.left.value, root.value);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.printf(<span class="string">"%2d is %2d's right child \n"</span>, root.right.value, root.value);</div><div class="line">            &#125;</div><div class="line">            print(root.left);</div><div class="line">            print(root.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line">        AVLTree tree = <span class="keyword">new</span> AVLTree();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Insertion starts.........."</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != arr.length; i++) &#123;</div><div class="line">            tree.root = tree.insert(tree.root, arr[i]);</div><div class="line">            System.out.println(arr[i] + <span class="string">" inserted"</span>);</div><div class="line">            tree.print(tree.root);</div><div class="line">            System.out.println(<span class="string">"****************"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Insertion ends........."</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"#####################"</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Delete starts.........."</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i != -<span class="number">1</span>; i--) &#123;</div><div class="line">            tree.root = tree.remove(tree.root, arr[i]);</div><div class="line">            System.out.println(arr[i] + <span class="string">" removed"</span>);</div><div class="line">            tree.print(tree.root);</div><div class="line">            System.out.println(<span class="string">"*****************"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Delete ends............"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div></pre></td><td class="code"><pre><div class="line">Insertion starts..........</div><div class="line">3 inserted</div><div class="line">value: 3</div><div class="line">****************</div><div class="line">2 inserted</div><div class="line">value: 3</div><div class="line"> 2 is  3&apos;s left child </div><div class="line">value: 2</div><div class="line">****************</div><div class="line">1 inserted</div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">****************</div><div class="line">4 inserted</div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line"> 4 is  3&apos;s right child </div><div class="line">value: 4</div><div class="line">****************</div><div class="line">5 inserted</div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 4 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 4</div><div class="line"> 3 is  4&apos;s left child </div><div class="line"> 5 is  4&apos;s right child </div><div class="line">value: 3</div><div class="line">value: 5</div><div class="line">****************</div><div class="line">6 inserted</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 5 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 5</div><div class="line"> 6 is  5&apos;s right child </div><div class="line">value: 6</div><div class="line">****************</div><div class="line">7 inserted</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line"> 7 is  6&apos;s right child </div><div class="line">value: 5</div><div class="line">value: 7</div><div class="line">****************</div><div class="line">16 inserted</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line"> 7 is  6&apos;s right child </div><div class="line">value: 5</div><div class="line">value: 7</div><div class="line">16 is  7&apos;s right child </div><div class="line">value: 16</div><div class="line">****************</div><div class="line">15 inserted</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">15 is  6&apos;s right child </div><div class="line">value: 5</div><div class="line">value: 15</div><div class="line"> 7 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 7</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">14 inserted</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 7 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 7</div><div class="line"> 6 is  7&apos;s left child </div><div class="line">15 is  7&apos;s right child </div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">13 inserted</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">15 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">13 is 14&apos;s left child </div><div class="line">value: 13</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">12 inserted</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">15 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 15</div><div class="line">13 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 13</div><div class="line">12 is 13&apos;s left child </div><div class="line">14 is 13&apos;s right child </div><div class="line">value: 12</div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">11 inserted</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">12 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 12</div><div class="line">11 is 12&apos;s left child </div><div class="line">value: 11</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">10 inserted</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">11 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 11</div><div class="line">10 is 11&apos;s left child </div><div class="line">12 is 11&apos;s right child </div><div class="line">value: 10</div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">8 inserted</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">11 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 11</div><div class="line">10 is 11&apos;s left child </div><div class="line">12 is 11&apos;s right child </div><div class="line">value: 10</div><div class="line"> 8 is 10&apos;s left child </div><div class="line">value: 8</div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">9 inserted</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">11 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 11</div><div class="line"> 9 is 11&apos;s left child </div><div class="line">12 is 11&apos;s right child </div><div class="line">value: 9</div><div class="line"> 8 is  9&apos;s left child </div><div class="line">10 is  9&apos;s right child </div><div class="line">value: 8</div><div class="line">value: 10</div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">****************</div><div class="line">Insertion ends.........</div><div class="line">#####################</div><div class="line">Delete starts..........</div><div class="line">9 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">11 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 11</div><div class="line">10 is 11&apos;s left child </div><div class="line">12 is 11&apos;s right child </div><div class="line">value: 10</div><div class="line"> 8 is 10&apos;s left child </div><div class="line">value: 8</div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">8 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">11 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 11</div><div class="line">10 is 11&apos;s left child </div><div class="line">12 is 11&apos;s right child </div><div class="line">value: 10</div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">10 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">11 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 11</div><div class="line">12 is 11&apos;s right child </div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">11 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">13 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 13</div><div class="line">12 is 13&apos;s left child </div><div class="line">15 is 13&apos;s right child </div><div class="line">value: 12</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">12 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">14 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 14</div><div class="line">13 is 14&apos;s left child </div><div class="line">15 is 14&apos;s right child </div><div class="line">value: 13</div><div class="line">value: 15</div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">13 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">15 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 15</div><div class="line">14 is 15&apos;s left child </div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 14</div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">14 removed</div><div class="line">value: 7</div><div class="line"> 4 is  7&apos;s left child </div><div class="line">15 is  7&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">value: 15</div><div class="line">16 is 15&apos;s right child </div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">15 removed</div><div class="line">value: 6</div><div class="line"> 4 is  6&apos;s left child </div><div class="line"> 7 is  6&apos;s right child </div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 5 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 5</div><div class="line">value: 7</div><div class="line">16 is  7&apos;s right child </div><div class="line">value: 16</div><div class="line">*****************</div><div class="line">16 removed</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line"> 7 is  6&apos;s right child </div><div class="line">value: 5</div><div class="line">value: 7</div><div class="line">*****************</div><div class="line">7 removed</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 6 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 6</div><div class="line"> 5 is  6&apos;s left child </div><div class="line">value: 5</div><div class="line">*****************</div><div class="line">6 removed</div><div class="line">value: 4</div><div class="line"> 2 is  4&apos;s left child </div><div class="line"> 5 is  4&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">value: 5</div><div class="line">*****************</div><div class="line">5 removed</div><div class="line">value: 3</div><div class="line"> 2 is  3&apos;s left child </div><div class="line"> 4 is  3&apos;s right child </div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line">value: 1</div><div class="line">value: 4</div><div class="line">*****************</div><div class="line">4 removed</div><div class="line">value: 2</div><div class="line"> 1 is  2&apos;s left child </div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 1</div><div class="line">value: 3</div><div class="line">*****************</div><div class="line">1 removed</div><div class="line">value: 2</div><div class="line"> 3 is  2&apos;s right child </div><div class="line">value: 3</div><div class="line">*****************</div><div class="line">2 removed</div><div class="line">value: 3</div><div class="line">*****************</div><div class="line">3 removed</div><div class="line">*****************</div><div class="line">Delete ends............</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>通过对一串树顺序插入并逆序删除，可以发现在拥有相同元素的情况下其插入时树的形态与删除时树的形态是不一定相同的，比如在插入16后树中含有的元素有{3,2,1,4,5,6,7,16}，其是以4为根节点的，而在删除过程中删除15后，元素也是{3,2,1,4,5,6,7,16}，但是以6为根节点的，虽然两棵树形态不同，但是它们都是平衡的。并且如果在删除16后，元素只有{3,2,1,4,5,6,7}时，插入时状态和删除时状态又是相同的。所以，AVL树的插入和删除即便插入与删除的过程时逆序的，也不能保证树的形态在拥有相同元素时式相同的！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>AVL树是一种高度平衡的自平衡二叉树，也正是因为其对平衡的要求很高，所以于红黑树相比，其插入和删除操作虽然平均时间复杂度和红黑树一样都是O(logn)，但是AVL树往往需要进行更多的旋转操作，所以在插入和删除时所需要的时间比红黑树要高。但是，又因为其高度平衡性，其搜索的时间复杂度与红黑树相比虽然都为O(logn)，但是实际时间往往比红黑树要好一些。所以，当我们的数据需要频繁插入删除，而很少查询时，应选用红黑树；反之，当插入和删除操作很少而查询操作很多时，应选用AVL树。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91" target="_blank" rel="external">https://zh.wikipedia.org/wiki/AVL%E6%A0%91</a><br><a href="http://blog.chinaunix.net/uid-28852942-id-4035450.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-28852942-id-4035450.html</a><br><a href="http://www.jianshu.com/p/e57752ac321b" target="_blank" rel="external">http://www.jianshu.com/p/e57752ac321b</a><br><a href="http://www.cnblogs.com/skywang12345/p/3577479.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3577479.html</a><br><a href="https://github.com/PeterRK/DSGO/blob/master/book/pages/05-A.md" target="_blank" rel="external">https://github.com/PeterRK/DSGO/blob/master/book/pages/05-A.md</a><br><a href="http://blog.csdn.net/lpp0900320123/article/details/39367451" target="_blank" rel="external">http://blog.csdn.net/lpp0900320123/article/details/39367451</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说卡特兰数]]></title>
      <url>http://bigmingtalk.github.io/2016/12/26/%E8%AF%B4%E8%AF%B4%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>卡特兰(Catalan)数在各种笔试智力题中经常出现，其是组合数学中一个常在各种计数问题中出现的数列，其以比利时的数学家卡特兰的名字命名。卡特兰数再许多场景中都有应用，常见的有括号匹配问题，进栈出栈问题，二叉树的种类问题，n个非叶节点的满二叉树的形态数，网格路径问题，凸多边形分割问题，集合划分问题，阶梯切分问题，乘积重组问题，圆内弦不相交问题，高矮排队问题，格子填数问题，门票找钱问题以及卡特兰数的变形问题。</p>
<a id="more"></a>
<p>卡特兰数有一些非常美的性质，比如：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0.jpeg" alt="卡特兰数"></p>
<p>前几个卡特兰数为：1，1，2，5，14，42，132，429，1430，4862，16796，58786，208012，…</p>
<p>卡特兰数可用上述的公式方便求解，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getCatalan</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">long</span>[] arr = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</div><div class="line">       arr[<span class="number">0</span>] = arr[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">               arr[i] += (arr[j] * arr[i - <span class="number">1</span> - j]); <span class="comment">// 根据递归式计算</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">long</span> res = arr[n];</div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h1 id="卡特兰数的应用场景"><a href="#卡特兰数的应用场景" class="headerlink" title="卡特兰数的应用场景"></a>卡特兰数的应用场景</h1><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p>问题：n对括号有多少种匹配方式？</p>
<p>n对括号相当于有2n个符号，n个左括号、n个右括号，可以设问题的解为f(2n)。第0个符号肯定为左括号，与之匹配的右括号必须为第2i+1字符。因为如果是第2i个字符，那么第0个字符与第2i个字符间包含奇数个字符，而奇数个字符是无法构成匹配的。通过简单分析，f(2n)可以转化如下的递推式 f(2n) = f(0)f(2n-2) + f(2)f(2n - 4) + … + f(2n - 4)f(2) + f(2n-2)f(0)。</p>
<p>f(0)f(2n-2)表示第0个字符与第1个字符匹配，同时剩余字符分成两个部分，一部分为0个字符，另一部分为2n-2个字符，然后对这两部分求解。f(2)f(2n-4)表示第0个字符与第3个字符匹配，同时剩余字符分成两个部分，一部分为2个字符，另一部分为2n-4个字符。依次类推。结合递归式，不难发现f(2n)等于卡特兰公式的第n项。</p>
<h2 id="进栈出栈问题"><a href="#进栈出栈问题" class="headerlink" title="进栈出栈问题"></a>进栈出栈问题</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/%E8%BF%9B%E5%87%BA%E6%A0%88.png" alt="进栈出栈"><br>问题：一个栈(无穷大)的进栈序列为1，2，3，…，n，有多少个不同的出栈序列?</p>
<p>该问题与加括号的很相似，进栈操作相当于是左括号，而出栈操作相当于右括号。n个数的进栈次序和出栈次序构成了一个含2n个数字的序列。第0个数字肯定是进栈的数，这个数相应的出栈的数一定是第2i+1个数。因为如果是2i，那么中间包含了奇数个数，这奇数个肯定无法构成进栈出栈序列。设问题的解为f(2n)， 那么f(2n) = f(0)f(2n-2) + f(2)f(2n-4) + f(2n-2)f(0)。</p>
<p>f(0)f(2n-2)表示第0个数字进栈后立即出栈，此时这个数字的进栈与出栈间包含的数字个数为0，剩余为2n-2个数。f(2)f(2n-4)表示第0个数字进栈与出栈间包含了2个数字，相当于1 2 2 1，剩余为2n-4个数字。依次类推。假设f(0) = 1，计算一下开始几项，f(2) = 1, f(4) = 2, f(6) = 5。结合递归式，不难发现f(2n)等于卡特兰公式的第n项。</p>
<h2 id="二叉树的种类问题"><a href="#二叉树的种类问题" class="headerlink" title="二叉树的种类问题"></a>二叉树的种类问题</h2><p>问题：n个节点构成的二叉树，共有多少种情形？</p>
<p>可以这样考虑，根肯定会占用一个结点，那么剩余的n-1个结点可以有如下的分配方式，T(0, n-1),T(1, n-2),…T(n-1, 0)，设T(i, j)表示根的左子树含i个结点，右子树含j个结点。<br>设问题的解为f(n)，那么f(n) = f(0)f(n-1) + f(1)f(n-2) + …….+ f(n-2)f(1) + f(n-1)f(0)。假设f(0) = 1，那么f(1) = 1, f(2) = 2, f(3) = 5。结合递归式，不难发现f(n)等于卡特兰公式的第n项。</p>
<h2 id="n个非叶节点的满二叉树的形态数"><a href="#n个非叶节点的满二叉树的形态数" class="headerlink" title="n个非叶节点的满二叉树的形态数"></a>n个非叶节点的满二叉树的形态数</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="满二叉树的形态数"><br>问题：n个非叶节点的满二叉树的形态数（对称后得到的二叉树除非自己本身对称，否则算是不同）</p>
<p>对于满二叉树，实际上就是将上题中的每个子节点的空儿子上都加上叶子，就形成了对应的满二叉树，那么n个非叶节点形成的满二叉树的形态数即为卡特兰公式的第n项。</p>
<h2 id="网格路径问题"><a href="#网格路径问题" class="headerlink" title="网格路径问题"></a>网格路径问题</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/%E7%BD%91%E6%A0%BC.png" alt="网格路径"><br>问题：对于一个nxn的正方形网格，每次我们能向右或者向上移动一格，那么从左下角到右上角的所有在副对角线右下方的路径总数为多少？</p>
<p>我们将一条水平边记为进栈,垂直边记为出栈，我们所要保证的就是前k步中水平边的个数不小于垂直边的个数，换句话说出栈的时候栈内一直有元素，所以从根本上说又回归到卡特兰。</p>
<h2 id="凸多边形分割问题"><a href="#凸多边形分割问题" class="headerlink" title="凸多边形分割问题"></a>凸多边形分割问题</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2.png" alt="凸多边形"><br>问题：求一个凸多边形区域划分成三角形区域的方法数？</p>
<p>以凸多边形的一边为基，设这条边的2个顶点为A和B。从剩余顶点中选1个，可以将凸多边形分成三个部分，中间是一个三角形，左右两边分别是两个凸多边形，然后求解左右两个凸多边形。设问题的解f(n)，其中n表示顶点数，那么f(n) = f(2)f(n-1) + f(3)f(n-2) + ……f(n-2)f(3) + f(n-1)f(2)。</p>
<p>f(2)f(n-1)表示三个相邻的顶点构成一个三角形，那么另外两个部分的顶点数分别为2和n-1。设f(2) = 1，那么f(3) = 1, f(4) = 2, f(5) = 5。结合递推式，不难发现f(n) 等于等于卡特兰公式的第n-2项。</p>
<h2 id="集合划分问题"><a href="#集合划分问题" class="headerlink" title="集合划分问题"></a>集合划分问题</h2><p>问题：对于集合{1,2,3…2n}的不交叉划分的数目为多少？</p>
<p>这里解释一下不交叉划分，我们对于集合{a,b}和{c,d}，假设他们组成了两个区间[a,b]和[c,d]，我们假设两个区间不重合，那么以下四种情况当做是不交叉的：a&lt;c&lt;d&lt;b，a&lt;b&lt;c&lt;d，c&lt;a&lt;b&lt;d与c&lt;d&lt;a&lt;b，就是说两个区间可以包含或者相离，那么此时我们称集合{a,b}和{c,d}是不交叉的。</p>
<p>对于集合{1,2,3…2n}，将里面元素两两分为一子集，共n个，若任意两个子集都是不交叉的，那么我们称此时的这个划分为一个不交叉划分。我们将每个子集中较小的数用左括号代替，较大的用右括号代替，那么带入原来的1至2n的序列中就形成了合法括号问题，就是我们之前得到过的结论。</p>
<h2 id="阶梯切分问题"><a href="#阶梯切分问题" class="headerlink" title="阶梯切分问题"></a>阶梯切分问题</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/n%E5%B1%82%E9%98%B6%E6%A2%AF%E5%88%92%E5%88%86.png" alt="阶梯切分问题"><br><img src="http://oe0nilvpj.bkt.clouddn.com/n%E5%B1%82%E9%98%B6%E6%A2%AF%E5%88%92%E5%88%862.png" alt="阶梯切分问题"><br>问题：求n层的阶梯切割为n个矩形的切法数</p>
<p>这个证明是怎么进行的呢？我们先绘制如下的一张图片，即n为5的时候的阶梯：<br>我们注意到每个切割出来的矩形都必需包括一块标示为<em> 的小正方形,那么我们此时枚举每个</em> 与#标示的两角作为矩形，剩下的两个小阶梯就是我们的两个更小的子问题了，于是我们的C5 = C0 <em> C4 + C1 </em> C3 + C2 <em> C2 + C1 </em> C3 + C0 <em> C4，注意到这里的式子就是我们前面的性质3,因此这就是我们所求的结果了。将原图中枚举的每个以</em>和#为两角的矩形挖去，将会剩下两个更小的阶梯（或者一个大小为0的阶梯和一个大小非0的阶梯）。</p>
<h2 id="乘积重组问题"><a href="#乘积重组问题" class="headerlink" title="乘积重组问题"></a>乘积重组问题</h2><p>问题：矩阵连乘：P=a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？</p>
<p>我们这样考虑，首先通过括号化，将P分成两个部分，然后分别对两个部分进行括号化。比如分成(a1)×(a2×a3…..×an)，然后再对(a1)和(a2×a3…..×an)分别括号化；又如分成(a1×a2)×(a3…..×an)，然后再对(a1×a2)和(a3…..×an)括号化。</p>
<p> 设n个矩阵的括号化方案的种数为f(n)，那么问题的解为f(n) = f(1)f(n-1) + f(2)f(n-2) + f(3)f(n-3) + f(n-1)f(1)。f(1)*f(n-1)表示分成(a1)×(a2×a3…..×an)两部分，然后分别括号化。计算开始几项，f(1) = 1, f(2) = 1, f(3) = 2, f(4) = 5。结合递归式，不难发现f(n)等于卡特兰公式的第n-1项。</p>
<h2 id="圆内弦不相交问题"><a href="#圆内弦不相交问题" class="headerlink" title="圆内弦不相交问题"></a>圆内弦不相交问题</h2><p><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%9C%86%E5%86%85%E5%BC%A6%E9%97%AE%E9%A2%98.png" alt="圆内弦不相交"><br>问题：在圆上有2n个点，将这些点成对连接起来使得所得到的n条弦不相交的方法数？</p>
<p>我们这样考虑，以其中一个点为基点，编号为0，然后按顺时针方向将其他点依次编号。那么与编号为0相连点的编号一定是奇数，否则，这两个编号间含有奇数个点，势必会有个点被孤立，即在一条弦的两侧分别有一个孤立点，从而导致两条弦相交。设选中的基点为A，与它连接的点为B，那么A和B将所有点分成两个部分，一部分位于A、B的左边，另一部分位于A、B的右边。然后分别对这两部分求解即可。</p>
<p>设问题的解f(n)，那么f(n) = f(0)f(n-2) + f(2)f(n-4) + f(4)f(n-6) + ……f(n-4)f(2) + f(n-2)f(0)。f(0)f(n-2)表示编号0的点与编号1的点相连，此时位于它们右边的点的个数为0，而位于它们左边的点为2n-2。依次类推。f(0) = 1, f(2) = 1, f(4) = 2。结合递归式，不难发现f(2n)等于卡特兰公式的第n项。</p>
<h2 id="高矮排队问题"><a href="#高矮排队问题" class="headerlink" title="高矮排队问题"></a>高矮排队问题</h2><p>问题：2n个高矮不同的人,排成两排,每排必须是从矮到高排列,而且第二排比对应的第一排的人高,问排列方式有多少种?</p>
<p>先将2n个人从低到高排列，然后，用0表示对应的人在第一排,用1表示对应的人在第二排,那么含有n个0,n个1的序列,就对应一种方案.<br>比如00…011…1就对应着<br>第一排:1     2     3    …n<br>第二排:n+1  n+2  n+3  …2n<br>而010101…01对应着<br>第一排:1   3   5  …2n-1<br>第二排:2   4   6  …2n </p>
<p>问题转换为,这样的满足条件的01序列有多少个？观察1的出现,我们考虑它能不能放在第二排,显然,在这个1之前出现的那些0和1对应的人 要么是在这个1左边,要么是在这个1前面。而即使前面0和1刚好配对，也一定要留出一个0在这个1前面，也就是要求之前的0的个数大于1的个数. 如果把0看成入栈操作,1看成出栈操作,就是说给定2n个元素,合法的入栈出栈序列有多少个。结合递归式，不难发现f(2n)等于卡特兰公式的第n项。</p>
<h2 id="格子填数问题"><a href="#格子填数问题" class="headerlink" title="格子填数问题"></a>格子填数问题</h2><p>问题：在一个2*n的格子中填入1到2n这些数值使得每个格子内的数值都比其右边和上边的所有数值都小的情况数</p>
<p>该题和上一题排队是一样的思路。</p>
<h2 id="门票找钱问题"><a href="#门票找钱问题" class="headerlink" title="门票找钱问题"></a>门票找钱问题</h2><p>问题：有2n个人排成一行进入剧场。入场费5元。其中只有n个人有一张5元钞票，另外n人只有10元钞票，剧院无其它钞票，问有多少中方法使得只要有10元的人买票，售票处就有5元的钞票找零？</p>
<p>可以将持5元买票视为进栈，那么持10元买票视为5元的出栈。这个问题就转化成了栈的出栈次序数。</p>
<h2 id="Catalan数的一个变形应用"><a href="#Catalan数的一个变形应用" class="headerlink" title="Catalan数的一个变形应用"></a>Catalan数的一个变形应用</h2><p>上面第12小题的一个延伸：n+m个人排队买票，并且满足n&gt;=m，票价为5元，其中n个人各手持一张5元钞票，m个人各手持一张10元钞票，除此之外大家身上没有任何其他的钱币，并且初始时候售票窗口没有钱，问有多少种排队的情况数能够让大家都买到票。</p>
<p>这个题目是Catalan数的变形，不考虑人与人的差异，如果m=n的话那么就是我们初始的Catalan数问题，也就是将手持5元的人看成是入栈，手持10元的人看成是出栈，出栈序列的个数。这个题目区别就在于n &gt; m的情况，此时我们仍然可以用原先的证明方法考虑，假设我们要的情况数是D(n + m)，无法让每个人都买到的情况数是U(n+m)，那么就有D(n + m) + U(n + m) = C(m + n, n)，此时我们求U(n + m)，我们假设最早买不到票的人编号是k，他手持的是10元并且售票处没有钱，那么将前k个人的钱从5元变成10元，从10元变成5元，这时候就有n+1个人手持5元，m-1个手持10元的，所以就得到U(n + m) = C(n + m, n + 1)，即存在一一对应关系。于是我们的结果就因此得到了，表达式是D(n + m) = C(n + m, n) - C(n + m, n + 1)。</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.csdn.net/duanruibupt/article/details/6869431" target="_blank" rel="external">http://blog.csdn.net/duanruibupt/article/details/6869431</a><br><a href="http://www.cnblogs.com/wuyuegb2312/p/3016878.html" target="_blank" rel="external">http://www.cnblogs.com/wuyuegb2312/p/3016878.html</a><br><a href="http://blog.csdn.net/han_xiaoyang/article/details/11938973" target="_blank" rel="external">http://blog.csdn.net/han_xiaoyang/article/details/11938973</a><br><a href="https://en.wikipedia.org/wiki/Catalan_number" target="_blank" rel="external">https://en.wikipedia.org/wiki/Catalan_number</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0</a><br><a href="http://lanqi.org/skills/10939/" target="_blank" rel="external">http://lanqi.org/skills/10939/</a><br><a href="http://lanqi.org/skills/10631/" target="_blank" rel="external">http://lanqi.org/skills/10631/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解红黑树及TreeMap源码实现]]></title>
      <url>http://bigmingtalk.github.io/2016/12/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%8ATreeMap%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>本文将对红黑树做系统性的介绍，并配合Java集合框架中TreeMap源码的红黑树实现来做具体说明。</p>
<h1 id="红黑树介绍"><a href="#红黑树介绍" class="headerlink" title="红黑树介绍"></a>红黑树介绍</h1><p>算法导论中对红黑树（R-B Tree）的介绍为：</p>
<blockquote>
<p>红黑树，一种二叉查找树，但在每个节点上增加一个存储位表示节点的颜色，可以是RED或BLACK。通过对任何一条从根到叶子的路径上各个节点着色方式的限制，红黑树确保没有一条路径会比其他路径长出两倍，因而是接近平衡的。</p>
</blockquote>
<a id="more"></a>
<p>由上面的介绍可知，红黑树首先是一棵二叉查找树，红黑树一定满足二叉查找树的性质。那么二叉查找树是什么呢？</p>
<p>根据<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="external">wiki</a>上的介绍，二叉查找树，也称二叉搜索树、有序二叉树，排序二叉树，是指一棵空树或者具有下列性质的二叉树：</p>
<ol>
<li>任何节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li>
<li>任何节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li>
<li>任何节点的左、右子树分别为二叉查找树；</li>
<li>没有键值相等的节点。</li>
</ol>
<p>从以上定义可知，二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低，为O(logn)。由二叉查找树可以构建更为抽象的数据结构，如集合，multiset，关联数组等。二叉查找树搜索、插入、删除的复杂度等于树高，期望O(logn)，最坏O(n)（数组有序，树退化成线性表）。而我们本文中所讲的红黑树就是二叉查找树的一个改进版本，可以使树高为O(logn)，当然，二叉查找树还有其他很多改进版本，如AVL树，Treap，加权平衡树（WBT）等。</p>
<p>红黑树是满足如下条件的二叉查找树：</p>
<ol>
<li>每个节点要么是红的，要么是黑的；</li>
<li>根节点是黑的；</li>
<li>如果一个节点是红色的，则它的子节点必须是黑色的（即没有连续两个红色节点）；</li>
<li>对于任一节点而言，其到叶节点的每一条路径都包含相同数目的黑节点。</li>
</ol>
<p>有一些定义中还会增加一条性质，即每个叶节点都是黑的，这条性质与上面4条性质并不冲突，在Java中，通常用null节点来实现，也就是说，在Java中我们说的叶节点都不是null节点，如果把null节点认为是叶节点，并且认为其是黑色的，那么它们两者是等价的。</p>
<p>由上面的性质3和性质4可以确保没有一条路径会比其他路径长出两倍。因为每条路径黑色节点数相同，而红色节点又不能相邻，所以在一条路径上红色节点数一定小于等于黑色节点数。因此，红黑树是相对接近平衡的二叉树。</p>
<p>红黑树的节点至少需要5个域，即节点的值，指向左孩子，右孩子以及父节点的指针，以及其颜色值。</p>
<h2 id="左旋与右旋"><a href="#左旋与右旋" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h2><p>当我们对红黑树进行插入，删除等操作时，通常会违背红黑树的性质，我们需要通过对树进行旋转，即修改树中某些节点的颜色和指正结构，来使红黑树依然满足其上述的性质。树的旋转其实并不是只针对红黑树的，其对于二叉搜索树都适用。树的左旋和右旋不会改变二叉搜索树的性质，即旋转后依然是一棵二叉搜索树。但是树的旋转可能会破坏红黑树的性质，通常是红黑树的第3条或第4条性质，所以通常红黑树的调整通常需要结合树的旋转和节点的颜色改变，来满足红黑树的性质。</p>
<h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>左旋的过程是将下图中x的右子树绕x逆时针旋转，使得x的右子树成为x的父亲，同时修改相关节点的引用。如下图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap_rotateLeft.png" alt="左旋"></p>
<p>TreeMap中左旋的代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; r = p.right;</div><div class="line">        p.right = r.left;</div><div class="line">        <span class="keyword">if</span> (r.left != <span class="keyword">null</span>)</div><div class="line">            r.left.parent = p;</div><div class="line">        r.parent = p.parent;</div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</div><div class="line">            root = r;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.left == p)</div><div class="line">            p.parent.left = r;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            p.parent.right = r;</div><div class="line">        r.left = p;</div><div class="line">        p.parent = r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p>右旋的过程是将下图中的x的左子树绕x顺时针旋转，使得x的左子树成为x的父亲，同时修改相关节点的引用。如下图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap_rotateRight.png" alt="右旋"></p>
<p>TreeMap中右旋的代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; l = p.left;</div><div class="line">        p.left = l.right;</div><div class="line">        <span class="keyword">if</span> (l.right != <span class="keyword">null</span>) l.right.parent = p;</div><div class="line">        l.parent = p.parent;</div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</div><div class="line">            root = l;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.right == p)</div><div class="line">            p.parent.right = l;</div><div class="line">        <span class="keyword">else</span> p.parent.left = l;</div><div class="line">        l.right = p;</div><div class="line">        p.parent = l;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="寻找后继节点"><a href="#寻找后继节点" class="headerlink" title="寻找后继节点"></a>寻找后继节点</h2><p>对于一棵二叉查找树，给定节点t，其后继节点（树中value值大于t的value值的最小的那个节点）可以通过如下方式找到：</p>
<ol>
<li>t的右孩子不空，则t的后继是其右子树中最小的那个元素；</li>
<li>t的右孩子为空，则t的后继是其第一个向左走的祖先。</li>
</ol>
<p>后继节点在红黑树删除操作中将会用到，寻找后继如下图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap_successor.png" alt="后继节点"></p>
<p>TreeMap中寻找节点后继的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns the successor of the specified Entry, or null if no such.</div><div class="line">    */</div><div class="line">   <span class="keyword">static</span> &lt;K,V&gt; TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">successor</span><span class="params">(Entry&lt;K,V&gt; t)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (t == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="keyword">null</span>) &#123;</div><div class="line">           Entry&lt;K,V&gt; p = t.right;</div><div class="line">           <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</div><div class="line">               p = p.left;</div><div class="line">           <span class="keyword">return</span> p;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           Entry&lt;K,V&gt; p = t.parent;</div><div class="line">           Entry&lt;K,V&gt; ch = t;</div><div class="line">           <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; ch == p.right) &#123;</div><div class="line">               ch = p;</div><div class="line">               p = p.parent;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> p;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h1 id="TreeMap源码实现"><a href="#TreeMap源码实现" class="headerlink" title="TreeMap源码实现"></a>TreeMap源码实现</h1><p>TreeMap实现了SortedMap接口，可以按照key的大小顺序对Map中的元素进行排序，key的大小比较可以通过其本身的自然顺序，也可以通过构造器插入比较器（Comparator）来实现。Java中的TreeSet只是对TreeMap做了一层包装（适配器模式），也就是TreeSet中有一个TreeMap。</p>
<p>Java中的TreeMap是用红黑树实现的。<br><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap.png" alt="TreeMap是用红黑树实现的"></p>
<p>下面主要介绍TreeMap中的几个常用方法。</p>
<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>TreeMap中的get方法实现如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">       Entry&lt;K,V&gt; p = getEntry(key);</div><div class="line">       <span class="keyword">return</span> (p==<span class="keyword">null</span> ? <span class="keyword">null</span> : p.value);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p><code>get(Object key)</code>方法感觉指定的key值返回对应的value，通过调用<code>getEntry(key)</code>得到相应的<code>entry</code>，然后返回<code>entry.value</code>。因此<code>getEntry()</code>方法是算法的核心。其算法思想是根据<code>key</code>的自然顺序（或者是比较器的顺序）对二叉树进行查找，知道满足<code>k.compareTo(p.key) == 0</code>的<code>entry</code>。</p>
<p><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap_getEntry.png" alt="getEntry"></p>
<p>TreeMap中getEntry的实现如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">       <span class="comment">// Offload comparator-based version for sake of performance</span></div><div class="line">       <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">return</span> getEntryUsingComparator(key);</div><div class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">           Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</div><div class="line">       Entry&lt;K,V&gt; p = root;</div><div class="line">       <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">int</span> cmp = k.compareTo(p.key);</div><div class="line">           <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">               p = p.left;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">               p = p.right;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               <span class="keyword">return</span> p;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h2><p><code>put(K key, V value)</code>方法是将指定的key, value对添加到map中，该方法首先会对map做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程与<code>getEntry()</code>方法类似。如果没有找到则会在红黑树中传入新的<code>entry</code>，如果插入之后破坏了红黑树的约束条件，还需要进行调整（左旋右旋以及改变某些节点的颜色）。</p>
<p>TreeMap中put()方法实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">       Entry&lt;K,V&gt; t = root;</div><div class="line">       <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</div><div class="line">           compare(key, key); <span class="comment">// type (and possibly null) check</span></div><div class="line">           root = <span class="keyword">new</span> Entry&lt;&gt;(key, value, <span class="keyword">null</span>);</div><div class="line">           size = <span class="number">1</span>;</div><div class="line">           modCount++;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">int</span> cmp;</div><div class="line">       Entry&lt;K,V&gt; parent;</div><div class="line">       <span class="comment">// split comparator and comparable paths</span></div><div class="line">       Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</div><div class="line">       <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               parent = t;</div><div class="line">               cmp = cpr.compare(key, t.key);</div><div class="line">               <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">                   t = t.left;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">                   t = t.right;</div><div class="line">               <span class="keyword">else</span></div><div class="line">                   <span class="keyword">return</span> t.setValue(value);</div><div class="line">           &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">           <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">               Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               parent = t;</div><div class="line">               cmp = k.compareTo(t.key);</div><div class="line">               <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">                   t = t.left;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">                   t = t.right;</div><div class="line">               <span class="keyword">else</span></div><div class="line">                   <span class="keyword">return</span> t.setValue(value);</div><div class="line">           &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</div><div class="line">       &#125;</div><div class="line">       Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(key, value, parent);</div><div class="line">       <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">           parent.left = e;</div><div class="line">       <span class="keyword">else</span></div><div class="line">           parent.right = e;</div><div class="line">       fixAfterInsertion(e);</div><div class="line">       size++;</div><div class="line">       modCount++;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>上述代码插入部分不难理解，首先是在红黑树中找到合适的位置，然后创建新的entry并插入，由搜索二叉树的插入性质可知，其新插入的节点一定是树的叶子。而难点则在于调整函数<code>fixAfterInsertion()</code>。调整一般要结合两种方式协作完成，一是改变某些节点的颜色，二是对某些节点进行旋转。<br><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap_put.png" alt="put"></p>
<p>调整函数<code>fixAfterInsertion()</code>的代码具体如下所示，其用到了左旋和右旋函数,即<code>rotateLeft()</code>和<code>rotateRight()</code>。通过代码可知，上图中情况2其实是落在情况3中的，情况4~6跟情况1~3是对称的，上图中并没有画出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</div><div class="line">       x.color = RED;</div><div class="line">       <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</div><div class="line">           <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</div><div class="line">               Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</div><div class="line">               <span class="keyword">if</span> (colorOf(y) == RED) &#123;</div><div class="line">                   setColor(parentOf(x), BLACK);         <span class="comment">// 情况1</span></div><div class="line">                   setColor(y, BLACK);                   <span class="comment">// 情况1</span></div><div class="line">                   setColor(parentOf(parentOf(x)), RED); <span class="comment">// 情况1</span></div><div class="line">                   x = parentOf(parentOf(x));            <span class="comment">// 情况1，其祖父节点不一定满足性质 </span></div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</div><div class="line">                       x = parentOf(x);                  <span class="comment">// 情况2</span></div><div class="line">                       rotateLeft(x);                    <span class="comment">// 情况2</span></div><div class="line">                   &#125;</div><div class="line">                   setColor(parentOf(x), BLACK);         <span class="comment">// 情况3</span></div><div class="line">                   setColor(parentOf(parentOf(x)), RED); <span class="comment">// 情况3</span></div><div class="line">                   rotateRight(parentOf(parentOf(x)));   <span class="comment">// 情况3</span></div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</div><div class="line">               <span class="keyword">if</span> (colorOf(y) == RED) &#123;</div><div class="line">                   setColor(parentOf(x), BLACK);         <span class="comment">// 情况4</span></div><div class="line">                   setColor(y, BLACK);                   <span class="comment">// 情况4</span></div><div class="line">                   setColor(parentOf(parentOf(x)), RED); <span class="comment">// 情况4</span></div><div class="line">                   x = parentOf(parentOf(x));</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</div><div class="line">                       x = parentOf(x);                  <span class="comment">// 情况5</span></div><div class="line">                       rotateRight(x);                   <span class="comment">// 情况5</span></div><div class="line">                   &#125;</div><div class="line">                   setColor(parentOf(x), BLACK);         <span class="comment">// 情况6</span></div><div class="line">                   setColor(parentOf(parentOf(x)), RED); <span class="comment">// 情况6</span></div><div class="line">                   rotateLeft(parentOf(parentOf(x)));    <span class="comment">// 情况6</span></div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       root.color = BLACK;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>TreeMap中<code>remove(Object key)</code>方法实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">       Entry&lt;K,V&gt; p = getEntry(key);</div><div class="line">       <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       V oldValue = p.value;</div><div class="line">       deleteEntry(p);</div><div class="line">       <span class="keyword">return</span> oldValue;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p><code>remove(Object key)</code>的作用是删除key值对应的<code>entry</code>，该方法首先通过之前提过的<code>getEntry(key)</code>方法找到key值对应的entry，然后调用<code>deleteEntry(p)</code>来删除对应的entry。删除操作可能会改变红黑树的结构，因此需要调整。</p>
<p>由于红黑树是改进版的搜索二叉树，其删除操作跟普通二叉查找树的删除操作非常相似，其唯一的区别在于删除之后可能会破坏红黑树的性质，需要对树进行调整。</p>
<p>对于一棵普通二叉查找树来说，其删除过程可以简单分为两种情况：</p>
<ol>
<li>删除节点p的左右子树都为空，或者只有一棵子树非空；</li>
<li>删除节点p的左右子树都非空。</li>
</ol>
<p>对于情况1，处理很简单，只需要直接将节点p删除（左右子树都为空），或者用非空子树替代p（只有一棵子树非空时）。而对于情况2，可以用节点p的后继节点s（树中value值大于t的value值的最小的那个节点）代替p，然后使用情况1删除s（此时s一定满足情况1，因为节点p满足情况2，所以其后继节点一定是p的右子树的最左节点，说明其后继节点没有左子树）。</p>
<p>红黑树的删除函数<code>deleteEntry()</code>代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Delete node p, and then rebalance the tree.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">       modCount++;</div><div class="line">       size--;</div><div class="line">           </div><div class="line">       <span class="comment">// If strictly internal, copy successor's element to p and then make p</span></div><div class="line">       <span class="comment">// point to successor.</span></div><div class="line">       <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123; <span class="comment">//2.左右子树都非空</span></div><div class="line">           Entry&lt;K,V&gt; s = successor(p);</div><div class="line">           p.key = s.key;</div><div class="line">           p.value = s.value;</div><div class="line">           p = s;</div><div class="line">       &#125; <span class="comment">// p has 2 children</span></div><div class="line">       </div><div class="line">       <span class="comment">// Start fixup at replacement node, if it exists.</span></div><div class="line">       Entry&lt;K,V&gt; replacement = (p.left != <span class="keyword">null</span> ? p.left : p.right);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) &#123; <span class="comment">// 1. 只有一棵子树非空</span></div><div class="line">           <span class="comment">// Link replacement to parent</span></div><div class="line">           replacement.parent = p.parent;</div><div class="line">           <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</div><div class="line">               root = replacement;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left)</div><div class="line">               p.parent.left  = replacement;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               p.parent.right = replacement;</div><div class="line"></div><div class="line">           <span class="comment">// Null out links so they are OK to use by fixAfterDeletion.</span></div><div class="line">           p.left = p.right = p.parent = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">           <span class="comment">// Fix replacement</span></div><div class="line">           <span class="keyword">if</span> (p.color == BLACK)</div><div class="line">               fixAfterDeletion(replacement); <span class="comment">// 调整</span></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) &#123; <span class="comment">// return if we are the only node.</span></div><div class="line">           root = <span class="keyword">null</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">//  No children. Use self as phantom replacement and unlink. 1. 左右子树都为空</span></div><div class="line">           <span class="keyword">if</span> (p.color == BLACK)</div><div class="line">               fixAfterDeletion(p); <span class="comment">// 调整</span></div><div class="line"></div><div class="line">           <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (p == p.parent.left)</div><div class="line">                   p.parent.left = <span class="keyword">null</span>;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right)</div><div class="line">                   p.parent.right = <span class="keyword">null</span>;</div><div class="line">               p.parent = <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>上述代码中绝大多数代码是修改父子间引用关系的代码。这里的难点是<code>fixAfterDeletion()</code>函数。那么删除哪些节点时才需要调整树呢？答案是只有删除BLACK节点时，才需要调整，因为删除RED节点不会破坏红黑树的任何约束。</p>
<p><code>fixAfterDeletion()</code>与<code>fixAfterInsertion()</code>类似，需要分为若干种情况进行讨论，但是无论怎样，具体的调整操作要么是改变某些节点的颜色，要么是对某些节点进行旋转。<br><img src="http://oe0nilvpj.bkt.clouddn.com/TreeMap_fixAfterDeletion.png" alt="fixAfterDeletion"></p>
<p>上述图解中中的总体思想是：将情况1首先转换成情况2，或者转换成情况3和情况4。但是这并不意味着所有的调整过程一定是从情况1开始的。同时我们还能发现几个规则：</p>
<ol>
<li>如果情况1之后紧接着加入情况2，那么情况2之后一定会退出循环（因为x为红色）</li>
<li>一旦进入情况3和情况4，一定会退出循环，因为x为root</li>
</ol>
<p><code>fixAfterDeletion()</code>函数的具体代码如下所示，由代码可知，情况3其实是落在情况4中的。情况5~情况8和情况1~情况4是对称的，图中并没有画出后4种情况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterDeletion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (x != root &amp;&amp; colorOf(x) == BLACK) &#123;</div><div class="line">        <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</div><div class="line">            Entry&lt;K,V&gt; sib = rightOf(parentOf(x));</div><div class="line">            <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</div><div class="line">                setColor(sib, BLACK);                   <span class="comment">// 情况1</span></div><div class="line">                setColor(parentOf(x), RED);             <span class="comment">// 情况1</span></div><div class="line">                rotateLeft(parentOf(x));                <span class="comment">// 情况1</span></div><div class="line">                sib = rightOf(parentOf(x));             <span class="comment">// 情况1</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (colorOf(leftOf(sib))  == BLACK &amp;&amp;</div><div class="line">                colorOf(rightOf(sib)) == BLACK) &#123;</div><div class="line">                setColor(sib, RED);                     <span class="comment">// 情况2</span></div><div class="line">                x = parentOf(x);                        <span class="comment">// 情况2</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK) &#123;</div><div class="line">                    setColor(leftOf(sib), BLACK);       <span class="comment">// 情况3</span></div><div class="line">                    setColor(sib, RED);                 <span class="comment">// 情况3</span></div><div class="line">                    rotateRight(sib);                   <span class="comment">// 情况3</span></div><div class="line">                    sib = rightOf(parentOf(x));         <span class="comment">// 情况3</span></div><div class="line">                &#125;</div><div class="line">                setColor(sib, colorOf(parentOf(x)));    <span class="comment">// 情况4</span></div><div class="line">                setColor(parentOf(x), BLACK);           <span class="comment">// 情况4</span></div><div class="line">                setColor(rightOf(sib), BLACK);          <span class="comment">// 情况4</span></div><div class="line">                rotateLeft(parentOf(x));                <span class="comment">// 情况4</span></div><div class="line">                x = root;                               <span class="comment">// 情况4</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 跟前四种情况对称</span></div><div class="line">            Entry&lt;K,V&gt; sib = leftOf(parentOf(x));</div><div class="line">            <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</div><div class="line">                setColor(sib, BLACK);                   <span class="comment">// 情况5</span></div><div class="line">                setColor(parentOf(x), RED);             <span class="comment">// 情况5</span></div><div class="line">                rotateRight(parentOf(x));               <span class="comment">// 情况5</span></div><div class="line">                sib = leftOf(parentOf(x));              <span class="comment">// 情况5</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK &amp;&amp;</div><div class="line">                colorOf(leftOf(sib)) == BLACK) &#123;</div><div class="line">                setColor(sib, RED);                     <span class="comment">// 情况6</span></div><div class="line">                x = parentOf(x);                        <span class="comment">// 情况6</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (colorOf(leftOf(sib)) == BLACK) &#123;</div><div class="line">                    setColor(rightOf(sib), BLACK);      <span class="comment">// 情况7</span></div><div class="line">                    setColor(sib, RED);                 <span class="comment">// 情况7</span></div><div class="line">                    rotateLeft(sib);                    <span class="comment">// 情况7</span></div><div class="line">                    sib = leftOf(parentOf(x));          <span class="comment">// 情况7</span></div><div class="line">                &#125;</div><div class="line">                setColor(sib, colorOf(parentOf(x)));    <span class="comment">// 情况8</span></div><div class="line">                setColor(parentOf(x), BLACK);           <span class="comment">// 情况8</span></div><div class="line">                setColor(leftOf(sib), BLACK);           <span class="comment">// 情况8</span></div><div class="line">                rotateRight(parentOf(x));               <span class="comment">// 情况8</span></div><div class="line">                x = root;                               <span class="comment">// 情况8</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    setColor(x, BLACK);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《算法导论》<br><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9</a><br><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9</a><br><a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6124989" target="_blank" rel="external">http://blog.csdn.net/v_JULY_v/article/details/6124989</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6109153" target="_blank" rel="external">http://blog.csdn.net/v_JULY_v/article/details/6109153</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6284050" target="_blank" rel="external">http://blog.csdn.net/v_JULY_v/article/details/6284050</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6285620" target="_blank" rel="external">http://blog.csdn.net/v_JULY_v/article/details/6285620</a><br><a href="http://www.cs.princeton.edu/~rs/talks/LLRB/RedBlack.pdf" target="_blank" rel="external">http://www.cs.princeton.edu/~rs/talks/LLRB/RedBlack.pdf</a><br><a href="http://www.cnblogs.com/skywang12345/p/3245399.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3245399.html</a><br><a href="http://www.itwendao.com/article/detail/2018.html" target="_blank" rel="external">http://www.itwendao.com/article/detail/2018.html</a><br><a href="https://segmentfault.com/a/1190000002628610" target="_blank" rel="external">https://segmentfault.com/a/1190000002628610</a><br><a href="https://segmentfault.com/a/1190000000472153" target="_blank" rel="external">https://segmentfault.com/a/1190000000472153</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tree/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-tree/</a><br><a href="https://github.com/PeterRK/DSGO/blob/master/book/pages/05-B.md" target="_blank" rel="external">https://github.com/PeterRK/DSGO/blob/master/book/pages/05-B.md</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[十八般排序算法，样样精通]]></title>
      <url>http://bigmingtalk.github.io/2016/12/17/%E5%8D%81%E5%85%AB%E8%88%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%8C%E6%A0%B7%E6%A0%B7%E7%B2%BE%E9%80%9A/</url>
      <content type="html"><![CDATA[<p>本文总结了编程中常用的排序算法，分析了它们在一般情况，最好情况，最坏情况下的时间复杂度以及它们所需的额外空间复杂度，同时实现了它们的实现代码（所有代码的排序结果都是从大到小），并给出了自己对排序算法的一点思考，以供大家参考，也方便自己日后复习查看。本文中包含的排序算法有冒泡排序（普通实现和递归实现，冒泡改进版本），鸡尾酒排序（含改进版本），选择排序（普通实现和递归实现），插入排序（直接插入排序和二分查找插入排序），希尔排序，锦标赛排序，堆排序，快速排序，归并排序，基数排序，计数排序，桶排序。<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.png" alt="排序算法总结!"><br><a id="more"></a></p>
<h1 id="排序算法特征"><a href="#排序算法特征" class="headerlink" title="排序算法特征"></a>排序算法特征</h1><p>从不同的排序算法特征看各个排序算法，可以将它们进行不同的分类。排序算法的特征包括：</p>
<ol>
<li>是否是基于比较的排序</li>
<li>排序过程能否全部记录放在内存中完成</li>
<li>排序算法的稳定性</li>
<li>排序算法的时间复杂度</li>
<li>排序算法的额外空间复杂度</li>
</ol>
<h2 id="是否是基于比较的排序算法"><a href="#是否是基于比较的排序算法" class="headerlink" title="是否是基于比较的排序算法"></a>是否是基于比较的排序算法</h2><p>简单而言，基于比较的排序算法就是通过对两个元素进行大小比较来决定两个元素在排序好序列中的相对位置（谁排在前面，谁排在后面）。基于比较的排序算法的平均时间复杂度的下限是O(nlogn)，其中n为序列长度。可以通过决策树模型或者信息熵来证明。基于决策树模型的证明的思路是因为将n个序列构成的决策树的叶子节点个数至少有n!，因此高度至少为nlogn。而非基于比较的排序算法的平均时间复杂度则可以做到更好，比如O(n)，即线性时间内完成排序。当然，这些线性时间排序往往需要对输入序列做一些假设，比如计数排序往往对于待排序列的数字范围有一个要求，不能过大，否则可能会造成排序失败。而从更本质上来看，这些线性时间排序往往是利用了空间换时间的思想，通过多出来的额外空间来减少排序时间。</p>
<h2 id="排序过程能否全部记录放在内存中完成"><a href="#排序过程能否全部记录放在内存中完成" class="headerlink" title="排序过程能否全部记录放在内存中完成"></a>排序过程能否全部记录放在内存中完成</h2><p>如果在排序过程中，全部记录都需要放在内存中完成，则称为内排序，否则称为外排序。常见的内排序算法有：冒泡排序，选择排序，插入排序，希尔排序，快速排序等。常见的外排序则有归并排序等。这里要注意的一点是这里区分内排序和外排序是能不能全部记录放在内存中完成，而不是是不是。所以当数据量小的时候，外部排序算法当然可以只利用内存完成排序过程。但是当数据量足够大而内存都不够存储时，则外部排序算法依然可以完成排序过程，而内部排序算法则无法完成排序工作。当然，现实中当数据量足够大时，往往会同时用内排序和外排序来完成排序，简单的思路就是讲数据划分为几块，每块都可以在内存中利用内排序算法完成排序，然后在用归并排序的思想完成所有数的排序。</p>
<h2 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h2><p>排序算法稳定性的简单形式化定义为：如果A<sub>i</sub> = A<sub>j</sub>，排序前A<sub>i</sub>在A<sub>j</sub>之前，排序后A<sub>i</sub>还在A<sub>j</sub>之前，则称这种排序算法是稳定的。通俗地讲就是保证排序前后两个相等的数的相对顺序不变。对于不稳定的排序算法，只要举出一个实例，就可以说明它是不稳定的；而对于稳定的排序算法，则必须对算法进行分析并证明其稳定性。</p>
<p>排序算法的稳定性也是由具体的算法来决定的，不稳定的排序算法某种条件下可以变为稳定的排序算法，稳定的排序算法也可以在某种条件下变为不稳定的排序算法。最简单的例子就是冒泡排序，冒泡排序原本是稳定的算法，但是若将两两比较的条件换为arr[j] &lt;= arr[j + 1]，而不是arr[j] &lt; arr[j + 1]，也就是在两个元素相等时交换位置，那么这个改版的冒泡排序就变成了不稳定的。</p>
<p>为什么排序的稳定性很重要？在初学时会觉得两个相等的元素在排序后调换了一下位置会有什么问题吗?其实有时候真的很重要。如果排序算法是稳定的，那么从一件键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键所用。后面会讲的基数排序就是这样的，先按低位排序，逐次按高位排序，低位排序后的相对顺序在高位相同时不会改变。</p>
<h2 id="排序算法的时间复杂度"><a href="#排序算法的时间复杂度" class="headerlink" title="排序算法的时间复杂度"></a>排序算法的时间复杂度</h2><p>排序算法的时间复杂度可以简单地分为平均时间复杂度，最好情况时间复杂度和最坏情况时间复杂度。之所以这么分是因为对于不同特征的待排序列，哪怕两个排序算法的平均时间复杂度是一样的，它们的排序时间可能也会有很大的不同。所以了解每个算法的思想，并知道其在什么特征的待排序列上能有更好的时间复杂度，在什么特征的序列上会出现很差的时间复杂度是很重要的。因为现实生活中往往很多待排序序列会有其特征，而不是随机排列的。所以针对这种特征的待排序序列，我们可以选择相应的排序算法予以解决。</p>
<h2 id="排序算法的额外空间复杂度"><a href="#排序算法的额外空间复杂度" class="headerlink" title="排序算法的额外空间复杂度"></a>排序算法的额外空间复杂度</h2><p>若排序算法的额外空间复杂度为O(1)，我们称之为In-palce排序算法，否则称之为Out-place排序算法。常见的In-place排序算法有：冒泡排序，选择排序，插入排序，堆排序，快速排序等。而常见的Out-place排序算法有：归并排序，计数排序，基数排序，桶排序等。当需要对大量数据进行排序时，In-place排序算法的优势就很明显了，因为其不占用或占用常数内存的空间，而Out-place则需要很大的额外内存空间。</p>
<p>总而言之，言而总之，对于任意一个排序算法，我们所需要思考的几个主要问题有：</p>
<ol>
<li>每个排序算法的思想是什么？</li>
<li>算法的稳定性如何？如果是不稳定的话为什么不稳定？能否改进使其稳定？</li>
<li>算法的平均时间复杂度如何？最好和最坏情况下时间复杂度分别是什么？</li>
<li>算法的额外空间复杂度是多少？ </li>
<li>对于不同数据规模的数据应该如何选择排序算法？</li>
<li>算法在具体代码实现上有什么需要注意的地方？</li>
</ol>
<h1 id="具体排序算法分析及其实现代码"><a href="#具体排序算法分析及其实现代码" class="headerlink" title="具体排序算法分析及其实现代码"></a>具体排序算法分析及其实现代码</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul>
<li>基本思想：<br>通过无序区中相邻记录关键字间的比较和位置的交换，使关键字最小的记录如气泡一般逐渐往上“漂浮”直至“水面”。</li>
<li>稳定性：稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(n^2)</li>
<li>最好情况时间复杂度：O(n)，已经按要求排好序，即正序有序，只需要比较n-1次即可（对于下面的改进版本来说），并且无需交换</li>
<li>最坏情况时间复杂度：O(n^2)，逆序有序，需要比较(n-1)+(n-2)+…+1，即nx(n-1)/2次，同时交换nx(n-1)/2次，故时间复杂度为O(n^2)。（注：在实际运行中，比较和交换所需要的时间是不同的，同样的比较n次，但是有的序列可能不需要交换，有的则需要交换n次，虽然算法上时间复杂度的计算相同，但在实际运行中所需时间还是会有差异）</li>
</ul>
</li>
<li>额外空间复杂度：O(1)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/Bubble_sort_animation.gif" alt="冒泡排序!"></li>
<li>代码(含递归版本)实现如下所示<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = arr[i];</div><div class="line">    arr[i] = arr[j];</div><div class="line">    arr[j] = tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                swap(arr, j, j + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveBubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    recursiveBubbleSortWithRange(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveBubbleSortWithRange</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        findMinOfBubbleSort(arr, left, right);</div><div class="line">        recursiveBubbleSortWithRange(arr, left, --right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findMinOfBubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</div><div class="line">            swap(arr, i, i + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>冒泡排序有一个很简单的改进措施，就是当一次冒泡过程中，若没有发生交换两个数的情况，则说明序列已经有序，可以直接break，无需进行接下来的比较了。代码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">improvedBubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">if</span> (!flag)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                swap(arr, j, j + <span class="number">1</span>);</div><div class="line">                flag = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="鸡尾酒排序"><a href="#鸡尾酒排序" class="headerlink" title="鸡尾酒排序"></a>鸡尾酒排序</h2><ul>
<li>基本思想：<br>鸡尾酒🍸排序也叫定向冒泡排序，是冒泡排序的一种改进。其余冒泡排序的不同点在于冒泡排序是不断的冒泡过程，而鸡尾酒排序除了冒泡外，还沉底，也就是是冒一个泡，就沉一个底，直到相交为止。鸡尾酒排序可以得到比冒泡排序稍微好一点的性能，因为冒泡排序只从一个方向进行进行比对，每次循环只移动一个项目。</li>
<li>稳定性： 稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(n^2)</li>
<li>最好情况时间复杂度：O(n)，正序有序即可，可以有与冒泡排序采样同样的改进版，只需要比较n-1次</li>
<li>最坏情况时间复杂度：O(n^2)，逆序有序，需要比较nx(n-1)/2次，且同样共需要nx(n-1)/2次交换。</li>
</ul>
</li>
<li>额外空间复杂度：O(1)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/ShakeSort.gif" alt="鸡尾酒排序!"></li>
<li>代码实现（含改进版本）：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShakeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</div><div class="line">                swap(arr, i, i + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        right--;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = right; j &gt; left; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j - <span class="number">1</span>]) &#123;</div><div class="line">                swap(arr, j, j - <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        left++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">improvedShakeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</div><div class="line">                swap(arr, i, i + <span class="number">1</span>);</div><div class="line">                flag = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        right--;</div><div class="line">        flag = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = right; j &gt; left; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j - <span class="number">1</span>]) &#123;</div><div class="line">                swap(arr, j, j - <span class="number">1</span>);</div><div class="line">                flag = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        left++;</div><div class="line">        flag = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ul>
<li>基本思想：<br>选择排序（直接选择排序或简单选择排序）也是很简单直观的，我觉得比冒泡排序还有更好理解，其基本思想就是在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素排序完毕。</li>
</ul>
<p>选择排序需要花费(n-1)+(n-2)+…+1=nx(n-1)/2次比较和n-1次交换操作（当该元素排序前所在的位置恰好是其排序后的位置时，可以理解为自己与自己交换，当然也可以理解为0次交换）。其对初始数据不敏感，无论初始的序列有没有排好序，都需要经历n*(n-1)/2次比较和n-1次交换操作。这对于一些原本排好序，或者近似排好序的序列来说并不具有优势，在最好的情况下，所有都排好序，则需要0次交换，最差则需要n-1次交换。在所有的完全依靠交换去移动元素的排序算法中，选择排序属于比较好的一种。</p>
<p>简单选择排序是不稳定的，举个例子，序列arr={5,8,5,2,9},我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p>
<ul>
<li>稳定性：不稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(n^2)</li>
<li>最好情况时间复杂度：O(n^2)</li>
<li>最坏情况时间复杂度：O(n^2)</li>
</ul>
</li>
<li>额外空间复杂度：O(1)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/Selection_sort_animation.gif" alt="选择排序!"><br><img src="http://oe0nilvpj.bkt.clouddn.com/Selection_sort_animation2.gif" alt="选择排序!"></li>
<li>代码实现（含递归版本）如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minIndex;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        minIndex = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</div><div class="line">                minIndex = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        swap(arr, minIndex, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveSelectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    recursiveSelectionSortWithRange(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveSelectionSortWithRange</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> minIndex = findMinIndexOfSelectionSort(arr, left, right);</div><div class="line">        swap(arr, minIndex, right);</div><div class="line">        recursiveSelectionSortWithRange(arr, left, --right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMinIndexOfSelectionSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minIndex = left;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">1</span>; i &lt;= right; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</div><div class="line">            minIndex = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> minIndex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ul>
<li>基本思想：<br>插入排序（直接插入排序）的工作原理非常类似于我们抓扑克牌。对于未排序数据，在已排序序列中从后往前扫描，找到合适的位置并插入。在实现中，通常采用in-place排序，因而在从后向前扫描过程中，需要反复把已排序好的元素逐个向后挪位，为最新元素提供插入空间。</li>
</ul>
<p>插入排序平均需要(n^2)/4次比较和(n^2)/4次交换，在最坏的情况下即所有元素都逆序排列时需要(n^2)/2次比较和交换，在最好情况下即所有元素都排好序时需要n-1次比较和交换。在插入排序中，元素交换的次数等于序列中逆序元素的对数。而元素比较的次数最少为逆序元素的对数。</p>
<p>总体而言，插入排序对于部分有序序列以及元素个数比较小的序列是一种比较有效的方式。插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）。插入排序和冒泡排序相比，虽然时间复杂度都为O(n^2)，但是插入排序的速度直接是逆序对的个数，而冒泡排序中“交换”的次数是逆序对的个数，因此冒泡排序执行的时间至少是逆序对的个数，因此插入排序的执行时间至少比冒泡排序快，所以在元素个数较小时一般选择插入排序而不是冒泡排序。</p>
<p>插入排序的一个简单改进版本是二分查找插入排序，其与前面说的直接插入排序的区别是在查找插入位置时不再是线性地向前扫描查找，而是二分查找插入位置，从而减少查找位置所需要的时间。但是当找到位置后，与直接插入排序一样，需要反复把已排序好的元素逐个向后挪位，所以并不能减少交换位置的次数。当n较大时，总的排序比较次数比直接插入排序的最差情况好得多，但比最差情况要差，所以当元素初始序列已经接近正序有序时，直接插入排序比二分插入排序比较次数少。</p>
<ul>
<li>稳定性：稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(n^2)</li>
<li>最好情况时间复杂度：直接插入排序为O(n)，二分查找插入排序为O(nlogn)</li>
<li>最坏情况时间复杂度：O(n^2)</li>
</ul>
</li>
<li>额外空间复杂度：O(1)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/InsertSort.gif" alt="插入排序!"><br><img src="http://oe0nilvpj.bkt.clouddn.com/InsertSort2.gif" alt="插入排序!"><br><img src="http://oe0nilvpj.bkt.clouddn.com/InsertSort3.gif" alt="插入排序!"></li>
<li>代码实现（含二分查找插入排序）如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = arr[i];</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; tmp) &#123;</div><div class="line">                <span class="comment">//swap(arr, j - 1, j); 这里swap的作用可以等价于下面的 arr[j - 1] = arr[j];</span></div><div class="line">                arr[j - <span class="number">1</span>] = arr[j];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        arr[j - <span class="number">1</span>] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BinaryInsertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left, right, middle, tmp;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        tmp = arr[i];</div><div class="line">        left = i + <span class="number">1</span>;</div><div class="line">        right = arr.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            middle = (left + right) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (tmp &lt; arr[middle]) &#123;</div><div class="line">                left = middle + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                right = middle - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; right; j++) &#123;</div><div class="line">            arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        arr[right] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul>
<li>基本思想：<br>希尔排序也叫递减增量排序或壳排序，是插入排序的一种更高效的改进版本，因DL. Shell于1959年提出而得名。希尔排序是基于插入排序的两点性质进行改进的。<ul>
<li>一是插入排序在对几乎已经排好序的数据操作时，效率高，可以达到线性排序的效率。</li>
<li>二是插入排序一般是低效的，因为插入排序每次只能讲数据移动一位。</li>
</ul>
</li>
</ul>
<p>基于这两点，希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步时，需排序的数据几乎是已排序好了的，可以很快完成。</p>
<p>比如有一个很小的数据在一个已按升序排好序的序列的末端。如果用复杂度为O(N^2)的排序（比如冒泡排序或者直接插入排序），可能会进行n次的比较和交换才能将数据移动到正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。</p>
<p>希尔排序的步长可以随意指定，只要保证最后的步长为1即可。一个比较通用步长选择较多的是Knuth提出的，为h=h*3+1，初始h取1，对应的递减为h=(h-1)/3，直到h=1为止。希尔排序的时间复杂度与增量序列的选取有关，例如希尔增量平均时间复杂度为O(n^2)，而Hibbard增量的希尔排序平均时间复杂度为O(n^(5/4))，但是现今仍然没有人能找出希尔排序的精确下界。</p>
<p>希尔排序是不稳定的，原因是虽然在同一个分组内元素之间的相对顺序能够保证，但是不同分组内的元素相对顺序不能保证，比如在arr={5,1,4,6,9,5,3,7}中，按从大到小排序，当步长为4时，第一个5与9是同一组，所以第一个5与9交换位置，第2个5则是与前面的1一组，也需要交换位置，所以一次排序后变为{9,5,4,7,5,1,3,6}，第一个5与第二个5的相对位置发生了改变。</p>
<ul>
<li>稳定性：不稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(nlogn)~O(n^2)</li>
<li>最好情况时间复杂度：O(n^1.3)</li>
<li>最坏情况时间复杂度：O(n^2)</li>
</ul>
</li>
<li>额外空间复杂度：O(1)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/Sorting_shellsort_anim.gif" alt="希尔排序!"><br><img src="http://oe0nilvpj.bkt.clouddn.com/Sorting_shellsort_anim2.gif" alt="希尔排序!"></li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (h &lt;= arr.length) &#123;</div><div class="line">        h = h * <span class="number">3</span> + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (h &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; arr.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = i - h;</div><div class="line">            <span class="keyword">int</span> tmp = arr[i];</div><div class="line">            <span class="keyword">while</span> (j &gt;=<span class="number">0</span> &amp;&amp; arr[j] &lt; tmp) &#123;</div><div class="line">                arr[j + h] = arr[j];</div><div class="line">                j = j - h;</div><div class="line">            &#125;</div><div class="line">            arr[j + h] = tmp;</div><div class="line">        &#125;</div><div class="line">        h = (h - <span class="number">1</span>) / <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="锦标赛排序"><a href="#锦标赛排序" class="headerlink" title="锦标赛排序"></a>锦标赛排序</h2><ul>
<li>基本思想：<br>竞标赛排序也叫树型排序，也叫胜者树。直接选择排序之所以不够高效是因为没有把前一趟比较的结果保存下来，每一趟都有太多重复的比较。锦标赛排序则克服了这一缺点，它的基本思想与体育淘汰赛类似，首先进行两两比较，得到n/2个比较的胜者，然后作为第一次比较的结果保存下来，然后对这些元素再进行两两比较，如此重复，直到找到最大的对象为止。</li>
</ul>
<p>竞标赛排序首先需要建立一棵满二叉树，如果不够2的幂次方，则需要补一些元素。假设arr为待排序列，则arr的元素都分布在叶子节点上，而两个节点的父节点则存储着比赛的胜者。同时我们需要一个变量来存储胜者的索引。在每次得到最终胜者时，我们可以得到胜者的索引号。然后将该胜者替换为最小值，当我们需要在剩下的找到最大时，只需要沿着之前胜者所在的父节点不断向上比较，更新其父节点的胜者索引号即可。只需要O(logn)次比较即可。所以，除了第一次需要比较n-1次之外，其余每次都只需要logn次比较，所以时间复杂度为O(nlogn)。但是对于n各待排元素，锦标赛排序算法需要至少2n-1个节点来存放胜者树，所以这是典型的空间换时间的算法。</p>
<p>竞标赛排序非常适合一个在很大的序列中查找前k个（k较小）元素，只需要n-1 + klogn次比较即可。</p>
<ul>
<li>稳定性：稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(nlogn)</li>
<li>最好情况时间复杂度：O(nlogn)</li>
<li>最坏情况时间复杂度：O(nlogn)</li>
</ul>
</li>
<li>额外空间复杂度：O(n)</li>
<li>示意图如下（前3步）所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E9%94%A6%E6%A0%87%E8%B5%9B1.png" alt="锦标赛排序!"><br><img src="http://oe0nilvpj.bkt.clouddn.com/%E9%94%A6%E6%A0%87%E8%B5%9B2.png" alt="锦标赛排序!"><br><img src="http://oe0nilvpj.bkt.clouddn.com/%E9%94%A6%E6%A0%87%E8%B5%9B3.png" alt="锦标赛排序!"></li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用Node存储竞赛排序过程中的节点，包括数据和数据在数组中的索引</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当去除最大元素以后，需要调整数组</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Adjust</span><span class="params">(Node[] data, <span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(idx != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 当前id是奇数，说明并列的是idx + 1， 父节点是 (idx-1)/2</span></div><div class="line">        <span class="keyword">if</span>(idx % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">            data[(idx - <span class="number">1</span>) / <span class="number">2</span>] = data[idx].data &gt; data[idx + <span class="number">1</span>].data ? data[idx] : data[idx + <span class="number">1</span>];</div><div class="line">            idx = (idx - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前id是偶数，说明并列的是idx - 1， 父节点是 idx / 2 - 1</span></div><div class="line">            data[idx / <span class="number">2</span> - <span class="number">1</span>] = data[idx-<span class="number">1</span>].data &gt; data[idx].data ? data[idx-<span class="number">1</span>] : data[idx];</div><div class="line">            idx = (idx / <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TournamentSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> nNodes = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> nTreeSize;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(nNodes &lt; arr.length) &#123;</div><div class="line">        nNodes *= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 竞赛树节点的个数, 是满二叉树</span></div><div class="line">    nTreeSize = <span class="number">2</span> * nNodes - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 竞赛树用数组存储</span></div><div class="line">    Node[] nodes = <span class="keyword">new</span> Node[nTreeSize];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> idx;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化竞赛树数据, 一共是 nNodes个叶节点</span></div><div class="line">    <span class="keyword">for</span>(i = nNodes - <span class="number">1</span>; i &lt; nTreeSize; i++) &#123;</div><div class="line">        idx = i - (nNodes - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(idx &lt; arr.length) &#123;</div><div class="line">            nodes[i] = <span class="keyword">new</span> Node(arr[idx], i);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 对于补充的数据，我们初始化成最小。</span></div><div class="line">            nodes[i] = <span class="keyword">new</span> Node(Integer.MIN_VALUE, -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 共有nNodes -1个非叶节点</span></div><div class="line">    <span class="keyword">for</span>(i = nNodes - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        nodes[i] = <span class="keyword">new</span> Node();</div><div class="line">        <span class="keyword">if</span>(nodes[i * <span class="number">2</span> + <span class="number">1</span>].data &gt; nodes[i * <span class="number">2</span> + <span class="number">2</span>].data) &#123;</div><div class="line">            nodes[i] = nodes[i*<span class="number">2</span> + <span class="number">1</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            nodes[i] = nodes[i*<span class="number">2</span> + <span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 实际排序的过程</span></div><div class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; arr.length; i++)</div><div class="line">    &#123;</div><div class="line">        arr[i] = nodes[<span class="number">0</span>].data;</div><div class="line">        nodes[nodes[<span class="number">0</span>].id].data = Integer.MIN_VALUE;</div><div class="line">        Adjust(nodes, nodes[<span class="number">0</span>].id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul>
<li>基本思想：<br>堆排序的定义如下：n个元素的序列，当且经当满足“任何一个非终端节点的值都大于等于（或小于等于）其左右孩子的值”时，才能称之为堆。因此，堆顶必为期最大值（或最小值）。若在输出堆顶的最小值之后，使得剩余n-1个元素重建一个堆，则得到n个元素中的次小值。如此反复执行，便能得到一个有序序列，这个过程称之为堆排序。</li>
</ul>
<p>于是，堆排序有2个问题需要解决：</p>
<ol>
<li>如何由一个无需序列建成一个堆？</li>
<li>如何在输出堆顶元素之后，调整剩余元素成为一个新的堆？</li>
</ol>
<p>问题1的解决方法是：从一个无序序列建堆的过程就是一个反复“筛选”的过程。若将此序列看成是一个完全二叉树，则最后一个非终端节点是第n/2向下取整个元素，由此筛选的位置只要从第n/2向下取整个元素开始。</p>
<p>堆排序在对海量数据的Top K问题中有广泛应用，其与锦标赛排序的有点在于额外空间复杂度为O(1)。比如从10亿个浮点数中，选出其中最大的10000个。则可以用建立一个10000个数的最小堆，然后将10亿个数依次读取，大于堆顶，则替换堆顶，做一次堆调整。结束之后，最小堆中存放的数即为所求。总的时间复杂度为nlogk，这里n为10亿，k为10000。</p>
<p>堆排序之所以不稳定是在当把堆顶元素与最后一个元素交换时，可能会改变相同元素的相对位置。比如序列是10，20，30，20，按最小堆的先输出堆顶10，然后将第3层的20（第2个20）放到堆顶，符合最小堆的要求，不需要调整，所以就输出第2个20，稳定性遭到了破坏。</p>
<ul>
<li>稳定性：不稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(nlogn)</li>
<li>最好情况时间复杂度：O(nlogn)</li>
<li>最坏情况时间复杂度：O(nlogn)，相比于快速排序来说，这是堆排序的最大优点</li>
</ul>
</li>
<li>额外空间复杂度：O(1)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/heapsort_anim.gif" alt="堆排序!"></li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    buildHeap(arr);</div><div class="line">    <span class="keyword">int</span> heapSize = arr.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        swap(arr, <span class="number">0</span>, i);</div><div class="line">        heapify(arr, <span class="number">0</span>, --heapSize);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        heapify(arr, i, arr.length);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> heapSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> smallest = i;</div><div class="line">    <span class="keyword">if</span> (left &lt; heapSize &amp;&amp; arr[left] &lt; arr[i]) &#123;</div><div class="line">        smallest = left;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (right &lt; heapSize &amp;&amp; arr[right] &lt; arr[smallest]) &#123;</div><div class="line">        smallest = right;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (smallest != i) &#123;</div><div class="line">        swap(arr, i, smallest);</div><div class="line">        heapify(arr, smallest, heapSize);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul>
<li>基本思想：<br>快速排序是对冒泡排序的一种改进，由A.R.Hoare在1962年提出。冒泡排序是通过相邻元素的比较和交换把最小的冒泡到最顶端，而快速排序则是比较和交换小数和大数，这样一来不仅把小数冒泡到上面同时也把大数沉到下面（有没有点鸡尾酒的味道？）。其基本思想是先选择一个基准元素pivot，通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比pivot要小（或等于），而另外一部分的所有数据比pivot要大（或等于），然后再按此方法对这两部分数据分别进行快速排序，整个过程可以递归进行，以此达到整体有序。</li>
</ul>
<p>快速排序的魅力之处在于它能在每次partition（排序算法的核心所在）都能为一个数组元素确定其排序最终正确位置（一次就定位准，下次循环就不需要考虑这个元素了）。而对于每次partition中基准元素pivot的选择通常是第一个元素或者最后一个元素，也可以随机选择一个元素作为pivot。</p>
<p>事实上，快速排序通常明显比其他O(nlogn)的算法更快，因为它的内部循环可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的旋转，减少所需时间的二次方项的可能性。</p>
<p>快速排序是不稳定的。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为arr={5,3,3,4,3,8,9,10,11},现在中枢元素5（选取第一个元素为pivot）和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，不稳定发生在中枢元素和a[j] 交换的时刻。</p>
<ul>
<li>稳定性：不稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(nlogn)</li>
<li>最好情况时间复杂度：O(nlogn)</li>
<li>最坏情况时间复杂度：O(n^2)，即数组已经排好序的情况（在选取最后一个元素为pivot基准元素时），可以通过随机化来进行改进（shuffle array 或者randomized select pivot），使得期望运行时间为O(nlogn)。“A killer adversary for quicksort”这篇文章很有趣地介绍了怎么样设计一个输入数组，使得快速排序的运行时间为O(n^2)。</li>
</ul>
</li>
<li>额外空间复杂度：O(logn)~O(n)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/quicksort_anim.gif" alt="快速排序!"></li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    recursiveQuickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveQuickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> p = partition(arr, left, right);</div><div class="line">        recursiveQuickSort(arr, left, p - <span class="number">1</span>);</div><div class="line">        recursiveQuickSort(arr, p + <span class="number">1</span>, right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pivot = arr[right];</div><div class="line">    <span class="keyword">int</span> i = left - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt; right; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[j] &gt;= pivot) &#123;</div><div class="line">            i++;</div><div class="line">            swap(arr, i, j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    swap(arr, i + <span class="number">1</span>, right);</div><div class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul>
<li>基本思想：<br>归并排序是分而治之的思想，所谓分而治之，就是将原问题分解为多个独立的子问题，且这些子问题的形式和原问题相似，只是规模上减少了，求解完子问题后合并结果构成原问题的解。分而治之通常分为3步：Divide（分解子问题），Conquer（递归解决子问题），Combine（子问题解求出来后合并成原问题解的步骤）。假设Divide需要f(n)时间，Conquere分解为b个子问题，且子问题大小为a，Combine需要g(n)个时间，则递归式为：T(n) = bT(n/a)+f(n)+g(n)。在归并排序中，Divede的步骤为int middle = (left + right) / 2，因此为O(1)，Combine则为merge函数，Conquer步骤分解为2个子问题，子问题大小为n/2，因此归并排序的递归式为T(n) = 2T(n/2) + O(n)。</li>
</ul>
<p>归并排序相比于其他排序算法的一个缺点是其需要申请额外存储空间来存放合并后的序列，即额外空间复杂度为O(n)。而其优点则很明显，当数据量足够大以至于内存无法存储时，可以通过归并排序来进行，在每次归并完成后将结果存储在磁盘中。</p>
<ul>
<li>稳定性：稳定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(nlogn)</li>
<li>最好情况时间复杂度：O(nlogn)</li>
<li>最坏情况时间复杂度：O(nlogn)</li>
</ul>
</li>
<li>额外空间复杂度：O(n)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/Merge_sort_animation.gif" alt="快速排序!"></li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</div><div class="line">    MergeSortWithRange(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, newArray);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSortWithRange</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] newArr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;</div><div class="line">        MergeSortWithRange(arr, left, middle, newArr);</div><div class="line">        MergeSortWithRange(arr, middle + <span class="number">1</span>, right, newArr);</div><div class="line">        merge(arr, left, middle, right, newArr);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] newArr)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> lowStart = left;</div><div class="line">    <span class="keyword">int</span> lowEnd = mid;</div><div class="line">    <span class="keyword">int</span> hightStart = mid + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> highEnd = right;</div><div class="line">    <span class="keyword">while</span> (lowStart &lt;= lowEnd &amp;&amp; hightStart &lt;= highEnd) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[lowStart] &gt; arr[hightStart]) &#123;</div><div class="line">            newArr[index++] = arr[lowStart++];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            newArr[index++] = arr[hightStart++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (lowStart &lt;= lowEnd) &#123;</div><div class="line">        newArr[index++] = arr[lowStart++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (hightStart &lt;= highEnd) &#123;</div><div class="line">        newArr[index++] = arr[hightStart++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</div><div class="line">        arr[left + i] = newArr[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><ul>
<li><p>基本思想：<br>基数排序也是基于非比较的整数排序算法。其原理是将整数切割成不同的数字，然后按每个位数分别比较。因为整数可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能用于整数。基数排序的时间复杂度为O(kn)，其中n为排序元素个数，k为数字位数。其不一定优于O(nlogn)的算法，因为k的大小会受到n的影响。</p>
</li>
<li><p>稳定性：稳定</p>
</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：O(kn)，其中n为排序元素个数，k为数字位数</li>
<li>最好情况时间复杂度：O(kn)，其中n为排序元素个数，k为数字位数</li>
<li>最坏情况时间复杂度：O(kn)，其中n为排序元素个数，k为数字位数</li>
</ul>
</li>
<li>额外空间复杂度：O(n)</li>
<li>示意图如下所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E4%BE%8B%E5%AD%90.png" alt="基数排序!"></li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">    <span class="comment">// 得到最大的数</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</div><div class="line">            max = arr[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 得到最大的数的位数</span></div><div class="line">    <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (max &gt; <span class="number">0</span>) &#123;</div><div class="line">        times++;</div><div class="line">        max = max / <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建10个链表来存储</span></div><div class="line">    List&lt;ArrayList&gt; queue = <span class="keyword">new</span> ArrayList&lt;ArrayList&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        ArrayList&lt;Integer&gt; q = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        queue.add(q);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从个位开始，对每一位进行一次排序</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</div><div class="line">        <span class="comment">// 加入该位的数字对应的queue中</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</div><div class="line">            <span class="keyword">int</span> digit = arr[j] % (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, (i + <span class="number">1</span>)) / (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i);</div><div class="line">            ArrayList&lt;Integer&gt; tmp = queue.get(digit);</div><div class="line">            tmp.add(arr[j]);</div><div class="line">            queue.set(digit, tmp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 将10个队列中的数排好放到arr中</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">while</span> (queue.get(j).size() &gt; <span class="number">0</span>)&#123;</div><div class="line">                ArrayList&lt;Integer&gt; q = queue.get(j);</div><div class="line">                arr[count++] = q.get(<span class="number">0</span>);</div><div class="line">                q.remove(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><ul>
<li>基本思想：<br>计数排序使用一个额外的数组C，其中第i个元素是待排序序列arr中值等于i的元素的个数。然后根据数组C将arr中的元素排到正确的位置。它只能对整数进行排序。</li>
</ul>
<p>计数排序不是基于比较的排序，排序的速度快于任何比较排序算法。且计数的数组C的长度取决于待排序数组中数据的范围（最大值与最小值的差加1），这使得计数排序对于数据范围很大的数组，需要大量时间和空间。</p>
<ul>
<li>稳定性：因为是计数，说不清楚</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：当输入为n个0到k之间的整数时，为O(n+k)</li>
<li>最好情况时间复杂度：当输入为n个0到k之间的整数时，为O(n+k)</li>
<li>最坏情况时间复杂度：当输入为n个0到k之间的整数时，为O(n+k)</li>
</ul>
</li>
<li>额外空间复杂度：当输入为n个0到k之间的整数时，为O(k)，即数组C的大小</li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (max &lt; arr[i]) &#123;</div><div class="line">            max = arr[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span>[] C = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        C[arr[i]]++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = max; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C[i]; j++) &#123;</div><div class="line">            arr[k++] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><ul>
<li>基本思想：<br>桶排序也称为箱排序，其工作原理是将数组分到有限数量的桶子里。每个桶子再分别排序（有可能使用其他的排序算法或以递归方式继续使用桶排序进行排序）。桶排序在很多情况下比快排还要快，但是缺点是非常耗空间，基本上也是最耗空间的一种排序算法，而且只能在某些强行下使用。</li>
</ul>
<p>桶排序最好情况下使用线性时间O(n)，且桶排序的时间复杂度取决于各个桶之间的数据进行排序的时间复杂度，因为其他部分的时间复杂度都为O(n)。同时，很显然的是桶划分的越小，各个桶之间的数据越少，排序所用时间也会越少，但相应的空间就会增大。</p>
<p>桶排序在处理密集型数据排序的时候有比较好的效果，因为密集型数据情况下的桶排序的额外空间复杂度不高。比如浙江省的高考成绩在0~810分之间，有将近30万考生，我们可以创建811个桶，将每个考生的分数放入对应的桶中，这样将极大提高排序的时间。但是如果分数是从0~1亿分，那分1亿个桶是不现实的，所以桶排序有其局限性。桶排序还有一个关键点就是桶的设计以及hash函数的设计，如果设计不好的话几乎没有作用。</p>
<ul>
<li>稳定性：由桶内排序算法决定</li>
<li>时间复杂度：<ul>
<li>平均时间复杂度：取决于各个桶之间进行排序的时间复杂度</li>
<li>最好情况时间复杂度：取决于各个桶之间进行排序的时间复杂度</li>
<li>最坏情况时间复杂度：取决于各个桶之间进行排序的时间复杂度</li>
</ul>
</li>
<li>额外空间复杂度：O(n)</li>
<li>代码实现如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BucketSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//设置桶的数量为100，并规定待排数[0,1000)</span></div><div class="line">    <span class="keyword">int</span> bucketNums = <span class="number">100</span>;</div><div class="line">    <span class="comment">// 创建</span></div><div class="line">    List&lt;List&lt;Integer&gt;&gt; buckets = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketNums; i++) &#123;</div><div class="line">        <span class="comment">//用链表比较合适</span></div><div class="line">        buckets.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//划分桶</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        buckets.get(mapFunctionOfBucketSort(arr[i])).add(arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//对每个桶进行排序</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buckets.size(); i++) &#123;</div><div class="line">        <span class="keyword">if</span>(!buckets.get(i).isEmpty()) &#123;</div><div class="line">            Collections.sort(buckets.get(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//还原排好序的数组</span></div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = buckets.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = buckets.get(i).size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            arr[index++] = buckets.get(i).get(j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mapFunctionOfBucketSort</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x / <span class="number">100</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于稳定性的判定，有一个简单的比较通用的结论就是需要交换两个不相邻元素的排序算法通常是不稳定的，比如快速排序，希尔排序，堆排序等。</p>
<p>而将不稳定的算法改为稳定的算法一个最简单的方法是在原来的数据中加入其在初始未排序数组中的索引，当排序完成后，对相等的元素再按其在未排序数组中的索引再排序一次。</p>
<p>排序算法博大精深，需要深入理解每一个算法的思想并学会灵活运用，针对待排序序列的特点，寻找合适的排序算法，亦或是将不同的排序算法组合起来共同完成排序任务。</p>
<p>再看一遍吧~<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.png" alt="排序算法总结!"></p>
<p>参考：<br><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95</a><br><a href="http://blog.csdn.net/xiazdong/article/details/8193625" target="_blank" rel="external">http://blog.csdn.net/xiazdong/article/details/8193625</a><br><a href="http://blog.csdn.net/xiazdong/article/details/8462393" target="_blank" rel="external">http://blog.csdn.net/xiazdong/article/details/8462393</a><br><a href="http://www.cnblogs.com/eniac12/p/5329396.html" target="_blank" rel="external">http://www.cnblogs.com/eniac12/p/5329396.html</a><br><a href="http://www.runoob.com/w3cnote/sort-algorithm-summary.html" target="_blank" rel="external">http://www.runoob.com/w3cnote/sort-algorithm-summary.html</a><br><a href="http://www.cnblogs.com/wxisme/p/5243631.html" target="_blank" rel="external">http://www.cnblogs.com/wxisme/p/5243631.html</a><br><a href="http://blog.csdn.net/zgrjkflmkyc/article/details/11639091" target="_blank" rel="external">http://blog.csdn.net/zgrjkflmkyc/article/details/11639091</a><br><a href="http://www.jianshu.com/p/042b5e5dc040" target="_blank" rel="external">http://www.jianshu.com/p/042b5e5dc040</a><br><a href="http://blog.csdn.net/han_xiaoyang/article/details/12163251" target="_blank" rel="external">http://blog.csdn.net/han_xiaoyang/article/details/12163251</a><br><a href="http://www.atool.org/sort.php" target="_blank" rel="external">http://www.atool.org/sort.php</a><br><a href="http://blog.csdn.net/litong09282039/article/details/46332127" target="_blank" rel="external">http://blog.csdn.net/litong09282039/article/details/46332127</a><br><a href="http://yingyingol.iteye.com/blog/1334891" target="_blank" rel="external">http://yingyingol.iteye.com/blog/1334891</a><br><a href="http://www.myexception.cn/program/1404520.html" target="_blank" rel="external">http://www.myexception.cn/program/1404520.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出数据结构之栈与队列[例子，技巧与使用场景]]]></title>
      <url>http://bigmingtalk.github.io/2016/12/13/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%5B%E4%BE%8B%E5%AD%90%EF%BC%8C%E6%8A%80%E5%B7%A7%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%5D/</url>
      <content type="html"><![CDATA[<p>栈和队列是我们日常编程中极为常用的两种数据结构。从实现的底层上来说，栈和队列都是特殊的线性表。从高层的数据操作上看，栈是后进先出的（Last In First Out），而队列则是先进先出（First In First Out）。在本篇文章中将着重与介绍栈和队列在什么样的情况下使用，亦或是说看到什么样的题应该想到用栈或队列来解决，并通过具体的例子来让大家更好地理解其使用场景。栈与队列相比，栈的使用场景会显得更加不那么容易想到，相对来说也会稍微复杂一些，尤其是结合递归函数以后。</p>
<p>在本篇文章中，将通过以下三个方面来做主要介绍。</p>
<ol>
<li>保持栈或队列有序是解决很多栈和队列问题的关键</li>
<li>栈与函数调用（尤其是递归）之间美妙的相关性</li>
<li>栈与队列之间的互相转换关系</li>
</ol>
<a id="more"></a>
<h1 id="保持栈或队列有序是解决很多栈和队列问题的关键"><a href="#保持栈或队列有序是解决很多栈和队列问题的关键" class="headerlink" title="保持栈或队列有序是解决很多栈和队列问题的关键"></a>保持栈或队列有序是解决很多栈和队列问题的关键</h1><p>保持栈或队列有序是解决很多栈和队列问题的关键。这句话可能不是那么好理解，简单说的话就是在操作过程中时刻保持栈或队列中的数据是有序的，具体可以看以下几个例子。</p>
<h2 id="设计一个有getMin功能的栈"><a href="#设计一个有getMin功能的栈" class="headerlink" title="设计一个有getMin功能的栈"></a>设计一个有getMin功能的栈</h2><p>题目：实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。<br>要求：</p>
<ol>
<li>pop, push, getMin操作的时间复杂度都是O(1)</li>
<li>设计的栈可以使用现成的栈结构</li>
</ol>
<p>从题目中要求我们getMin操作的时间复杂度为O(1)可以知道，我们必须维持一个有序的数据，当调用getMin函数时，能够立即返回。否则，当调用getMin时，无论再对栈做什么样的操作，都无法保证时间复杂度为O(1).</p>
<p>该题的解法很简单，我们只需要两个栈，一个栈stackData与普通栈没有区别，并额外申请一个stackMin栈，并如上面所说，保持stackMin栈有序！且stackMin栈的栈顶是当前的最小值。当调用getMin时，返回stackMin栈顶的值，而stackMin的push与pop操作则依赖于当前操作的数与stackMin栈顶的数的大小关系。具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/8/15.</div><div class="line"> *</div><div class="line"> * 题目:实现一个特殊的栈,在实现栈的基本功能之上,能够返回栈中最小元素的操作.</div><div class="line"> * 要求: 1. pop, push, getMin操作的时间复杂度都是O(1).</div><div class="line"> *      2. 设计的栈类型可以使用现成的栈结构.</div><div class="line"> *难度: *</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetMinStack_me</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第一种实现方式,主要思想是用一个stackMin的栈保存每一步的最小值,stackData与普通栈相同</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack1</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</div><div class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStack1</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.stackData = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">            <span class="keyword">this</span>.stackMin = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.stackData.push(value);</div><div class="line">            <span class="comment">/*if (stackMin.isEmpty())&#123;</span></div><div class="line">                stackMin.push(value);</div><div class="line">            &#125;else if(stackMin.peek() &gt; value)&#123;</div><div class="line">                stackMin.push(value);</div><div class="line">            &#125;*/</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.stackMin.isEmpty())&#123;</div><div class="line">                <span class="keyword">this</span>.stackMin.push(value);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &lt;= getMin())&#123;</div><div class="line">                <span class="keyword">this</span>.stackMin.push(value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.stackData.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your stack is empty"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> value = <span class="keyword">this</span>.stackData.pop();</div><div class="line">            <span class="comment">/*if(value == stackMin.peek())&#123;</span></div><div class="line">                stackMin.pop();</div><div class="line">            &#125;*/</div><div class="line">            <span class="keyword">if</span>(value == <span class="keyword">this</span>.getMin())&#123;</div><div class="line">                <span class="keyword">this</span>.stackMin.pop();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.stackMin.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your satck is empty"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.stackMin.peek();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第二种方式的思想与第一种方式是一样的,只不过是在push和pop上稍有不同.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack2</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</div><div class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStack2</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.stackData = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">            <span class="keyword">this</span>.stackMin = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.stackData.push(value);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.stackMin.isEmpty())&#123;</div><div class="line">                <span class="keyword">this</span>.stackMin.push(value);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &lt;= getMin())&#123;</div><div class="line">                <span class="keyword">this</span>.stackMin.push(value);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">int</span> pNum = <span class="keyword">this</span>.stackMin.peek();</div><div class="line">                <span class="keyword">this</span>.stackMin.push(pNum);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.stackData.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your stack is empty"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> value = <span class="keyword">this</span>.stackData.pop();</div><div class="line">            <span class="keyword">this</span>.stackMin.pop();</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.stackMin.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your satck is empty"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.stackMin.peek();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        MyStack1 stack1 = <span class="keyword">new</span> MyStack1();</div><div class="line">        stack1.push(<span class="number">4</span>);</div><div class="line">        System.out.println(stack1.getMin());</div><div class="line">        stack1.push(<span class="number">5</span>);</div><div class="line">        System.out.println(stack1.getMin());</div><div class="line">        stack1.push(<span class="number">3</span>);</div><div class="line">        System.out.println(stack1.getMin());</div><div class="line">        stack1.pop();</div><div class="line">        System.out.println(stack1.getMin());</div><div class="line"></div><div class="line">        MyStack2 stack2 = <span class="keyword">new</span> MyStack2();</div><div class="line">        stack2.push(<span class="number">4</span>);</div><div class="line">        System.out.println(stack2.getMin());</div><div class="line">        stack2.push(<span class="number">5</span>);</div><div class="line">        System.out.println(stack2.getMin());</div><div class="line">        stack2.push(<span class="number">3</span>);</div><div class="line">        System.out.println(stack2.getMin());</div><div class="line">        stack2.pop();</div><div class="line">        System.out.println(stack2.getMin());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中对于stackMin有两种实现方式，但是其本质是一致的，stackMin栈中保存着stackData栈每一步的最小值。它们所有的操作的时间复杂度都为O(1)，额外空间复杂度都为O(n)。而区别是方案一中stackMin压入时稍省空间，但是弹出操作稍费时间；方案二中satckMin压入时稍费空间，但是弹出时稍省时间。</p>
<h2 id="用一个栈实现另一个栈的排序"><a href="#用一个栈实现另一个栈的排序" class="headerlink" title="用一个栈实现另一个栈的排序"></a>用一个栈实现另一个栈的排序</h2><p>题目： 一个栈中元素类型为整型，现在想将该栈从顶到底按从大到小的顺序排列，只许额外申请一个栈。除此之外，可以申请新的变量，但不能申请额外的数据结构。</p>
<p>该题是思路还是一样的，当你看到这种有序的要求时，基本就是要在栈中保证有序了！将要排序的栈即为stack，申请的辅助栈记为help，在stack上执行pop操作，弹出的元素即为cur。</p>
<ul>
<li>如果cur小于或等于help的栈顶元素，则将cur直接压入help；</li>
<li>如果cur大于help的栈顶元素，则将help的元素逐一弹出，逐一压入stack，直到cur小于或等于help的栈顶元素，再将cur压入help。</li>
</ul>
<p>一直执行以上操作，直到stack中的全部元素都压入到help。最后将help中的所有元素逐一压入stack，即完成排序。代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/8/16.</div><div class="line"> *</div><div class="line"> * 题目: 一个栈中元素的类型为整型,将该栈从顶到底按从大到小的顺序排序,只许申请一个栈.</div><div class="line"> *      除此之外,可以申请新的变量,但不能申请额外的数据结构,如何完成排序?</div><div class="line"> * 难道: *</div><div class="line"> *</div><div class="line"> * 思路: 在stack上进行pop操作,弹出的元素记为cur,</div><div class="line"> *      如果cur小于或等于help的栈顶元素,则cur直接压入help,</div><div class="line"> *      否则,如果cur大于help的栈顶元素,则将help的元素逐个压入</div><div class="line"> *          stack,直到help为空或cur小于等于help的栈顶元素</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackSortStack_me</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortStackByStack</span><span class="params">(Stack&lt;Integer&gt; stack)</span></span>&#123;</div><div class="line">        Stack&lt;Integer&gt; help = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</div><div class="line">            <span class="keyword">int</span> cur = stack.pop();</div><div class="line">            <span class="keyword">while</span>(!help.isEmpty() &amp;&amp; help.peek()&lt;cur)&#123;</div><div class="line">                stack.push(help.pop());</div><div class="line">            &#125;</div><div class="line">            help.push(cur);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!help.isEmpty())&#123;</div><div class="line">            stack.push(help.pop());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        stack.push(<span class="number">3</span>);</div><div class="line">        stack.push(<span class="number">1</span>);</div><div class="line">        stack.push(<span class="number">6</span>);</div><div class="line">        stack.push(<span class="number">2</span>);</div><div class="line">        stack.push(<span class="number">5</span>);</div><div class="line">        stack.push(<span class="number">4</span>);</div><div class="line">        sortStackByStack(stack);</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回顾此题，这里的关键就是要保证help栈是有序的，然后由局部有序不断扩张到全局有序！当然这种方法在时间效率上并不高效，特别是在一些特殊情况下，比如若stack栈中原本从顶到底是按从小到大的顺序拍好的，则从stack每次pop出一个元素，都需要将help栈中元素全部压入stack中。</p>
<h2 id="求最大子矩阵的大小"><a href="#求最大子矩阵的大小" class="headerlink" title="求最大子矩阵的大小"></a>求最大子矩阵的大小</h2><p>题目： 给定一个整型矩阵map，其中的值只有0和1两种，求其中全是1的所有矩形区域中，最大的矩形区域为1的数量。<br>例如： 1 1 1 0<br>其中，最大的矩形区域有3个1，所以返回3.<br>再如：<br>1 0 1 1<br>1 1 1 1<br>1 1 1 0<br>其中，最大的矩形区域有6个1，所以返回6.<br>如果矩形的大小为O(NxM)，要求时间复杂度为O(NxM)。</p>
<p>本题的解决思路分为两步。</p>
<ol>
<li><p>矩阵的行数为N，以每一行做切割，统计以当前行作为底的情况下，每个位置往上的1的数量。使用高度数组height来表示。<br>例如：<br>map = 1 0 1 1<br>   1 1 1 1<br>   1 1 1 0<br>以第1行做切割后，height={1,0,1,1}，height[j]表示目前的底上（第1行），j位置往上（包括j位置）有多少连续的1。<br>以第2行做切割后，height={2,1,2,2}，注意到从第一行到第二行，height数组的更新是十分方便的，即height[j] = map[i][j] == 0 ? 0 : height[j] + 1<br>以第3行做切割后，height = {3,2,3,0}</p>
</li>
<li><p>对于每一次切割，都利用更新后的height数组来求出以每一行为底的情况下，最大的矩形是什么。那么这么多次切割中，最大的那个矩形就是我们要的。<br>这里的步骤2是本题的关键，如果height数组的长度为M，步骤2的过程可以做到时间复杂度为O(M)。对于height数组，尅理解为一个直方图，height中每一个元素的值则对应该直方图中对应的柱子的长度，而步骤2的实质就是在这样一个直方图中求最大矩形的面积。如果我们能够求出以每一根注意扩张出去的最大矩形，那么其中最大矩形就是我们想要的解。而考查每一根柱子最大能扩多大，这个行为的实质就是找到柱子左边刚比它小的柱子位置在哪里，以及右边刚比它小的柱子位置在哪里。而这个过程怎么计算最快呢？用栈！！！</p>
</li>
</ol>
<p>假设我们的栈记为stack，只有当前i位置的值height[i]大于当前栈顶位置所代表的值(height[stack.peek()])，则i位置才可以压入stack。所以可以知道，stack从栈顶到栈底的位置所代表的值是依次递减，并且无重复值。而如果当前i位置的值height[i]小于或等于当前栈顶位置所代表的值(height[stack.peek()])，则把占中存的位置不断弹出，知道某一个栈顶所代表的值小于height[i]，再把位置i压入，并在这期间做如下处理：</p>
<ol>
<li>假设当前弹出的栈顶位置即为位置j，弹出栈顶之后，新的栈顶记为k，然后我们开始考虑位置j的柱子向右和向左最远能扩到哪里。</li>
<li>对位置j来说，向右最远能扩到哪里呢？如果height[j]&gt;height[i]，那么i-1位置就是向右能扩到的最远位置，因为j之所以被弹出，就是因为遇到了第一个比位置j值小的位置。如果height[j]==height[i]，那么i-1位置不一定是向右能扩到的最远位置，只是起码能扩到的位置。但是可以肯定的是，这种情况下，i位置的柱子必然也可以扩到j位置。也就是说，j位置的柱子扩出来的最大矩形和i位置扩出来的最大矩形是同一个。所以，此时可以不再计算j位置的柱子能扩出来的最大矩形，因为位置i肯定要压入到栈中，那就等位置i弹出的时候再说。</li>
<li>对位置j的柱子来说，向左最远能扩到哪里呢？肯定是k+1位置。首先，height[k+1..j-1]之间不可能有小于或等于height[k]的值，否则k位置早从栈里弹出了。然后因为在栈里k位置和j位置原本是相邻的，并且从栈顶到栈底的位置所代表的值是依次递减并且无重复值，所以在height[k+1..j-1]之间不可能有大于或等于height[k]，同时又小于或等于height[j]的，因为如果有这样的值，k和j再占中就不可能相邻。所以，height[k+1..j-1]之间的值避让是既大于height[k]，又大于height[j]的，所以j位置的柱子向左最远可以扩大到k+1位置。</li>
<li>综上所述，j位置的柱子能扩出来的最大矩形为((i-1)-(k+1)+1)<em>height[j],也就是(i-k-1)</em>height[j]。</li>
</ol>
<p>代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/8/18.</div><div class="line"> *</div><div class="line"> * 题目: 一个整形矩阵map,其中的值只有0和1两种,求其中全是1的所有矩形区域中,</div><div class="line"> *      最大的矩形区域为1的数量</div><div class="line"> * 难度: ***</div><div class="line"> * 思路: 按行切割, 用height[]数组来表示从该行往上连续多少个1,然后就转换为</div><div class="line"> *      有了height数组后,求该height数组内的最大值,就像一个直方图,求最大的</div><div class="line"> *      矩形面积.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximalRectangle_me</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxRecFromBottom</span><span class="params">(<span class="keyword">int</span>[] height)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (height==<span class="keyword">null</span>||height.length==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> maxArea =<span class="number">0</span>;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; height.length; i ++)&#123;</div><div class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; height[i]&lt;= height[stack.peek()])&#123;</div><div class="line">                <span class="keyword">int</span> j = stack.pop();</div><div class="line">                <span class="keyword">int</span> k = stack.isEmpty()? -<span class="number">1</span>:stack.peek();</div><div class="line">                <span class="keyword">int</span> curArea = (i - k - <span class="number">1</span>) * height[j];</div><div class="line">                maxArea = Math.max(curArea, maxArea);</div><div class="line">            &#125;</div><div class="line">            stack.push(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</div><div class="line">            <span class="keyword">int</span> j = stack.pop();</div><div class="line">            <span class="keyword">int</span> k = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</div><div class="line">            <span class="keyword">int</span> curArea = (height.length -k -<span class="number">1</span>) * height[j];</div><div class="line">            maxArea = Math.max(curArea, maxArea);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span>  maxArea;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxRecSize</span><span class="params">(<span class="keyword">int</span>[][] map)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span> || map.length ==<span class="number">0</span> || map[<span class="number">0</span>].length==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] height = <span class="keyword">new</span> <span class="keyword">int</span>[map[<span class="number">0</span>].length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;map.length; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; map[<span class="number">0</span>].length; j++)&#123;</div><div class="line">                height[j] = map[i][j]== <span class="number">0</span> ? <span class="number">0</span> : height[j] + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            maxArea =Math.max(maxRecFromBottom(height), maxArea);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  maxArea;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] map = &#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#125;;</div><div class="line">        System.out.println(maxRecSize(map));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在本题中，关键是思路，首先是对每一行做切割，然后是对每一行的切割求最大矩阵，而求最大矩阵则转化为求以每一个柱子扩展出去的最大矩形。而考查每一根柱子最大能扩多大，这个行为的实质就是找到柱子左边刚比它小的柱子位置在哪里，以及右边刚比它小的柱子在哪里。这个过程的计算就是用到栈！而在用栈的过程中最终要的就是保持栈是有序的！！！因为有序保证了你可以得到第一个比它小的位置！</p>
<h2 id="生成窗口最大值数组"><a href="#生成窗口最大值数组" class="headerlink" title="生成窗口最大值数组"></a>生成窗口最大值数组</h2><p>前面几题都是保持栈中的元素有序，后面的两题则是保持队列中的元素有序！如下面这一题：<br>题目： 有一个整型数组arr和一个大小为w的窗口从数组的最左边滑到最右边，窗口每次向右边滑一个位置，例如数组为[4,3,5,4,3,3,6,7]，窗口大小为3时：<br>[4 3 5] 4 3 3 6 7 窗口中最大值为5<br>4 [3 5 4] 3 3 6 7 窗口中最大值为5<br>4 3 [5 4 3] 3 6 7 窗口中最大值为5<br>4 3 5 [4 3 3] 6 7 窗口中最大值为4<br>4 3 5 4 [3 3 6] 7 窗口中最大值为6<br>4 3 5 4 3 [3 6 7] 窗口中最大值为7<br>如果数组长度为n，窗口大小为w，则一共生成n-w+1个窗口的最大值。<br>请实现一个函数：<br>输入：整型数组arr，窗口大小为w<br>输出：一个长度为n-w+1的数组res，res[i]表示每一种窗口状态下的最大值。<br>以本题为例，结果应该返回{5，5，5，4，6，7}。要求时间复杂度为O(N)。</p>
<p>如果时间复杂度要求为O(N*w)，那是很简单的，每一个窗口都遍历一次就可以。这里的关键就是用双端队列来实现窗口最大值的更新，而关键就在于保持双端队列的有序！<br>首先生成双端队列qmax，qmax中存放数组arr的下标。<br>假设遍历到arr[i]，qmax的放入规则为：</p>
<ol>
<li>如果qmax为空，直接把下标i放进qmax，放入过程结束。</li>
<li>如果qmax不为空，取出当前qmax队尾存放的下标，假设为j。如果arr[j]&gt;arr[i]，直接把下标i放进qmax的队尾，放入过程结束。如果arr[j]&lt;=arr[i]，把j从qmax中弹出，继续qmax的放入规则。</li>
</ol>
<p>假设遍历到arr[i]，qmax的弹出规则为：如果qmax对头的下标等于i-w，说明当前qmax队头的下标已过期，弹出当前队头的下标即可。</p>
<p>综上所述，qmax便成了一个维护窗口为w的子数组的最大值更新的结构。这里之所以arr[j]&gt;arr[i]是i放入qmax里，是因为当j &lt; i，所以可能j过期了而i没过期，而当arr[j]&lt;=arr[i]时，arr[i]既比arr[j]大，又比arr[j]更新，所以arr[j]可以被淘汰！具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/8/17.</div><div class="line"> *</div><div class="line"> * 题目: 输入: 整型数组arr,窗口大小为w</div><div class="line"> *      输出: 一个长度为n-w+1的数组res,res[i]表示每一种窗口状态下的最大值</div><div class="line"> * 难度: **</div><div class="line"> * 思路: 用一个双端队列qmax来存放数组arr的下标.主要就是当放入新的数a大于前面的数时,前面的数就没有</div><div class="line"> *      用了,因为现在最大的是新放进来的a,如果小于前面的数,则要放进去,因为可能到时候前面的数都失效</div><div class="line"> *      了,但是a还没失效,所以a还需要放进来.另外一个是队列头结点的弹出,因为窗口已经划过去了,所以可</div><div class="line"> *      能已经失效了,需要弹出去.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingWindowMaxArray_me</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getMaxWindow(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> w)&#123;</div><div class="line">        <span class="keyword">if</span>(arr ==<span class="keyword">null</span> || w&lt;<span class="number">1</span> || arr.length&lt;w)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LinkedList&lt;Integer&gt; qmax = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length-w+<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;arr.length; i++)&#123;</div><div class="line"></div><div class="line">            <span class="comment">//如果前面的结点都小于现在的结点,则要将前面的结点弹出,知道大于现在的结点为止</span></div><div class="line">            <span class="comment">//否则,直接加入到队列中,因为这是最新的,可能到时候前面都因为窗口过期了,它还没</span></div><div class="line">            <span class="comment">//有过期.</span></div><div class="line">            <span class="keyword">while</span>(!qmax.isEmpty() &amp;&amp; arr[qmax.peek()]&lt;arr[i])&#123;</div><div class="line">                qmax.pollLast();</div><div class="line">            &#125;</div><div class="line">            qmax.addLast(i);</div><div class="line"></div><div class="line">            <span class="comment">//如果队列头的结点已经失效了的话,则把头节点弹出</span></div><div class="line">            <span class="comment">//if (qmax.peekFirst() &lt;i-w+1) 这个条件也是可以的</span></div><div class="line">            <span class="keyword">if</span> (qmax.peekFirst() == i-w)&#123;</div><div class="line">                qmax.pollFirst();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//当移动了w-1时,已经到了第一个窗口的结果,按照我们的规则就是最头上的那个结点</span></div><div class="line">            <span class="keyword">if</span>(i&gt;=w-<span class="number">1</span>)&#123;</div><div class="line">                res[index++] = arr[qmax.peekFirst()];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// for test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != arr.length; i++) &#123;</div><div class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</div><div class="line">        <span class="keyword">int</span> w = <span class="number">3</span>;</div><div class="line">        printArray(getMaxWindow(arr, w));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的关键就是保持双端队列有序，通过有序的方式能够找到最大值！</p>
<h2 id="最大值减去最小值小于或等于num的子数组数量"><a href="#最大值减去最小值小于或等于num的子数组数量" class="headerlink" title="最大值减去最小值小于或等于num的子数组数量"></a>最大值减去最小值小于或等于num的子数组数量</h2><p>这道题是上一道题的变化和延伸，也是用到了保持队列有序这样一个关键点。<br>题目：给定数组arr和整数num，共返回多少个子数组满足如下情况：<br>max(arr[i..j]) - min(arr[i..j]) &lt;= num<br>max(arr[i..j])表示子数组arr[i..j]中的最大值，min(arr[i..j])表示子数组arr[i..j]中的最小值。<br>要求如果数组长度为N，实现时间复杂度为O(N)的算法。</p>
<p>对，你看的没错，就是O(N)的算法！普通解法是找到所有arr的子数组，共有O(N^2)个，然后对每一个子数组做遍历找到其中的最小值和最大值，这个过程的时间复杂度为O(N)，所以总的时间复杂度为O(N^3)。而O(N)的算法其所需的额外凯南复杂度也为O(N)，其想法类似于上一题“生成窗口最大值数组”问题，使用双端队列结构。并且保证双端队列有序。</p>
<p>生成两个双端队列qmax和qmin，当子数组为arr[i..j]时，qmax维护了窗口子数组arr[i..j]的最大值更新的结构，qmin则维护了窗口子数组arr[i..j]的最小值更新的结构。当子数组arr[i..j]向右扩一个位置变成arr[i..j+1]时，qmax和qmin结构可以在O(1)的时间内更新，并且在O(1)的时间内得到arr[i..j+1]的最大值和最小值。当子树组arr[i..j]向左缩一个位置变成arr[i+1..j]时，qmax和qmin结构依然可以在O(1)时间内更新，并且在O(1)时间内得到arr[i+1..j]的最大值和最小值。</p>
<p>并且可以知道如果arr[i..j]满足条件，那么arr[k..l]，其中i&lt;=k&lt;=l&lt;=j也都满足条件。所以算法可以从j先开始往右移，移到到不可移动为止，算出以当前j值为右边界的子数组的个数j-i个。当j不能再右移后，再右移i，循环往复，得到最终的解。在上述过程中，所有的下标值最多进qmax和qmin一次，出qmax和qmin一次。i和j的值也不断增加，并且从来不减小。所以整个过程的时间复杂度为O(N)。具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/8/18.</div><div class="line"> *</div><div class="line"> * 题目: 给定数组arr和整数num,共返回多少个子数组满足如下情况:</div><div class="line"> *      1. max(arr[i..j]) -min(arr[i..j]) &lt;=num</div><div class="line"> *      2. max(arr[i..j])表示子数组arr[i..j]中的最大值,</div><div class="line"> *         min(arr[i..j])表示子数组arr[i..j]中的最小值</div><div class="line"> * 难度: ***</div><div class="line"> * 思路: 普通法就是穷举,复杂度为O(N^3),不再说明</div><div class="line"> *      另一种方法是与窗口最大值数组问题一样的,用qmax和qmin两个双端队列来维护窗口子数组的</div><div class="line"> *      最大值和最小值,每次更新窗口的时间为O(1),所以总的时间复杂度为0(N)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllLessNumSubArray_me</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        LinkedList&lt;Integer&gt; qmin = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        LinkedList&lt;Integer&gt; qmax = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j =<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res =<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt; array.length)&#123;</div><div class="line">            <span class="keyword">while</span> (j &lt; array.length)&#123;</div><div class="line">                <span class="keyword">while</span> (!qmin.isEmpty() &amp;&amp; array[qmin.peekLast()] &gt;= array[j])&#123;</div><div class="line">                    qmin.pollLast();</div><div class="line">                &#125;</div><div class="line">                qmin.addLast(j);</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (!qmax.isEmpty() &amp;&amp; array[qmax.peekLast()] &lt;= array[j])&#123;</div><div class="line">                    qmax.pollLast();</div><div class="line">                &#125;</div><div class="line">                qmax.addLast(j);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (array[qmax.peekFirst()]-array[qmin.peekFirst()] &gt;num)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (qmax.peekFirst()==i)&#123;</div><div class="line">                qmax.pollFirst();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (qmin.peekFirst()==i)&#123;</div><div class="line">                qmin.pollFirst();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            res += j-i;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// for test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomArray(<span class="keyword">int</span> len) &#123;</div><div class="line">        <span class="keyword">if</span> (len &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// for test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (arr != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                System.out.print(arr[i] + <span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] arr = getRandomArray(<span class="number">3</span>);</div><div class="line">        <span class="keyword">int</span> num = <span class="number">5</span>;</div><div class="line">        printArray(arr);</div><div class="line">        System.out.println(getNum(arr, num));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这道题的精妙之处就是用了qmax和qmin两个队列来实现O(1)时间内的获取最大最小值。而之所以能够做到这一点的关键则在于保证了其队列的有序性！</p>
<h1 id="栈与函数调用（尤其是递归）之间美妙的相关性"><a href="#栈与函数调用（尤其是递归）之间美妙的相关性" class="headerlink" title="栈与函数调用（尤其是递归）之间美妙的相关性"></a>栈与函数调用（尤其是递归）之间美妙的相关性</h1><p>我们知道，函数调用中会在内存中创建属于该方法的栈，在栈中会保存诸如返回地址，方法参数以及方法内临时变量值等。而当一个函数是递归函数时，则在不满足退出条件时，会不断地调用自身在内存中创建栈，而我们则切切可以利用这一点来实现用函数调用栈来保存变量的功能！如下面这一题：如何仅用递归函数和栈操作逆序一个栈。</p>
<p>题目：一个栈一次压入1，2，3，4，5，那么从栈顶到栈底分别为5，4，3，2，1。将这个栈转置后，从栈顶到栈底为1，2，3，4，5，也就是实现栈中元素的逆序，但是只能用递归函数来实现，不能用其他数据结构。</p>
<p>在这里我们需要思考的问题是如何仅用递归函数就能实现。因为这里是逆序，所以我们可以想到的是不断地拿出栈底元素，但是又不能先放进去，而是要拿完以后再放，并且放进去的顺序还是最后一个拿出来的数最先放进去。这就像是栈对不对？但是因为我们不能直接用栈这种数据结构，所以，我们只能装换为使用函数栈来实现，通过函数中的临时变量保存当前栈底的值！这就是本题最最关键的地方！当然，这里还有一个地方需要考虑，就是需要不断地拿出栈底元素！因为我们不能用额外的数据结构，所以这个功能也只能转换为用递归函数来实现，但是有因为拿出栈底元素的同时还是要保证其他元素的顺序不变化，所以在递归中的顺序是很重要的！具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/8/15.</div><div class="line"> *</div><div class="line"> * 题目: 一个栈依次压入1,2,3,4,5,那么从栈顶到栈底分别为5,4,3,2,1.将这个栈转置后,</div><div class="line"> *      从栈顶到栈底为1,2,3,4,5,也就是1,2,3,4,5,也就是实现栈中元素的逆序,但是只能</div><div class="line"> *      用递归函数来实现,不能用其他数据结构</div><div class="line"> * 难度: **</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseStackUsingRecursive_me</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首先用一个递归函数实现得到一个栈的栈底元素并删除</div><div class="line">     * <span class="doctag">@param</span> stack</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAndRemoveLastElement</span><span class="params">(Stack&lt;Integer&gt; stack)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> result = stack.pop();</div><div class="line">        <span class="keyword">if</span> (stack.isEmpty())&#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> last = getAndRemoveLastElement(stack);</div><div class="line">            stack.push(result);</div><div class="line">            <span class="keyword">return</span> last;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 不断得到栈底元素然后重新push就可以得到倒序的栈</div><div class="line">     * <span class="doctag">@param</span> stack</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseStack</span><span class="params">(Stack&lt;Integer&gt; stack)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (stack.isEmpty())&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//int value = stack.pop();</span></div><div class="line">        <span class="keyword">int</span> value = getAndRemoveLastElement(stack);</div><div class="line">        reverseStack(stack);</div><div class="line">        stack.push(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        stack.push(<span class="number">1</span>);</div><div class="line">        stack.push(<span class="number">2</span>);</div><div class="line">        stack.push(<span class="number">3</span>);</div><div class="line">        stack.push(<span class="number">4</span>);</div><div class="line">        reverseStack(stack);</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">        System.out.println(stack.pop());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="栈与队列之间的互相转换关系"><a href="#栈与队列之间的互相转换关系" class="headerlink" title="栈与队列之间的互相转换关系"></a>栈与队列之间的互相转换关系</h1><p>因为栈是后进先出的（Last In First Out），而队列则是先进先出（First In First Out），所以既可以用两个栈来实现队列的功能，也可以用两个队列来实现栈的功能。</p>
<h2 id="两个栈来实现队列的功能"><a href="#两个栈来实现队列的功能" class="headerlink" title="两个栈来实现队列的功能"></a>两个栈来实现队列的功能</h2><p>具体实现上一个栈作为压入栈，在压入数据时只往这个栈中压入，即为stackPush，另一个栈只作为弹出栈，在弹出数据时只从这个栈弹出，记为stackPop。如果stackPop为空，而且需要弹出时，则把stackPush中的所有元素压入stackPop中，因为数据压入栈时时时先进后出的，而这里有两次压入，先压入stackPush，再由stackPush中pop压入stackPop，所以这里就实现两次逆序，顺序也就变回来了。</p>
<p>这里需要注意两点来保证正确性：</p>
<ol>
<li>如果stackPush要往stackPop中压入数据，那么必须一次性把stackPush中的数据全部压入</li>
<li>如果stackPop不为空，stackPush绝对不能向stackPop中压入数据</li>
</ol>
<p>具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoStacksImplementQueue_me</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoStackQueue</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stackPush;</div><div class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stackPop;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TwoStackQueue</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.stackPush = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">            <span class="keyword">this</span>.stackPop = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">            stackPush.push(value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 只有当stackPop为空时才能将stackPush中的元素</div><div class="line">         * 放入stackPop,且必须一次性全部放入</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">poll</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span>(stackPush.isEmpty() &amp;&amp; stackPop.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your queue is empty!"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!stackPop.isEmpty())&#123;</div><div class="line">                <span class="keyword">return</span> stackPop.pop();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(!stackPush.isEmpty())&#123;</div><div class="line">                stackPop.push(stackPush.pop());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> stackPop.pop();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span>(stackPush.isEmpty() &amp;&amp; stackPop.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your queue is empty!"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!stackPop.isEmpty())&#123;</div><div class="line">                <span class="keyword">return</span> stackPop.peek();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(!stackPush.isEmpty())&#123;</div><div class="line">                stackPop.push(stackPush.pop());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> stackPop.peek();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        TwoStackQueue test = <span class="keyword">new</span> TwoStackQueue();</div><div class="line">        test.add(<span class="number">1</span>);</div><div class="line">        test.add(<span class="number">2</span>);</div><div class="line">        test.add(<span class="number">3</span>);</div><div class="line">        test.add(<span class="number">4</span>);</div><div class="line">        System.out.println(test.poll());</div><div class="line">        System.out.println(test.peek());</div><div class="line">        System.out.println(test.poll());</div><div class="line">        System.out.println(test.poll());</div><div class="line">        System.out.println(test.poll());</div><div class="line">        System.out.println(test.poll());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="两个队列来实现栈的功能"><a href="#两个队列来实现栈的功能" class="headerlink" title="两个队列来实现栈的功能"></a>两个队列来实现栈的功能</h2><p>我们同样可以用两个队列来实现栈的功能，假设queueData是专职进出栈的，queueHelp只是个中转站。当要入栈时，直接入队列queueData即可。而当要出栈时。因为要得到把q1的queueData的最后一个元素，所以需要将除最后一个元素外全部的元素转移到队queueHelp中,然后把刚才剩下queueData中的那个元素出队列，之后再把queueHelp中的全部元素转移回queueData中。具体代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoQueuesImplementStack_me</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoQueueStack</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Queue&lt;Integer&gt; queueData;</div><div class="line">        <span class="keyword">private</span> Queue&lt;Integer&gt; queueHelp;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TwoQueueStack</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.queueData = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">            <span class="keyword">this</span>.queueHelp = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.queueData.offer(value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (queueData.size() == <span class="number">0</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"Your stack is empty"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> tmp;</div><div class="line">            <span class="keyword">if</span> (queueData.size() == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> queueData.poll();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">while</span> (queueData.size() != <span class="number">1</span>) &#123;</div><div class="line">                    queueHelp.offer(queueData.poll());</div><div class="line">                &#125;</div><div class="line">                tmp = <span class="keyword">this</span>.queueData.poll();</div><div class="line">                <span class="keyword">while</span> (!queueHelp.isEmpty()) &#123;</div><div class="line">                    queueData.offer(queueHelp.poll());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        TwoQueueStack test = <span class="keyword">new</span> TwoQueueStack();</div><div class="line">        test.push(<span class="number">1</span>);</div><div class="line">        test.push(<span class="number">2</span>);</div><div class="line">        test.push(<span class="number">3</span>);</div><div class="line">        test.push(<span class="number">4</span>);</div><div class="line">        test.push(<span class="number">5</span>);</div><div class="line">        test.push(<span class="number">6</span>);</div><div class="line">        test.push(<span class="number">7</span>);</div><div class="line"></div><div class="line">        System.out.println(test.pop());</div><div class="line">        System.out.println(test.pop());</div><div class="line">        System.out.println(test.pop());</div><div class="line">        System.out.println(test.pop());</div><div class="line">        System.out.println(test.pop());</div><div class="line">        System.out.println(test.pop());</div><div class="line">        System.out.println(test.pop());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了以上三点外，栈和队列还有许许多多应用的地方，它们可以说是最基本的数据结构。栈和队列的灵活应用是每一个程序员必备的技能。由于本人认识有限，也欢迎大家对这方面有所研究的童鞋提出更多的观点建议，不胜感激。</p>
<p>参考：《程序员代码面试指南》 左程云著<br><a href="http://www.cnblogs.com/kaituorensheng/archive/2013/03/02/2939690.html" target="_blank" rel="external">http://www.cnblogs.com/kaituorensheng/archive/2013/03/02/2939690.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java源码解读之Integer及自动装箱拆箱]]></title>
      <url>http://bigmingtalk.github.io/2016/12/06/Java%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B9%8BInteger/</url>
      <content type="html"><![CDATA[<p>今天看到了一道关于包装器类自动装箱和拆箱的题，觉得挺有意思，于是顺便看了一下Integer类的源码，从中找到了答案。很多不理解的问题其实到源码层次都大致能够看得明白，也越发觉得阅读Java中基本类的源码是成为Java牛人过程中必不可少而且非常重要的一步，有问题，看源码！下面是Java中关于包装器类的简单介绍以及Integer类的源码解读。<br><a id="more"></a></p>
<h2 id="包装器类与自动装箱拆箱"><a href="#包装器类与自动装箱拆箱" class="headerlink" title="包装器类与自动装箱拆箱"></a>包装器类与自动装箱拆箱</h2><p>在Java中，有时我们需要将int这样的基本类型转换为对象。所有的基本数据类型都有一个与之对应的包装器类（wrapper）。如Integer、Long、Float、Double、Short、Byte、Character、Void和Boolean（前6个类派生于公共的超类Number）。当我们执行下面语句时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer n = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>其实执行的是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer n  = Integer.valueOf(<span class="number">3</span>);</div></pre></td></tr></table></figure></p>
<p>这个在编译器中将基本数据类型自动转换为包装器类的过程叫做自动装箱。与之对应的，则是自动拆箱，如下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer n = <span class="number">1000</span>;</div><div class="line">n++;</div></pre></td></tr></table></figure></p>
<p>在上述两句代码中，第一句代码进行了自动装箱， 第二句n++则是编译器会插入一条对象拆箱的指令，然后进行自增运算，最后再将结果装箱。</p>
<p>在很多情况下，会有一种假象，那就是基本类型与它们的对象包装器是一样的，只是它们的相等性不同。我们知道==运算符可以应用于对象包装器对象，只不过检测的是对象是否指向同一个内存区域。如果我们想要单纯比较两个对象包装器中的值是否相等，我们则应该调用equals方法。</p>
<p>说了这么多，下面出两个题考考你先~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/6.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer a = <span class="number">1000</span>;</div><div class="line">        Integer b = <span class="number">1000</span>;</div><div class="line"></div><div class="line">        Integer c = <span class="number">10</span>;</div><div class="line">        Integer d = <span class="number">10</span>;</div><div class="line"></div><div class="line">        System.out.println(a == b);</div><div class="line">        System.out.println(c == d);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>想一想这里的输出是什么？</p>
<p>答案是<br>false<br>true</p>
<p>我想没有阅读过Integer源码的人一定会很纳闷，为什么两个答案是不同的。在这道题中。首先如我们之前所说的，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Integer a = <span class="number">1000</span>;</div><div class="line">Integer b = <span class="number">1000</span>;</div><div class="line"></div><div class="line">Integer c = <span class="number">10</span>;</div><div class="line">Integer d = <span class="number">10</span>;</div></pre></td></tr></table></figure></p>
<p>这四个语句都会先进行自动装箱，即等价于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Integer a = Integer.valueOf(<span class="number">1000</span>);</div><div class="line">Integer b = Integer.valueOf(<span class="number">1000</span>);</div><div class="line">        </div><div class="line">Integer c = Integer.valueOf(<span class="number">10</span>);</div><div class="line">Integer d = Integer.valueOf(<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>然后我们又知道==运算符比较的是两个两个对象是否指向同一个区域，所以这里的关键点就在这个valueOf方法，在Integer类中，valueOf的源码(JDK版本为1.8.0_60)如下所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>从中我们可以看到当i在[IntegerCache.low, IntegerCache.high]范围内时，其返回的是IntegerCache内部类的cache数组，而IntegerCache是Integer类中的一个静态内部类（有关静态内部类可以参考我的另外一篇文章<a href="https://bigmingtalk.github.io/2016/12/01/%E8%AF%B4%E8%AF%B4Java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/">说说Java中的静态内部类</a> ）。而IntegerCache这个静态内部类的源码为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="comment">// high value may be configured by property</span></div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>从上面代码中可以看出，在默认情况下，[-128, 127]之内的数都会被缓存在cache数组中，这也解释了上面的答案为什么一个是false一个是true。当声明的Inetger对象的值在-128–127之间时，引用的是缓存中的同一个对象（已经创建好保存在缓存中），所以结果是true；当声明的Integer对象的值不在这个范围之类的时候，就会通过new Integer(i);语句创建一个Integer对象。当然我们也可以通过设置HotSpot VM特定的VM参数来更改IntegerCache.high的值（确保IntegerCache.high &gt;=127即可，具体可参见<a href="http://rednaxelafx.iteye.com/blog/680746" target="_blank" rel="external">[FYI] 关于Integer的自动缓存大小</a>）。</p>
<p>现在看另外一个例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Integer m = <span class="number">1000</span>;</div><div class="line"><span class="keyword">int</span> n = <span class="number">1000</span>;</div><div class="line"></div><div class="line">Integer p = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line">Integer q = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line"></div><div class="line">System.out.println(m == n);</div><div class="line">System.out.println(p == q);</div></pre></td></tr></table></figure></p>
<p>如果你能很快给出正确答案，那说明你是真的懂了，正确答案是</p>
<p>true<br>false</p>
<p>第一个之所以为true是因为当一个Integer类型对象与一个int基本数据类型对象用==比较时，Integer对象会先进行自动拆箱，所以这里m和n比较的其实是两个数值是否相等。这里之所以是m进行自动拆箱而不是n进行装箱进行比较则是Java中编译器的默认设定。第二个答案如果你不明白则说明你还没有真的看明白，在这里虽然10在[-128, 127]范围内，但是这里是直接用new方法在堆上创建了一个对象，而不是调用valueOf方法，所以在堆上两个不同的对象的地址当然是不一样的。相比说到这里大家对自动装箱和自动拆箱以及包装器类有了一定的了解了吧，要说明的是装箱和拆箱是编译器认可的，而不是虚拟机。编译器在生成类的字节码时，自动插入必要的方法调用。虚拟机只是执行这些字节码。最后再看一个Integer类的源码吧，共1500多行，绝大多数为注释，参考了一些别人的解答，也加上了一些自己的认识，仅供大家参考。</p>
<h2 id="Integer类源码解读"><a href="#Integer类源码解读" class="headerlink" title="Integer类源码解读"></a>Integer类源码解读</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div><div class="line">1347</div><div class="line">1348</div><div class="line">1349</div><div class="line">1350</div><div class="line">1351</div><div class="line">1352</div><div class="line">1353</div><div class="line">1354</div><div class="line">1355</div><div class="line">1356</div><div class="line">1357</div><div class="line">1358</div><div class="line">1359</div><div class="line">1360</div><div class="line">1361</div><div class="line">1362</div><div class="line">1363</div><div class="line">1364</div><div class="line">1365</div><div class="line">1366</div><div class="line">1367</div><div class="line">1368</div><div class="line">1369</div><div class="line">1370</div><div class="line">1371</div><div class="line">1372</div><div class="line">1373</div><div class="line">1374</div><div class="line">1375</div><div class="line">1376</div><div class="line">1377</div><div class="line">1378</div><div class="line">1379</div><div class="line">1380</div><div class="line">1381</div><div class="line">1382</div><div class="line">1383</div><div class="line">1384</div><div class="line">1385</div><div class="line">1386</div><div class="line">1387</div><div class="line">1388</div><div class="line">1389</div><div class="line">1390</div><div class="line">1391</div><div class="line">1392</div><div class="line">1393</div><div class="line">1394</div><div class="line">1395</div><div class="line">1396</div><div class="line">1397</div><div class="line">1398</div><div class="line">1399</div><div class="line">1400</div><div class="line">1401</div><div class="line">1402</div><div class="line">1403</div><div class="line">1404</div><div class="line">1405</div><div class="line">1406</div><div class="line">1407</div><div class="line">1408</div><div class="line">1409</div><div class="line">1410</div><div class="line">1411</div><div class="line">1412</div><div class="line">1413</div><div class="line">1414</div><div class="line">1415</div><div class="line">1416</div><div class="line">1417</div><div class="line">1418</div><div class="line">1419</div><div class="line">1420</div><div class="line">1421</div><div class="line">1422</div><div class="line">1423</div><div class="line">1424</div><div class="line">1425</div><div class="line">1426</div><div class="line">1427</div><div class="line">1428</div><div class="line">1429</div><div class="line">1430</div><div class="line">1431</div><div class="line">1432</div><div class="line">1433</div><div class="line">1434</div><div class="line">1435</div><div class="line">1436</div><div class="line">1437</div><div class="line">1438</div><div class="line">1439</div><div class="line">1440</div><div class="line">1441</div><div class="line">1442</div><div class="line">1443</div><div class="line">1444</div><div class="line">1445</div><div class="line">1446</div><div class="line">1447</div><div class="line">1448</div><div class="line">1449</div><div class="line">1450</div><div class="line">1451</div><div class="line">1452</div><div class="line">1453</div><div class="line">1454</div><div class="line">1455</div><div class="line">1456</div><div class="line">1457</div><div class="line">1458</div><div class="line">1459</div><div class="line">1460</div><div class="line">1461</div><div class="line">1462</div><div class="line">1463</div><div class="line">1464</div><div class="line">1465</div><div class="line">1466</div><div class="line">1467</div><div class="line">1468</div><div class="line">1469</div><div class="line">1470</div><div class="line">1471</div><div class="line">1472</div><div class="line">1473</div><div class="line">1474</div><div class="line">1475</div><div class="line">1476</div><div class="line">1477</div><div class="line">1478</div><div class="line">1479</div><div class="line">1480</div><div class="line">1481</div><div class="line">1482</div><div class="line">1483</div><div class="line">1484</div><div class="line">1485</div><div class="line">1486</div><div class="line">1487</div><div class="line">1488</div><div class="line">1489</div><div class="line">1490</div><div class="line">1491</div><div class="line">1492</div><div class="line">1493</div><div class="line">1494</div><div class="line">1495</div><div class="line">1496</div><div class="line">1497</div><div class="line">1498</div><div class="line">1499</div><div class="line">1500</div><div class="line">1501</div><div class="line">1502</div><div class="line">1503</div><div class="line">1504</div><div class="line">1505</div><div class="line">1506</div><div class="line">1507</div><div class="line">1508</div><div class="line">1509</div><div class="line">1510</div><div class="line">1511</div><div class="line">1512</div><div class="line">1513</div><div class="line">1514</div><div class="line">1515</div><div class="line">1516</div><div class="line">1517</div><div class="line">1518</div><div class="line">1519</div><div class="line">1520</div><div class="line">1521</div><div class="line">1522</div><div class="line">1523</div><div class="line">1524</div><div class="line">1525</div><div class="line">1526</div><div class="line">1527</div><div class="line">1528</div><div class="line">1529</div><div class="line">1530</div><div class="line">1531</div><div class="line">1532</div><div class="line">1533</div><div class="line">1534</div><div class="line">1535</div><div class="line">1536</div><div class="line">1537</div><div class="line">1538</div><div class="line">1539</div><div class="line">1540</div><div class="line">1541</div><div class="line">1542</div><div class="line">1543</div><div class="line">1544</div><div class="line">1545</div><div class="line">1546</div><div class="line">1547</div><div class="line">1548</div><div class="line">1549</div><div class="line">1550</div><div class="line">1551</div><div class="line">1552</div><div class="line">1553</div><div class="line">1554</div><div class="line">1555</div><div class="line">1556</div><div class="line">1557</div><div class="line">1558</div><div class="line">1559</div><div class="line">1560</div><div class="line">1561</div><div class="line">1562</div><div class="line">1563</div><div class="line">1564</div><div class="line">1565</div><div class="line">1566</div><div class="line">1567</div><div class="line">1568</div><div class="line">1569</div><div class="line">1570</div><div class="line">1571</div><div class="line">1572</div><div class="line">1573</div><div class="line">1574</div><div class="line">1575</div><div class="line">1576</div><div class="line">1577</div><div class="line">1578</div><div class="line">1579</div><div class="line">1580</div><div class="line">1581</div><div class="line">1582</div><div class="line">1583</div><div class="line">1584</div><div class="line">1585</div><div class="line">1586</div><div class="line">1587</div><div class="line">1588</div><div class="line">1589</div><div class="line">1590</div><div class="line">1591</div><div class="line">1592</div><div class="line">1593</div><div class="line">1594</div><div class="line">1595</div><div class="line">1596</div><div class="line">1597</div><div class="line">1598</div><div class="line">1599</div><div class="line">1600</div><div class="line">1601</div><div class="line">1602</div><div class="line">1603</div><div class="line">1604</div><div class="line">1605</div><div class="line">1606</div><div class="line">1607</div><div class="line">1608</div><div class="line">1609</div><div class="line">1610</div><div class="line">1611</div><div class="line">1612</div><div class="line">1613</div><div class="line">1614</div><div class="line">1615</div><div class="line">1616</div><div class="line">1617</div><div class="line">1618</div><div class="line">1619</div><div class="line">1620</div><div class="line">1621</div><div class="line">1622</div><div class="line">1623</div><div class="line">1624</div><div class="line">1625</div><div class="line">1626</div><div class="line">1627</div><div class="line">1628</div><div class="line">1629</div><div class="line">1630</div><div class="line">1631</div><div class="line">1632</div><div class="line">1633</div><div class="line">1634</div><div class="line">1635</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.</div><div class="line"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> java.lang;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Native;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The &#123;<span class="doctag">@code</span> Integer&#125; class wraps a value of the primitive type</div><div class="line"> * &#123;<span class="doctag">@code</span> int&#125; in an object. An object of type &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line"> * contains a single field whose type is &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;In addition, this class provides several methods for converting</div><div class="line"> * an &#123;<span class="doctag">@code</span> int&#125; to a &#123;<span class="doctag">@code</span> String&#125; and a &#123;<span class="doctag">@code</span> String&#125; to an</div><div class="line"> * &#123;<span class="doctag">@code</span> int&#125;, as well as other constants and methods useful when</div><div class="line"> * dealing with an &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Implementation note: The implementations of the "bit twiddling"</div><div class="line"> * methods (such as &#123;<span class="doctag">@link</span> #highestOneBit(int) highestOneBit&#125; and</div><div class="line"> * &#123;<span class="doctag">@link</span> #numberOfTrailingZeros(int) numberOfTrailingZeros&#125;) are</div><div class="line"> * based on material from Henry S. Warren, Jr.'s &lt;i&gt;Hacker's</div><div class="line"> * Delight&lt;/i&gt;, (Addison Wesley, 2002).</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>  Lee Boynton</div><div class="line"> * <span class="doctag">@author</span>  Arthur van Hoff</div><div class="line"> * <span class="doctag">@author</span>  Josh Bloch</div><div class="line"> * <span class="doctag">@author</span>  Joseph D. Darcy</div><div class="line"> * <span class="doctag">@since</span> JDK1.0</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// final类，所以不能定义它们的子类，即不能被继承</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A constant holding the minimum value an &#123;<span class="doctag">@code</span> int&#125; can</div><div class="line">     * have, -2&lt;sup&gt;31&lt;/sup&gt;.</div><div class="line">     */</div><div class="line">    <span class="comment">// 值为（-（2的31次方））的常量，它表示int类型能够表示的最小值，皆为补码表示 </span></div><div class="line">    <span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>   MIN_VALUE = <span class="number">0x80000000</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A constant holding the maximum value an &#123;<span class="doctag">@code</span> int&#125; can</div><div class="line">     * have, 2&lt;sup&gt;31&lt;/sup&gt;-1.</div><div class="line">     */</div><div class="line">    <span class="comment">// //值为 （（2的31次方）－1） 的常量，它表示 int 类型能够表示的最大值。 </span></div><div class="line">    <span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>   MAX_VALUE = <span class="number">0x7fffffff</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The &#123;<span class="doctag">@code</span> Class&#125; instance representing the primitive type</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span>   JDK1.1</div><div class="line">     */</div><div class="line">    <span class="comment">// 表示基本类型 int 的 Class 实例。 </span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class="string">"int"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * All possible chars for representing a number as a String</div><div class="line">     */</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span>[] digits = &#123;</div><div class="line">            <span class="string">'0'</span> , <span class="string">'1'</span> , <span class="string">'2'</span> , <span class="string">'3'</span> , <span class="string">'4'</span> , <span class="string">'5'</span> ,</div><div class="line">            <span class="string">'6'</span> , <span class="string">'7'</span> , <span class="string">'8'</span> , <span class="string">'9'</span> , <span class="string">'a'</span> , <span class="string">'b'</span> ,</div><div class="line">            <span class="string">'c'</span> , <span class="string">'d'</span> , <span class="string">'e'</span> , <span class="string">'f'</span> , <span class="string">'g'</span> , <span class="string">'h'</span> ,</div><div class="line">            <span class="string">'i'</span> , <span class="string">'j'</span> , <span class="string">'k'</span> , <span class="string">'l'</span> , <span class="string">'m'</span> , <span class="string">'n'</span> ,</div><div class="line">            <span class="string">'o'</span> , <span class="string">'p'</span> , <span class="string">'q'</span> , <span class="string">'r'</span> , <span class="string">'s'</span> , <span class="string">'t'</span> ,</div><div class="line">            <span class="string">'u'</span> , <span class="string">'v'</span> , <span class="string">'w'</span> , <span class="string">'x'</span> , <span class="string">'y'</span> , <span class="string">'z'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the first argument in the</div><div class="line">     * radix specified by the second argument.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the radix is smaller than &#123;<span class="doctag">@code</span> Character.MIN_RADIX&#125;</div><div class="line">     * or larger than &#123;<span class="doctag">@code</span> Character.MAX_RADIX&#125;, then the radix</div><div class="line">     * &#123;<span class="doctag">@code</span> 10&#125; is used instead.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the first argument is negative, the first element of the</div><div class="line">     * result is the ASCII minus character &#123;<span class="doctag">@code</span> '-'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;). If the first argument is not</div><div class="line">     * negative, no sign character appears in the result.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The remaining characters of the result represent the magnitude</div><div class="line">     * of the first argument. If the magnitude is zero, it is</div><div class="line">     * represented by a single zero character &#123;<span class="doctag">@code</span> '0'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;); otherwise, the first character of</div><div class="line">     * the representation of the magnitude will not be the zero</div><div class="line">     * character.  The following ASCII characters are used as digits:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *   &#123;<span class="doctag">@code</span> 0123456789abcdefghijklmnopqrstuvwxyz&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * These are &#123;<span class="doctag">@code</span> '\u005Cu0030'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0039'&#125; and &#123;<span class="doctag">@code</span> '\u005Cu0061'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu007A'&#125;. If &#123;<span class="doctag">@code</span> radix&#125; is</div><div class="line">     * &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters</div><div class="line">     * are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,</div><div class="line">     * the digits for hexadecimal (radix 16) are</div><div class="line">     * &#123;<span class="doctag">@code</span> 0123456789abcdef&#125;. If uppercase letters are</div><div class="line">     * desired, the &#123;<span class="doctag">@link</span> java.lang.String#toUpperCase()&#125; method may</div><div class="line">     * be called on the result:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> Integer.toString(n, 16).toUpperCase()&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i       an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@param</span>   radix   the radix to use in the string representation.</div><div class="line">     * <span class="doctag">@return</span>  a string representation of the argument in the specified radix.</div><div class="line">     * <span class="doctag">@see</span>     java.lang.Character#MAX_RADIX</div><div class="line">     * <span class="doctag">@see</span>     java.lang.Character#MIN_RADIX</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> radix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX || radix &gt; Character.MAX_RADIX)</div><div class="line">            radix = <span class="number">10</span>;</div><div class="line"></div><div class="line">        <span class="comment">/* Use the faster version */</span></div><div class="line">        <span class="keyword">if</span> (radix == <span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">return</span> toString(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">33</span>];</div><div class="line">        <span class="keyword">boolean</span> negative = (i &lt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> charPos = <span class="number">32</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!negative) &#123;</div><div class="line">            i = -i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt;= -radix) &#123;</div><div class="line">            buf[charPos--] = digits[-(i % radix)];</div><div class="line">            i = i / radix;</div><div class="line">        &#125;</div><div class="line">        buf[charPos] = digits[-i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (negative) &#123;</div><div class="line">            buf[--charPos] = <span class="string">'-'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, charPos, (<span class="number">33</span> - charPos));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the first argument as an</div><div class="line">     * unsigned integer value in the radix specified by the second</div><div class="line">     * argument.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the radix is smaller than &#123;<span class="doctag">@code</span> Character.MIN_RADIX&#125;</div><div class="line">     * or larger than &#123;<span class="doctag">@code</span> Character.MAX_RADIX&#125;, then the radix</div><div class="line">     * &#123;<span class="doctag">@code</span> 10&#125; is used instead.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that since the first argument is treated as an unsigned</div><div class="line">     * value, no leading sign character is printed.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the magnitude is zero, it is represented by a single zero</div><div class="line">     * character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;); otherwise,</div><div class="line">     * the first character of the representation of the magnitude will</div><div class="line">     * not be the zero character.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The behavior of radixes and the characters used as digits</div><div class="line">     * are the same as &#123;<span class="doctag">@link</span> #toString(int, int) toString&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i       an integer to be converted to an unsigned string.</div><div class="line">     * <span class="doctag">@param</span>   radix   the radix to use in the string representation.</div><div class="line">     * <span class="doctag">@return</span>  an unsigned string representation of the argument in the specified radix.</div><div class="line">     * <span class="doctag">@see</span>     #toString(int, int)</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toUnsignedString</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> radix)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Long.toUnsignedString(toUnsignedLong(i), radix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the integer argument as an</div><div class="line">     * unsigned integer in base&amp;nbsp;16.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;</div><div class="line">     * if the argument is negative; otherwise, it is equal to the</div><div class="line">     * argument.  This value is converted to a string of ASCII digits</div><div class="line">     * in hexadecimal (base&amp;nbsp;16) with no extra leading</div><div class="line">     * &#123;<span class="doctag">@code</span> 0&#125;s.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The value of the argument can be recovered from the returned</div><div class="line">     * string &#123;<span class="doctag">@code</span> s&#125; by calling &#123;<span class="doctag">@link</span></div><div class="line">     * Integer#parseUnsignedInt(String, int)</div><div class="line">     * Integer.parseUnsignedInt(s, 16)&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the unsigned magnitude is zero, it is represented by a</div><div class="line">     * single zero character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;);</div><div class="line">     * otherwise, the first character of the representation of the</div><div class="line">     * unsigned magnitude will not be the zero character. The</div><div class="line">     * following characters are used as hexadecimal digits:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> 0123456789abcdef&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * These are the characters &#123;<span class="doctag">@code</span> '\u005Cu0030'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0039'&#125; and &#123;<span class="doctag">@code</span> '\u005Cu0061'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0066'&#125;. If uppercase letters are</div><div class="line">     * desired, the &#123;<span class="doctag">@link</span> java.lang.String#toUpperCase()&#125; method may</div><div class="line">     * be called on the result:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> Integer.toHexString(n).toUpperCase()&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@return</span>  the string representation of the unsigned integer value</div><div class="line">     *          represented by the argument in hexadecimal (base&amp;nbsp;16).</div><div class="line">     * <span class="doctag">@see</span> #parseUnsignedInt(String, int)</div><div class="line">     * <span class="doctag">@see</span> #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span>   JDK1.0.2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toUnsignedString0(i, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the integer argument as an</div><div class="line">     * unsigned integer in base&amp;nbsp;8.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;</div><div class="line">     * if the argument is negative; otherwise, it is equal to the</div><div class="line">     * argument.  This value is converted to a string of ASCII digits</div><div class="line">     * in octal (base&amp;nbsp;8) with no extra leading &#123;<span class="doctag">@code</span> 0&#125;s.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The value of the argument can be recovered from the returned</div><div class="line">     * string &#123;<span class="doctag">@code</span> s&#125; by calling &#123;<span class="doctag">@link</span></div><div class="line">     * Integer#parseUnsignedInt(String, int)</div><div class="line">     * Integer.parseUnsignedInt(s, 8)&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the unsigned magnitude is zero, it is represented by a</div><div class="line">     * single zero character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;);</div><div class="line">     * otherwise, the first character of the representation of the</div><div class="line">     * unsigned magnitude will not be the zero character. The</div><div class="line">     * following characters are used as octal digits:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     * &#123;<span class="doctag">@code</span> 01234567&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * These are the characters &#123;<span class="doctag">@code</span> '\u005Cu0030'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0037'&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@return</span>  the string representation of the unsigned integer value</div><div class="line">     *          represented by the argument in octal (base&amp;nbsp;8).</div><div class="line">     * <span class="doctag">@see</span> #parseUnsignedInt(String, int)</div><div class="line">     * <span class="doctag">@see</span> #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span>   JDK1.0.2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toOctalString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toUnsignedString0(i, <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the integer argument as an</div><div class="line">     * unsigned integer in base&amp;nbsp;2.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;</div><div class="line">     * if the argument is negative; otherwise it is equal to the</div><div class="line">     * argument.  This value is converted to a string of ASCII digits</div><div class="line">     * in binary (base&amp;nbsp;2) with no extra leading &#123;<span class="doctag">@code</span> 0&#125;s.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The value of the argument can be recovered from the returned</div><div class="line">     * string &#123;<span class="doctag">@code</span> s&#125; by calling &#123;<span class="doctag">@link</span></div><div class="line">     * Integer#parseUnsignedInt(String, int)</div><div class="line">     * Integer.parseUnsignedInt(s, 2)&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the unsigned magnitude is zero, it is represented by a</div><div class="line">     * single zero character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;);</div><div class="line">     * otherwise, the first character of the representation of the</div><div class="line">     * unsigned magnitude will not be the zero character. The</div><div class="line">     * characters &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;) and &#123;<span class="doctag">@code</span></div><div class="line">     * '1'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0031'&#125;) are used as binary digits.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@return</span>  the string representation of the unsigned integer value</div><div class="line">     *          represented by the argument in binary (base&amp;nbsp;2).</div><div class="line">     * <span class="doctag">@see</span> #parseUnsignedInt(String, int)</div><div class="line">     * <span class="doctag">@see</span> #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span>   JDK1.0.2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toBinaryString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toUnsignedString0(i, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Convert the integer to an unsigned number.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toUnsignedString0</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> shift)</span> </span>&#123;</div><div class="line">        <span class="comment">// assert shift &gt; 0 &amp;&amp; shift &lt;=5 : "Illegal shift value";</span></div><div class="line">        <span class="keyword">int</span> mag = Integer.SIZE - Integer.numberOfLeadingZeros(val);</div><div class="line">        <span class="keyword">int</span> chars = Math.max(((mag + (shift - <span class="number">1</span>)) / shift), <span class="number">1</span>);</div><div class="line">        <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[chars];</div><div class="line"></div><div class="line">        formatUnsignedInt(val, shift, buf, <span class="number">0</span>, chars);</div><div class="line"></div><div class="line">        <span class="comment">// Use special constructor which takes over "buf".</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Format a long (treated as unsigned) into a character buffer.</div><div class="line">     * <span class="doctag">@param</span> val the unsigned int to format</div><div class="line">     * <span class="doctag">@param</span> shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)</div><div class="line">     * <span class="doctag">@param</span> buf the character buffer to write to</div><div class="line">     * <span class="doctag">@param</span> offset the offset in the destination buffer to start at</div><div class="line">     * <span class="doctag">@param</span> len the number of characters to write</div><div class="line">     * <span class="doctag">@return</span> the lowest character  location used</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">formatUnsignedInt</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> shift, <span class="keyword">char</span>[] buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> charPos = len;</div><div class="line">        <span class="keyword">int</span> radix = <span class="number">1</span> &lt;&lt; shift;</div><div class="line">        <span class="keyword">int</span> mask = radix - <span class="number">1</span>;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            buf[offset + --charPos] = Integer.digits[val &amp; mask];</div><div class="line">            val &gt;&gt;&gt;= shift;</div><div class="line">        &#125; <span class="keyword">while</span> (val != <span class="number">0</span> &amp;&amp; charPos &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> charPos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//100以内的数字除以10的结果（取整），</span></div><div class="line">    <span class="comment">//比如取DigitTens[78]，返回的是数字7</span></div><div class="line">    <span class="comment">//只要是70-79的数字，返回的都是7，依次类推，所以总结出规律，其实就是返回的对应数字除10取整的结果。</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span> [] DigitTens = &#123;</div><div class="line">            <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>,</div><div class="line">            <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>,</div><div class="line">            <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>,</div><div class="line">            <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>,</div><div class="line">            <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>,</div><div class="line">            <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>,</div><div class="line">            <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>,</div><div class="line">            <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>,</div><div class="line">            <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>,</div><div class="line">            <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>,</div><div class="line">    &#125; ;</div><div class="line"></div><div class="line">    <span class="comment">//100以内的数字对10取模的结果，</span></div><div class="line">    <span class="comment">//比如取DigitTens[78]，返回的8</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span> [] DigitOnes = &#123;</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">    &#125; ;</div><div class="line"></div><div class="line">    <span class="comment">// I use the "invariant division by multiplication" trick to</span></div><div class="line">    <span class="comment">// accelerate Integer.toString.  In particular we want to</span></div><div class="line">    <span class="comment">// avoid division by 10.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// The "trick" has roughly the same performance characteristics</span></div><div class="line">    <span class="comment">// as the "classic" Integer.toString code on a non-JIT VM.</span></div><div class="line">    <span class="comment">// The trick avoids .rem and .div calls but has a longer code</span></div><div class="line">    <span class="comment">// path and is thus dominated by dispatch overhead.  In the</span></div><div class="line">    <span class="comment">// JIT case the dispatch overhead doesn't exist and the</span></div><div class="line">    <span class="comment">// "trick" is considerably faster than the classic code.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// TODO-<span class="doctag">FIXME:</span> convert (x * 52429) into the equiv shift-add</span></div><div class="line">    <span class="comment">// sequence.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// RE:  Division by Invariant Integers using Multiplication</span></div><div class="line">    <span class="comment">//      T Gralund, P Montgomery</span></div><div class="line">    <span class="comment">//      ACM PLDI 1994</span></div><div class="line">    <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a &#123;<span class="doctag">@code</span> String&#125; object representing the</div><div class="line">     * specified integer. The argument is converted to signed decimal</div><div class="line">     * representation and returned as a string, exactly as if the</div><div class="line">     * argument and radix 10 were given as arguments to the &#123;<span class="doctag">@link</span></div><div class="line">     * #toString(int, int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted.</div><div class="line">     * <span class="doctag">@return</span>  a string representation of the argument in base&amp;nbsp;10.</div><div class="line">     */</div><div class="line">    <span class="comment">// 把一个int类型的数字转换成字符串类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// 将-2147483648的值直接返回的原因就是整数最大只能表示2147483647，否则下面的stringSize(-i)不能表示</span></div><div class="line">        <span class="keyword">if</span> (i == Integer.MIN_VALUE)</div><div class="line">            <span class="keyword">return</span> <span class="string">"-2147483648"</span>;</div><div class="line">        <span class="comment">// 主要目的是体取出整数i的位数设，当i&lt;0的时候返回的size数组在stringSize方法的基础上+1的目的是这一位用来存储负号</span></div><div class="line">        <span class="keyword">int</span> size = (i &lt; <span class="number">0</span>) ? stringSize(-i) + <span class="number">1</span> : stringSize(i);</div><div class="line">        <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[size];</div><div class="line">        getChars(i, size, buf);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the argument as an unsigned</div><div class="line">     * decimal value.</div><div class="line">     *</div><div class="line">     * The argument is converted to unsigned decimal representation</div><div class="line">     * and returned as a string exactly as if the argument and radix</div><div class="line">     * 10 were given as arguments to the &#123;<span class="doctag">@link</span> #toUnsignedString(int,</div><div class="line">     * int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i  an integer to be converted to an unsigned string.</div><div class="line">     * <span class="doctag">@return</span>  an unsigned string representation of the argument.</div><div class="line">     * <span class="doctag">@see</span>     #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toUnsignedString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Long.toString(toUnsignedLong(i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Places characters representing the integer i into the</div><div class="line">     * character array buf. The characters are placed into</div><div class="line">     * the buffer backwards starting with the least significant</div><div class="line">     * digit at the specified index (exclusive), and working</div><div class="line">     * backwards from there.</div><div class="line">     *</div><div class="line">     * Will fail if i == Integer.MIN_VALUE</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getChars</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> index, <span class="keyword">char</span>[] buf)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> q, r;</div><div class="line">        <span class="keyword">int</span> charPos = index;</div><div class="line">        <span class="keyword">char</span> sign = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</div><div class="line">            sign = <span class="string">'-'</span>;</div><div class="line">            i = -i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Generate two digits per iteration</span></div><div class="line">        <span class="comment">// 每次循环过后，都会将i中的走后两位保存到字符数组buf中的最后两位中，读者可以将数字i设置为12345678测试一下，</span></div><div class="line">        <span class="comment">// 第一次循环结束之后，buf[7] = 8,buf[6]=7。第二次循环结束之后，buf[5] = 6,buf[4] = 5。</span></div><div class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">65536</span>) &#123;</div><div class="line">            q = i / <span class="number">100</span>;</div><div class="line">            <span class="comment">// really: r = i - (q * 100);</span></div><div class="line">            r = i - ((q &lt;&lt; <span class="number">6</span>) + (q &lt;&lt; <span class="number">5</span>) + (q &lt;&lt; <span class="number">2</span>));</div><div class="line">            i = q;</div><div class="line">            <span class="comment">//取DigitOnes[r]的目的其实取数字r%10的结果</span></div><div class="line">            buf [--charPos] = DigitOnes[r];</div><div class="line">            <span class="comment">//取DigitTens[r]的目的其实是取数字r/10的结果</span></div><div class="line">            buf [--charPos] = DigitTens[r];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Fall thru to fast mode for smaller numbers</span></div><div class="line">        <span class="comment">// assert(i &lt;= 65536, i);</span></div><div class="line">        <span class="comment">// //循环将其他数字存入字符数组中空余位置</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="comment">// 这里其实就是除以10</span></div><div class="line">            q = (i * <span class="number">52429</span>) &gt;&gt;&gt; (<span class="number">16</span>+<span class="number">3</span>);</div><div class="line">            <span class="comment">//将数字i的最后一位存入字符数组，</span></div><div class="line">            <span class="comment">//还是12345678那个例子，这个for循环第一次结束后，buf[3]=4。</span></div><div class="line">            r = i - ((q &lt;&lt; <span class="number">3</span>) + (q &lt;&lt; <span class="number">1</span>));  <span class="comment">// r = i-(q*10) ...</span></div><div class="line">            buf [--charPos] = digits [r];</div><div class="line">            i = q;</div><div class="line">            <span class="comment">//for循环结束后，buf内容为“12345678”；</span></div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sign != <span class="number">0</span>) &#123;</div><div class="line">            buf [--charPos] = sign;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sizeTable = &#123; <span class="number">9</span>, <span class="number">99</span>, <span class="number">999</span>, <span class="number">9999</span>, <span class="number">99999</span>, <span class="number">999999</span>, <span class="number">9999999</span>,</div><div class="line">            <span class="number">99999999</span>, <span class="number">999999999</span>, Integer.MAX_VALUE &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Requires positive x</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stringSize</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="comment">// 基于范围的查找</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; ; i++)</div><div class="line">            <span class="keyword">if</span> (x &lt;= sizeTable[i])</div><div class="line">                <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as a signed integer in the radix</div><div class="line">     * specified by the second argument. The characters in the string</div><div class="line">     * must all be digits of the specified radix (as determined by</div><div class="line">     * whether &#123;<span class="doctag">@link</span> java.lang.Character#digit(char, int)&#125; returns a</div><div class="line">     * nonnegative value), except that the first character may be an</div><div class="line">     * ASCII minus sign &#123;<span class="doctag">@code</span> '-'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;) to</div><div class="line">     * indicate a negative value or an ASCII plus sign &#123;<span class="doctag">@code</span> '+'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) to indicate a positive value. The</div><div class="line">     * resulting integer value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;An exception of type &#123;<span class="doctag">@code</span> NumberFormatException&#125; is</div><div class="line">     * thrown if any of the following situations occurs:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;The first argument is &#123;<span class="doctag">@code</span> null&#125; or is a string of</div><div class="line">     * length zero.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The radix is either smaller than</div><div class="line">     * &#123;<span class="doctag">@link</span> java.lang.Character#MIN_RADIX&#125; or</div><div class="line">     * larger than &#123;<span class="doctag">@link</span> java.lang.Character#MAX_RADIX&#125;.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;Any character of the string is not a digit of the specified</div><div class="line">     * radix, except that the first character may be a minus sign</div><div class="line">     * &#123;<span class="doctag">@code</span> '-'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;) or plus sign</div><div class="line">     * &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) provided that the</div><div class="line">     * string is longer than length 1.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The value represented by the string is not a value of type</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Examples:</div><div class="line">     * &lt;blockquote&gt;&lt;pre&gt;</div><div class="line">     * parseInt("0", 10) returns 0</div><div class="line">     * parseInt("473", 10) returns 473</div><div class="line">     * parseInt("+42", 10) returns 42</div><div class="line">     * parseInt("-0", 10) returns 0</div><div class="line">     * parseInt("-FF", 16) returns -255</div><div class="line">     * parseInt("1100110", 2) returns 102</div><div class="line">     * parseInt("2147483647", 10) returns 2147483647</div><div class="line">     * parseInt("-2147483648", 10) returns -2147483648</div><div class="line">     * parseInt("2147483648", 10) throws a NumberFormatException</div><div class="line">     * parseInt("99", 8) throws a NumberFormatException</div><div class="line">     * parseInt("Kona", 10) throws a NumberFormatException</div><div class="line">     * parseInt("Kona", 27) returns 411787</div><div class="line">     * &lt;/pre&gt;&lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the &#123;<span class="doctag">@code</span> String&#125; containing the integer</div><div class="line">     *                  representation to be parsed</div><div class="line">     * <span class="doctag">@param</span>      radix   the radix to be used while parsing &#123;<span class="doctag">@code</span> s&#125;.</div><div class="line">     * <span class="doctag">@return</span>     the integer represented by the string argument in the</div><div class="line">     *             specified radix.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException if the &#123;<span class="doctag">@code</span> String&#125;</div><div class="line">     *             does not contain a parsable &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     */</div><div class="line">    <span class="comment">// 使用第二个参数指定的基数(如果没指定，则按照十进制处理），将字符串参数解析为有符号的整数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></div><div class="line">            <span class="keyword">throws</span> NumberFormatException</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * WARNING: This method may be invoked early during VM initialization</div><div class="line">         * before IntegerCache is initialized. Care must be taken to not use</div><div class="line">         * the valueOf method.</div><div class="line">         */</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</div><div class="line">                    <span class="string">" less than Character.MIN_RADIX"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (radix &gt; Character.MAX_RADIX) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</div><div class="line">                    <span class="string">" greater than Character.MAX_RADIX"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, len = s.length();</div><div class="line">        <span class="keyword">int</span> limit = -Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> multmin;</div><div class="line">        <span class="keyword">int</span> digit;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">char</span> firstChar = s.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (firstChar &lt; <span class="string">'0'</span>) &#123; <span class="comment">// Possible leading "+" or "-"</span></div><div class="line">                <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">                    negative = <span class="keyword">true</span>;</div><div class="line">                    limit = Integer.MIN_VALUE;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar != <span class="string">'+'</span>)</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="comment">// Cannot have lone "+" or "-"</span></div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            multmin = limit / radix;</div><div class="line">            <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">                <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></div><div class="line">                digit = Character.digit(s.charAt(i++),radix);</div><div class="line">                <span class="keyword">if</span> (digit &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (result &lt; multmin) &#123;</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                &#125;</div><div class="line">                result *= radix;</div><div class="line">                <span class="keyword">if</span> (result &lt; limit + digit) &#123;</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                &#125;</div><div class="line">                result -= digit;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> negative ? result : -result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as a signed decimal integer. The</div><div class="line">     * characters in the string must all be decimal digits, except</div><div class="line">     * that the first character may be an ASCII minus sign &#123;<span class="doctag">@code</span> '-'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;) to indicate a negative value or an</div><div class="line">     * ASCII plus sign &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) to</div><div class="line">     * indicate a positive value. The resulting integer value is</div><div class="line">     * returned, exactly as if the argument and the radix 10 were</div><div class="line">     * given as arguments to the &#123;<span class="doctag">@link</span> #parseInt(java.lang.String,</div><div class="line">     * int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> s    a &#123;<span class="doctag">@code</span> String&#125; containing the &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     *             representation to be parsed</div><div class="line">     * <span class="doctag">@return</span>     the integer value represented by the argument in decimal.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException  if the string does not contain a</div><div class="line">     *               parsable integer.</div><div class="line">     */</div><div class="line">    <span class="comment">// 调用栈其实是getInteger(String nm) -&gt; getInteger(nm, null); -&gt;Integer.decode()-&gt;Integer.valueOf()-&gt;parseInt()</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> parseInt(s,<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as an unsigned integer in the radix</div><div class="line">     * specified by the second argument.  An unsigned integer maps the</div><div class="line">     * values usually associated with negative numbers to positive</div><div class="line">     * numbers larger than &#123;<span class="doctag">@code</span> MAX_VALUE&#125;.</div><div class="line">     *</div><div class="line">     * The characters in the string must all be digits of the</div><div class="line">     * specified radix (as determined by whether &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.Character#digit(char, int)&#125; returns a nonnegative</div><div class="line">     * value), except that the first character may be an ASCII plus</div><div class="line">     * sign &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;). The resulting</div><div class="line">     * integer value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;An exception of type &#123;<span class="doctag">@code</span> NumberFormatException&#125; is</div><div class="line">     * thrown if any of the following situations occurs:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;The first argument is &#123;<span class="doctag">@code</span> null&#125; or is a string of</div><div class="line">     * length zero.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The radix is either smaller than</div><div class="line">     * &#123;<span class="doctag">@link</span> java.lang.Character#MIN_RADIX&#125; or</div><div class="line">     * larger than &#123;<span class="doctag">@link</span> java.lang.Character#MAX_RADIX&#125;.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;Any character of the string is not a digit of the specified</div><div class="line">     * radix, except that the first character may be a plus sign</div><div class="line">     * &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) provided that the</div><div class="line">     * string is longer than length 1.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The value represented by the string is larger than the</div><div class="line">     * largest unsigned &#123;<span class="doctag">@code</span> int&#125;, 2&lt;sup&gt;32&lt;/sup&gt;-1.</div><div class="line">     *</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the &#123;<span class="doctag">@code</span> String&#125; containing the unsigned integer</div><div class="line">     *                  representation to be parsed</div><div class="line">     * <span class="doctag">@param</span>      radix   the radix to be used while parsing &#123;<span class="doctag">@code</span> s&#125;.</div><div class="line">     * <span class="doctag">@return</span>     the integer represented by the string argument in the</div><div class="line">     *             specified radix.</div><div class="line">     * <span class="doctag">@throws</span>     NumberFormatException if the &#123;<span class="doctag">@code</span> String&#125;</div><div class="line">     *             does not contain a parsable &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="comment">// 将String类型的值转成Integer(int)类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseUnsignedInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></div><div class="line">            <span class="keyword">throws</span> NumberFormatException &#123;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)  &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">char</span> firstChar = s.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span></div><div class="line">                        NumberFormatException(String.format(<span class="string">"Illegal leading minus sign "</span> +</div><div class="line">                        <span class="string">"on unsigned string %s."</span>, s));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (len &lt;= <span class="number">5</span> || <span class="comment">// Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits</span></div><div class="line">                        (radix == <span class="number">10</span> &amp;&amp; len &lt;= <span class="number">9</span>) ) &#123; <span class="comment">// Integer.MAX_VALUE in base 10 is 10 digits</span></div><div class="line">                    <span class="keyword">return</span> parseInt(s, radix);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">long</span> ell = Long.parseLong(s, radix);</div><div class="line">                    <span class="keyword">if</span> ((ell &amp; <span class="number">0xffff_ffff_0000_0000L</span>) == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> (<span class="keyword">int</span>) ell;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span></div><div class="line">                                NumberFormatException(String.format(<span class="string">"String value %s exceeds "</span> +</div><div class="line">                                <span class="string">"range of unsigned int."</span>, s));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as an unsigned decimal integer. The</div><div class="line">     * characters in the string must all be decimal digits, except</div><div class="line">     * that the first character may be an an ASCII plus sign &#123;<span class="doctag">@code</span></div><div class="line">     * '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;). The resulting integer value</div><div class="line">     * is returned, exactly as if the argument and the radix 10 were</div><div class="line">     * given as arguments to the &#123;<span class="doctag">@link</span></div><div class="line">     * #parseUnsignedInt(java.lang.String, int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> s   a &#123;<span class="doctag">@code</span> String&#125; containing the unsigned &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     *            representation to be parsed</div><div class="line">     * <span class="doctag">@return</span>    the unsigned integer value represented by the argument in decimal.</div><div class="line">     * <span class="doctag">@throws</span>    NumberFormatException  if the string does not contain a</div><div class="line">     *            parsable unsigned integer.</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="comment">//将String类型的值转成Integer(int)类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseUnsignedInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> parseUnsignedInt(s, <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; object holding the value</div><div class="line">     * extracted from the specified &#123;<span class="doctag">@code</span> String&#125; when parsed</div><div class="line">     * with the radix given by the second argument. The first argument</div><div class="line">     * is interpreted as representing a signed integer in the radix</div><div class="line">     * specified by the second argument, exactly as if the arguments</div><div class="line">     * were given to the &#123;<span class="doctag">@link</span> #parseInt(java.lang.String, int)&#125;</div><div class="line">     * method. The result is an &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the integer value specified by the string.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> new Integer(Integer.parseInt(s, radix))&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the string to be parsed.</div><div class="line">     * <span class="doctag">@param</span>      radix the radix to be used in interpreting &#123;<span class="doctag">@code</span> s&#125;</div><div class="line">     * <span class="doctag">@return</span>     an &#123;<span class="doctag">@code</span> Integer&#125; object holding the value</div><div class="line">     *             represented by the string argument in the specified</div><div class="line">     *             radix.</div><div class="line">     * <span class="doctag">@exception</span> NumberFormatException if the &#123;<span class="doctag">@code</span> String&#125;</div><div class="line">     *            does not contain a parsable &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     */</div><div class="line">    <span class="comment">// 返回一个 Integer 对象。如果指定第二个参数radix，将第一个参数解释为用第二个参数指定的基数表示的有符号整数。如果没指定则按照十进制进行处理。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String s, <span class="keyword">int</span> radix)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.valueOf(parseInt(s,radix));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; object holding the</div><div class="line">     * value of the specified &#123;<span class="doctag">@code</span> String&#125;. The argument is</div><div class="line">     * interpreted as representing a signed decimal integer, exactly</div><div class="line">     * as if the argument were given to the &#123;<span class="doctag">@link</span></div><div class="line">     * #parseInt(java.lang.String)&#125; method. The result is an</div><div class="line">     * &#123;<span class="doctag">@code</span> Integer&#125; object that represents the integer value</div><div class="line">     * specified by the string.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> new Integer(Integer.parseInt(s))&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the string to be parsed.</div><div class="line">     * <span class="doctag">@return</span>     an &#123;<span class="doctag">@code</span> Integer&#125; object holding the value</div><div class="line">     *             represented by the string argument.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException  if the string cannot be parsed</div><div class="line">     *             as an integer.</div><div class="line">     */</div><div class="line">    <span class="comment">// 返回一个 Integer 对象。如果指定第二个参数radix，将第一个参数解释为用第二个参数指定的基数表示的有符号整数。如果没指定则按照十进制进行处理。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.valueOf(parseInt(s, <span class="number">10</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Cache to support the object identity semantics of autoboxing for values between</div><div class="line">     * -128 and 127 (inclusive) as required by JLS.</div><div class="line">     *</div><div class="line">     * The cache is initialized on first usage.  The size of the cache</div><div class="line">     * may be controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</div><div class="line">     * During VM initialization, java.lang.Integer.IntegerCache.high property</div><div class="line">     * may be set and saved in the private system properties in the</div><div class="line">     * sun.misc.VM class.</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="comment">// high value may be configured by property</span></div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                    sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</div><div class="line">     * required, this method should generally be used in preference to</div><div class="line">     * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</div><div class="line">     * to yield significantly better space and time performance by</div><div class="line">     * caching frequently requested values.</div><div class="line">     *</div><div class="line">     * This method will always cache values in the range -128 to 127,</div><div class="line">     * inclusive, and may cache other values outside of this range.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</div><div class="line">     * <span class="doctag">@since</span>  1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The value of the &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     * 私有属性，保存于基本数据类型对应的值</div><div class="line">     * <span class="doctag">@serial</span></div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   value   the value to be represented by the</div><div class="line">     *                  &#123;<span class="doctag">@code</span> Integer&#125; object.</div><div class="line">     */</div><div class="line">    <span class="comment">// 构造方法，构造一个新分配的 Integer 对象，它表示指定的 int 值。 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the &#123;<span class="doctag">@code</span> int&#125; value indicated by the</div><div class="line">     * &#123;<span class="doctag">@code</span> String&#125; parameter. The string is converted to an</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value in exactly the manner used by the</div><div class="line">     * &#123;<span class="doctag">@code</span> parseInt&#125; method for radix 10.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the &#123;<span class="doctag">@code</span> String&#125; to be converted to an</div><div class="line">     *                 &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException  if the &#123;<span class="doctag">@code</span> String&#125; does not</div><div class="line">     *               contain a parsable integer.</div><div class="line">     * <span class="doctag">@see</span>        java.lang.Integer#parseInt(java.lang.String, int)</div><div class="line">     */</div><div class="line">    <span class="comment">// 构造方法，构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = parseInt(s, <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> byte&#125;</div><div class="line">     * after a narrowing primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.3 Narrowing Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">byteValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">byte</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> short&#125;</div><div class="line">     * after a narrowing primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.3 Narrowing Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">short</span> <span class="title">shortValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">short</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as an</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> long&#125;</div><div class="line">     * after a widening primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</div><div class="line">     * <span class="doctag">@see</span> Integer#toUnsignedLong(int)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> float&#125;</div><div class="line">     * after a widening primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> double&#125;</div><div class="line">     * after a widening primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a &#123;<span class="doctag">@code</span> String&#125; object representing this</div><div class="line">     * &#123;<span class="doctag">@code</span> Integer&#125;'s value. The value is converted to signed</div><div class="line">     * decimal representation and returned as a string, exactly as if</div><div class="line">     * the integer value were given as an argument to the &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.Integer#toString(int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  a string representation of the value of this object in</div><div class="line">     *          base&amp;nbsp;10.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toString(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a hash code for this &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  a hash code value for this object, equal to the</div><div class="line">     *          primitive &#123;<span class="doctag">@code</span> int&#125; value represented by this</div><div class="line">     *          &#123;<span class="doctag">@code</span> Integer&#125; object.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.hashCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a hash code for a &#123;<span class="doctag">@code</span> int&#125; value; compatible with</div><div class="line">     * &#123;<span class="doctag">@code</span> Integer.hashCode()&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value the value to hash</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a hash code value for a &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares this object to the specified object.  The result is</div><div class="line">     * &#123;<span class="doctag">@code</span> true&#125; if and only if the argument is not</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125; and is an &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * contains the same &#123;<span class="doctag">@code</span> int&#125; value as this object.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   obj   the object to compare with.</div><div class="line">     * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the objects are the same;</div><div class="line">     *          &#123;<span class="doctag">@code</span> false&#125; otherwise.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</div><div class="line">            <span class="keyword">return</span> value == ((Integer)obj).intValue();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Determines the integer value of the system property with the</div><div class="line">     * specified name.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The first argument is treated as the name of a system</div><div class="line">     * property.  System properties are accessible through the &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.System#getProperty(java.lang.String)&#125; method. The</div><div class="line">     * string value of this property is then interpreted as an integer</div><div class="line">     * value using the grammar supported by &#123;<span class="doctag">@link</span> Integer#decode decode&#125; and</div><div class="line">     * an &#123;<span class="doctag">@code</span> Integer&#125; object representing this value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If there is no property with the specified name, if the</div><div class="line">     * specified name is empty or &#123;<span class="doctag">@code</span> null&#125;, or if the property</div><div class="line">     * does not have the correct numeric format, then &#123;<span class="doctag">@code</span> null&#125; is</div><div class="line">     * returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> getInteger(nm, null)&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   nm   property name.</div><div class="line">     * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> Integer&#125; value of the property.</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException for the same reasons as</div><div class="line">     *          &#123;<span class="doctag">@link</span> System#getProperty(String) System.getProperty&#125;</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String)</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String, java.lang.String)</div><div class="line">     */</div><div class="line">    <span class="comment">// 确定具有指定名称的系统属性的整数值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getInteger(nm, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Determines the integer value of the system property with the</div><div class="line">     * specified name.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The first argument is treated as the name of a system</div><div class="line">     * property.  System properties are accessible through the &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.System#getProperty(java.lang.String)&#125; method. The</div><div class="line">     * string value of this property is then interpreted as an integer</div><div class="line">     * value using the grammar supported by &#123;<span class="doctag">@link</span> Integer#decode decode&#125; and</div><div class="line">     * an &#123;<span class="doctag">@code</span> Integer&#125; object representing this value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The second argument is the default value. An &#123;<span class="doctag">@code</span> Integer&#125; object</div><div class="line">     * that represents the value of the second argument is returned if there</div><div class="line">     * is no property of the specified name, if the property does not have</div><div class="line">     * the correct numeric format, or if the specified name is empty or</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125; object</div><div class="line">     * equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> getInteger(nm, new Integer(val))&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * but in practice it may be implemented in a manner such as:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;&lt;pre&gt;</div><div class="line">     * Integer result = getInteger(nm, null);</div><div class="line">     * return (result == null) ? new Integer(val) : result;</div><div class="line">     * &lt;/pre&gt;&lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * to avoid the unnecessary allocation of an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object when the default value is not needed.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   nm   property name.</div><div class="line">     * <span class="doctag">@param</span>   val   default value.</div><div class="line">     * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> Integer&#125; value of the property.</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException for the same reasons as</div><div class="line">     *          &#123;<span class="doctag">@link</span> System#getProperty(String) System.getProperty&#125;</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String)</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String, java.lang.String)</div><div class="line">     */</div><div class="line">    <span class="comment">// 确定具有指定名称的系统属性的整数值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        Integer result = getInteger(nm, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> (result == <span class="keyword">null</span>) ? Integer.valueOf(val) : result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the integer value of the system property with the</div><div class="line">     * specified name.  The first argument is treated as the name of a</div><div class="line">     * system property.  System properties are accessible through the</div><div class="line">     * &#123;<span class="doctag">@link</span> java.lang.System#getProperty(java.lang.String)&#125; method.</div><div class="line">     * The string value of this property is then interpreted as an</div><div class="line">     * integer value, as per the &#123;<span class="doctag">@link</span> Integer#decode decode&#125; method,</div><div class="line">     * and an &#123;<span class="doctag">@code</span> Integer&#125; object representing this value is</div><div class="line">     * returned; in summary:</div><div class="line">     *</div><div class="line">     * &lt;ul&gt;&lt;li&gt;If the property value begins with the two ASCII characters</div><div class="line">     *         &#123;<span class="doctag">@code</span> 0x&#125; or the ASCII character &#123;<span class="doctag">@code</span> #&#125;, not</div><div class="line">     *      followed by a minus sign, then the rest of it is parsed as a</div><div class="line">     *      hexadecimal integer exactly as by the method</div><div class="line">     *      &#123;<span class="doctag">@link</span> #valueOf(java.lang.String, int)&#125; with radix 16.</div><div class="line">     * &lt;li&gt;If the property value begins with the ASCII character</div><div class="line">     *     &#123;<span class="doctag">@code</span> 0&#125; followed by another character, it is parsed as an</div><div class="line">     *     octal integer exactly as by the method</div><div class="line">     *     &#123;<span class="doctag">@link</span> #valueOf(java.lang.String, int)&#125; with radix 8.</div><div class="line">     * &lt;li&gt;Otherwise, the property value is parsed as a decimal integer</div><div class="line">     * exactly as by the method &#123;<span class="doctag">@link</span> #valueOf(java.lang.String, int)&#125;</div><div class="line">     * with radix 10.</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The second argument is the default value. The default value is</div><div class="line">     * returned if there is no property of the specified name, if the</div><div class="line">     * property does not have the correct numeric format, or if the</div><div class="line">     * specified name is empty or &#123;<span class="doctag">@code</span> null&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   nm   property name.</div><div class="line">     * <span class="doctag">@param</span>   val   default value.</div><div class="line">     * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> Integer&#125; value of the property.</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException for the same reasons as</div><div class="line">     *          &#123;<span class="doctag">@link</span> System#getProperty(String) System.getProperty&#125;</div><div class="line">     * <span class="doctag">@see</span>     System#getProperty(java.lang.String)</div><div class="line">     * <span class="doctag">@see</span>     System#getProperty(java.lang.String, java.lang.String)</div><div class="line">     */</div><div class="line">    <span class="comment">// 确定具有指定名称的系统属性的整数值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm, Integer val)</span> </span>&#123;</div><div class="line">        String v = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            v = System.getProperty(nm);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException | NullPointerException e) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> Integer.decode(v);</div><div class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Decodes a &#123;<span class="doctag">@code</span> String&#125; into an &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     * Accepts decimal, hexadecimal, and octal numbers given</div><div class="line">     * by the following grammar:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     * &lt;dl&gt;</div><div class="line">     * &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> 0x&#125; &lt;i&gt;HexDigits&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> 0X&#125; &lt;i&gt;HexDigits&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> #&#125; &lt;i&gt;HexDigits&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> 0&#125; &lt;i&gt;OctalDigits&lt;/i&gt;</div><div class="line">     *</div><div class="line">     * &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&#123;<span class="doctag">@code</span> -&#125;</div><div class="line">     * &lt;dd&gt;&#123;<span class="doctag">@code</span> +&#125;</div><div class="line">     * &lt;/dl&gt;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;</div><div class="line">     * are as defined in section 3.10.1 of</div><div class="line">     * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;,</div><div class="line">     * except that underscores are not accepted between digits.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The sequence of characters following an optional</div><div class="line">     * sign and/or radix specifier ("&#123;<span class="doctag">@code</span> 0x&#125;", "&#123;<span class="doctag">@code</span> 0X&#125;",</div><div class="line">     * "&#123;<span class="doctag">@code</span> #&#125;", or leading zero) is parsed as by the &#123;<span class="doctag">@code</span></div><div class="line">     * Integer.parseInt&#125; method with the indicated radix (10, 16, or</div><div class="line">     * 8).  This sequence of characters must represent a positive</div><div class="line">     * value or a &#123;<span class="doctag">@link</span> NumberFormatException&#125; will be thrown.  The</div><div class="line">     * result is negated if first character of the specified &#123;<span class="doctag">@code</span></div><div class="line">     * String&#125; is the minus sign.  No whitespace characters are</div><div class="line">     * permitted in the &#123;<span class="doctag">@code</span> String&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>     nm the &#123;<span class="doctag">@code</span> String&#125; to decode.</div><div class="line">     * <span class="doctag">@return</span>    an &#123;<span class="doctag">@code</span> Integer&#125; object holding the &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     *             value represented by &#123;<span class="doctag">@code</span> nm&#125;</div><div class="line">     * <span class="doctag">@exception</span> NumberFormatException  if the &#123;<span class="doctag">@code</span> String&#125; does not</div><div class="line">     *            contain a parsable integer.</div><div class="line">     * <span class="doctag">@see</span> java.lang.Integer#parseInt(java.lang.String, int)</div><div class="line">     */</div><div class="line">    <span class="comment">// 该方法的作用是将 String 解码为 Integer。接受十进制、十六进制和八进制数字</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">decode</span><span class="params">(String nm)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">int</span> radix = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</div><div class="line">        Integer result;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (nm.length() == <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"Zero length string"</span>);</div><div class="line">        <span class="keyword">char</span> firstChar = nm.charAt(<span class="number">0</span>);</div><div class="line">        <span class="comment">// Handle sign, if present</span></div><div class="line">        <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">            negative = <span class="keyword">true</span>;</div><div class="line">            index++;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar == <span class="string">'+'</span>)</div><div class="line">            index++;</div><div class="line"></div><div class="line">        <span class="comment">// Handle radix specifier, if present</span></div><div class="line">        <span class="keyword">if</span> (nm.startsWith(<span class="string">"0x"</span>, index) || nm.startsWith(<span class="string">"0X"</span>, index)) &#123;</div><div class="line">            index += <span class="number">2</span>;</div><div class="line">            radix = <span class="number">16</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nm.startsWith(<span class="string">"#"</span>, index)) &#123;</div><div class="line">            index ++;</div><div class="line">            radix = <span class="number">16</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nm.startsWith(<span class="string">"0"</span>, index) &amp;&amp; nm.length() &gt; <span class="number">1</span> + index) &#123;</div><div class="line">            index ++;</div><div class="line">            radix = <span class="number">8</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (nm.startsWith(<span class="string">"-"</span>, index) || nm.startsWith(<span class="string">"+"</span>, index))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"Sign character in wrong position"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = Integer.valueOf(nm.substring(index), radix);</div><div class="line">            result = negative ? Integer.valueOf(-result.intValue()) : result;</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="comment">// If number is Integer.MIN_VALUE, we'll end up here. The next line</span></div><div class="line">            <span class="comment">// handles this case, and causes any genuine format error to be</span></div><div class="line">            <span class="comment">// rethrown.</span></div><div class="line">            String constant = negative ? (<span class="string">"-"</span> + nm.substring(index))</div><div class="line">                    : nm.substring(index);</div><div class="line">            result = Integer.valueOf(constant, radix);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares two &#123;<span class="doctag">@code</span> Integer&#125; objects numerically.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   anotherInteger   the &#123;<span class="doctag">@code</span> Integer&#125; to be compared.</div><div class="line">     * <span class="doctag">@return</span>  the value &#123;<span class="doctag">@code</span> 0&#125; if this &#123;<span class="doctag">@code</span> Integer&#125; is</div><div class="line">     *          equal to the argument &#123;<span class="doctag">@code</span> Integer&#125;; a value less than</div><div class="line">     *          &#123;<span class="doctag">@code</span> 0&#125; if this &#123;<span class="doctag">@code</span> Integer&#125; is numerically less</div><div class="line">     *          than the argument &#123;<span class="doctag">@code</span> Integer&#125;; and a value greater</div><div class="line">     *          than &#123;<span class="doctag">@code</span> 0&#125; if this &#123;<span class="doctag">@code</span> Integer&#125; is numerically</div><div class="line">     *           greater than the argument &#123;<span class="doctag">@code</span> Integer&#125; (signed</div><div class="line">     *           comparison).</div><div class="line">     * <span class="doctag">@since</span>   1.2</div><div class="line">     */</div><div class="line">    <span class="comment">// 很简单，直接比较</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares two &#123;<span class="doctag">@code</span> int&#125; values numerically.</div><div class="line">     * The value returned is identical to what would be returned by:</div><div class="line">     * &lt;pre&gt;</div><div class="line">     *    Integer.valueOf(x).compareTo(Integer.valueOf(y))</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  x the first &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@param</span>  y the second &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@return</span> the value &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x == y&#125;;</div><div class="line">     *         a value less than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &lt; y&#125;; and</div><div class="line">     *         a value greater than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &gt; y&#125;</div><div class="line">     * <span class="doctag">@since</span> 1.7</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares two &#123;<span class="doctag">@code</span> int&#125; values numerically treating the values</div><div class="line">     * as unsigned.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  x the first &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@param</span>  y the second &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@return</span> the value &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x == y&#125;; a value less</div><div class="line">     *         than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &lt; y&#125; as unsigned values; and</div><div class="line">     *         a value greater than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &gt; y&#125; as</div><div class="line">     *         unsigned values</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareUnsigned</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> compare(x + MIN_VALUE, y + MIN_VALUE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Converts the argument to a &#123;<span class="doctag">@code</span> long&#125; by an unsigned</div><div class="line">     * conversion.  In an unsigned conversion to a &#123;<span class="doctag">@code</span> long&#125;, the</div><div class="line">     * high-order 32 bits of the &#123;<span class="doctag">@code</span> long&#125; are zero and the</div><div class="line">     * low-order 32 bits are equal to the bits of the integer</div><div class="line">     * argument.</div><div class="line">     *</div><div class="line">     * Consequently, zero and positive &#123;<span class="doctag">@code</span> int&#125; values are mapped</div><div class="line">     * to a numerically equal &#123;<span class="doctag">@code</span> long&#125; value and negative &#123;<span class="doctag">@code</span></div><div class="line">     * int&#125; values are mapped to a &#123;<span class="doctag">@code</span> long&#125; value equal to the</div><div class="line">     * input plus 2&lt;sup&gt;32&lt;/sup&gt;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  x the value to convert to an unsigned &#123;<span class="doctag">@code</span> long&#125;</div><div class="line">     * <span class="doctag">@return</span> the argument converted to &#123;<span class="doctag">@code</span> long&#125; by an unsigned</div><div class="line">     *         conversion</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">toUnsignedLong</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((<span class="keyword">long</span>) x) &amp; <span class="number">0xffffffffL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the unsigned quotient of dividing the first argument by</div><div class="line">     * the second where each argument and the result is interpreted as</div><div class="line">     * an unsigned value.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that in two's complement arithmetic, the three other</div><div class="line">     * basic arithmetic operations of add, subtract, and multiply are</div><div class="line">     * bit-wise identical if the two operands are regarded as both</div><div class="line">     * being signed or both being unsigned.  Therefore separate &#123;<span class="doctag">@code</span></div><div class="line">     * addUnsigned&#125;, etc. methods are not provided.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dividend the value to be divided</div><div class="line">     * <span class="doctag">@param</span> divisor the value doing the dividing</div><div class="line">     * <span class="doctag">@return</span> the unsigned quotient of the first argument divided by</div><div class="line">     * the second argument</div><div class="line">     * <span class="doctag">@see</span> #remainderUnsigned</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divideUnsigned</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="comment">// In lieu of tricky code, for now just use long arithmetic.</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(toUnsignedLong(dividend) / toUnsignedLong(divisor));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the unsigned remainder from dividing the first argument</div><div class="line">     * by the second where each argument and the result is interpreted</div><div class="line">     * as an unsigned value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dividend the value to be divided</div><div class="line">     * <span class="doctag">@param</span> divisor the value doing the dividing</div><div class="line">     * <span class="doctag">@return</span> the unsigned remainder of the first argument divided by</div><div class="line">     * the second argument</div><div class="line">     * <span class="doctag">@see</span> #divideUnsigned</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">remainderUnsigned</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="comment">// In lieu of tricky code, for now just use long arithmetic.</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(toUnsignedLong(dividend) % toUnsignedLong(divisor));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Bit twiddling</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The number of bits used to represent an &#123;<span class="doctag">@code</span> int&#125; value in two's</div><div class="line">     * complement binary form.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="comment">//用来以二进制补码形式表示 int 值的比特位数。 </span></div><div class="line">    <span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">32</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The number of bytes used to represent a &#123;<span class="doctag">@code</span> int&#125; value in two's</div><div class="line">     * complement binary form.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="comment">//用来以二进制补码形式表示 int 值的字节数。1.8以后才有 </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BYTES = SIZE / Byte.SIZE;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> int&#125; value with at most a single one-bit, in the</div><div class="line">     * position of the highest-order ("leftmost") one-bit in the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  Returns zero if the specified value has no</div><div class="line">     * one-bits in its two's complement binary representation, that is, if it</div><div class="line">     * is equal to zero.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose highest one bit is to be computed</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> int&#125; value with a single one-bit, in the position</div><div class="line">     *     of the highest-order one-bit in the specified value, or zero if</div><div class="line">     *     the specified value is itself equal to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">highestOneBit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 3-1</span></div><div class="line">        i |= (i &gt;&gt;  <span class="number">1</span>);</div><div class="line">        i |= (i &gt;&gt;  <span class="number">2</span>);</div><div class="line">        i |= (i &gt;&gt;  <span class="number">4</span>);</div><div class="line">        i |= (i &gt;&gt;  <span class="number">8</span>);</div><div class="line">        i |= (i &gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="keyword">return</span> i - (i &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> int&#125; value with at most a single one-bit, in the</div><div class="line">     * position of the lowest-order ("rightmost") one-bit in the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  Returns zero if the specified value has no</div><div class="line">     * one-bits in its two's complement binary representation, that is, if it</div><div class="line">     * is equal to zero.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose lowest one bit is to be computed</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> int&#125; value with a single one-bit, in the position</div><div class="line">     *     of the lowest-order one-bit in the specified value, or zero if</div><div class="line">     *     the specified value is itself equal to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowestOneBit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Section 2-1</span></div><div class="line">        <span class="keyword">return</span> i &amp; -i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of zero bits preceding the highest-order</div><div class="line">     * ("leftmost") one-bit in the two's complement binary representation</div><div class="line">     * of the specified &#123;<span class="doctag">@code</span> int&#125; value.  Returns 32 if the</div><div class="line">     * specified value has no one-bits in its two's complement representation,</div><div class="line">     * in other words if it is equal to zero.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that this method is closely related to the logarithm base 2.</div><div class="line">     * For all positive &#123;<span class="doctag">@code</span> int&#125; values x:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;floor(log&lt;sub&gt;2&lt;/sub&gt;(x)) = &#123;<span class="doctag">@code</span> 31 - numberOfLeadingZeros(x)&#125;</div><div class="line">     * &lt;li&gt;ceil(log&lt;sub&gt;2&lt;/sub&gt;(x)) = &#123;<span class="doctag">@code</span> 32 - numberOfLeadingZeros(x - 1)&#125;</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose number of leading zeros is to be computed</div><div class="line">     * <span class="doctag">@return</span> the number of zero bits preceding the highest-order</div><div class="line">     *     ("leftmost") one-bit in the two's complement binary representation</div><div class="line">     *     of the specified &#123;<span class="doctag">@code</span> int&#125; value, or 32 if the value</div><div class="line">     *     is equal to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-6</span></div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">32</span>;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">16</span> == <span class="number">0</span>) &#123; n += <span class="number">16</span>; i &lt;&lt;= <span class="number">16</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">24</span> == <span class="number">0</span>) &#123; n +=  <span class="number">8</span>; i &lt;&lt;=  <span class="number">8</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">28</span> == <span class="number">0</span>) &#123; n +=  <span class="number">4</span>; i &lt;&lt;=  <span class="number">4</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">30</span> == <span class="number">0</span>) &#123; n +=  <span class="number">2</span>; i &lt;&lt;=  <span class="number">2</span>; &#125;</div><div class="line">        n -= i &gt;&gt;&gt; <span class="number">31</span>;</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of zero bits following the lowest-order ("rightmost")</div><div class="line">     * one-bit in the two's complement binary representation of the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  Returns 32 if the specified value has no</div><div class="line">     * one-bits in its two's complement representation, in other words if it is</div><div class="line">     * equal to zero.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose number of trailing zeros is to be computed</div><div class="line">     * <span class="doctag">@return</span> the number of zero bits following the lowest-order ("rightmost")</div><div class="line">     *     one-bit in the two's complement binary representation of the</div><div class="line">     *     specified &#123;<span class="doctag">@code</span> int&#125; value, or 32 if the value is equal</div><div class="line">     *     to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfTrailingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-14</span></div><div class="line">        <span class="keyword">int</span> y;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">32</span>;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">31</span>;</div><div class="line">        y = i &lt;&lt;<span class="number">16</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n -<span class="number">16</span>; i = y; &#125;</div><div class="line">        y = i &lt;&lt; <span class="number">8</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n - <span class="number">8</span>; i = y; &#125;</div><div class="line">        y = i &lt;&lt; <span class="number">4</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n - <span class="number">4</span>; i = y; &#125;</div><div class="line">        y = i &lt;&lt; <span class="number">2</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n - <span class="number">2</span>; i = y; &#125;</div><div class="line">        <span class="keyword">return</span> n - ((i &lt;&lt; <span class="number">1</span>) &gt;&gt;&gt; <span class="number">31</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of one-bits in the two's complement binary</div><div class="line">     * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.  This function is</div><div class="line">     * sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bits are to be counted</div><div class="line">     * <span class="doctag">@return</span> the number of one-bits in the two's complement binary</div><div class="line">     *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-2</span></div><div class="line">        i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</div><div class="line">        i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</div><div class="line">        i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by rotating the two's complement binary</div><div class="line">     * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value left by the</div><div class="line">     * specified number of bits.  (Bits shifted out of the left hand, or</div><div class="line">     * high-order, side reenter on the right, or low-order.)</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that left rotation with a negative distance is equivalent to</div><div class="line">     * right rotation: &#123;<span class="doctag">@code</span> rotateLeft(val, -distance) == rotateRight(val,</div><div class="line">     * distance)&#125;.  Note also that rotation by any multiple of 32 is a</div><div class="line">     * no-op, so all but the last five bits of the rotation distance can be</div><div class="line">     * ignored, even if the distance is negative: &#123;<span class="doctag">@code</span> rotateLeft(val,</div><div class="line">     * distance) == rotateLeft(val, distance &amp; 0x1F)&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bits are to be rotated left</div><div class="line">     * <span class="doctag">@param</span> distance the number of bit positions to rotate left</div><div class="line">     * <span class="doctag">@return</span> the value obtained by rotating the two's complement binary</div><div class="line">     *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value left by the</div><div class="line">     *     specified number of bits.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rotateLeft</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> distance)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (i &lt;&lt; distance) | (i &gt;&gt;&gt; -distance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by rotating the two's complement binary</div><div class="line">     * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value right by the</div><div class="line">     * specified number of bits.  (Bits shifted out of the right hand, or</div><div class="line">     * low-order, side reenter on the left, or high-order.)</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that right rotation with a negative distance is equivalent to</div><div class="line">     * left rotation: &#123;<span class="doctag">@code</span> rotateRight(val, -distance) == rotateLeft(val,</div><div class="line">     * distance)&#125;.  Note also that rotation by any multiple of 32 is a</div><div class="line">     * no-op, so all but the last five bits of the rotation distance can be</div><div class="line">     * ignored, even if the distance is negative: &#123;<span class="doctag">@code</span> rotateRight(val,</div><div class="line">     * distance) == rotateRight(val, distance &amp; 0x1F)&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bits are to be rotated right</div><div class="line">     * <span class="doctag">@param</span> distance the number of bit positions to rotate right</div><div class="line">     * <span class="doctag">@return</span> the value obtained by rotating the two's complement binary</div><div class="line">     *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value right by the</div><div class="line">     *     specified number of bits.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rotateRight</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> distance)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (i &gt;&gt;&gt; distance) | (i &lt;&lt; -distance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by reversing the order of the bits in the</div><div class="line">     * two's complement binary representation of the specified &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     * value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value to be reversed</div><div class="line">     * <span class="doctag">@return</span> the value obtained by reversing order of the bits in the</div><div class="line">     *     specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 7-1</span></div><div class="line">        i = (i &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span> | (i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>;</div><div class="line">        i = (i &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span> | (i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>;</div><div class="line">        i = (i &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span> | (i &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f0f0f0f</span>;</div><div class="line">        i = (i &lt;&lt; <span class="number">24</span>) | ((i &amp; <span class="number">0xff00</span>) &lt;&lt; <span class="number">8</span>) |</div><div class="line">                ((i &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff00</span>) | (i &gt;&gt;&gt; <span class="number">24</span>);</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the signum function of the specified &#123;<span class="doctag">@code</span> int&#125; value.  (The</div><div class="line">     * return value is -1 if the specified value is negative; 0 if the</div><div class="line">     * specified value is zero; and 1 if the specified value is positive.)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose signum is to be computed</div><div class="line">     * <span class="doctag">@return</span> the signum function of the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">signum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Section 2-7</span></div><div class="line">        <span class="keyword">return</span> (i &gt;&gt; <span class="number">31</span>) | (-i &gt;&gt;&gt; <span class="number">31</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by reversing the order of the bytes in the</div><div class="line">     * two's complement representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bytes are to be reversed</div><div class="line">     * <span class="doctag">@return</span> the value obtained by reversing the bytes in the specified</div><div class="line">     *     &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverseBytes</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((i &gt;&gt;&gt; <span class="number">24</span>)           ) |</div><div class="line">                ((i &gt;&gt;   <span class="number">8</span>) &amp;   <span class="number">0xFF00</span>) |</div><div class="line">                ((i &lt;&lt;   <span class="number">8</span>) &amp; <span class="number">0xFF0000</span>) |</div><div class="line">                ((i &lt;&lt; <span class="number">24</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Adds two integers together as per the + operator.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a the first operand</div><div class="line">     * <span class="doctag">@param</span> b the second operand</div><div class="line">     * <span class="doctag">@return</span> the sum of &#123;<span class="doctag">@code</span> a&#125; and &#123;<span class="doctag">@code</span> b&#125;</div><div class="line">     * <span class="doctag">@see</span> java.util.function.BinaryOperator</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the greater of two &#123;<span class="doctag">@code</span> int&#125; values</div><div class="line">     * as if by calling &#123;<span class="doctag">@link</span> Math#max(int, int) Math.max&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a the first operand</div><div class="line">     * <span class="doctag">@param</span> b the second operand</div><div class="line">     * <span class="doctag">@return</span> the greater of &#123;<span class="doctag">@code</span> a&#125; and &#123;<span class="doctag">@code</span> b&#125;</div><div class="line">     * <span class="doctag">@see</span> java.util.function.BinaryOperator</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.max(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the smaller of two &#123;<span class="doctag">@code</span> int&#125; values</div><div class="line">     * as if by calling &#123;<span class="doctag">@link</span> Math#min(int, int) Math.min&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a the first operand</div><div class="line">     * <span class="doctag">@param</span> b the second operand</div><div class="line">     * <span class="doctag">@return</span> the smaller of &#123;<span class="doctag">@code</span> a&#125; and &#123;<span class="doctag">@code</span> b&#125;</div><div class="line">     * <span class="doctag">@see</span> java.util.function.BinaryOperator</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.min(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability </span></div><div class="line">     * serialVersionUID和序列化有关，可以在String源码中学习到</div><div class="line">     */</div><div class="line">    <span class="meta">@Native</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1360826667806852920L</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考资料：<br><a href="http://www.tuicool.com/articles/22aQjuu" target="_blank" rel="external">http://www.tuicool.com/articles/22aQjuu</a><br><a href="http://www.07net01.com/program/2016/03/1387703.html" target="_blank" rel="external">http://www.07net01.com/program/2016/03/1387703.html</a><br><a href="http://www.cnblogs.com/fangfuhai/p/5502290.html" target="_blank" rel="external">http://www.cnblogs.com/fangfuhai/p/5502290.html</a><br><a href="https://my.oschina.net/wnayuanbiao/blog/188725" target="_blank" rel="external">https://my.oschina.net/wnayuanbiao/blog/188725</a><br><a href="http://blog.csdn.net/yvonne8_5/article/details/50956016" target="_blank" rel="external">http://blog.csdn.net/yvonne8_5/article/details/50956016</a><br>《Java核心技术 卷I》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中Object类源代码详解(转)]]></title>
      <url>http://bigmingtalk.github.io/2016/12/05/Java%E4%B8%ADObject%E7%B1%BB%E6%BA%90%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3(%E8%BD%AC)/</url>
      <content type="html"><![CDATA[<p>Java中的Object类是类层次结构的根类。Java中每个类都使用Object作为超类（都直接或间接继承此类）。所有对象（包括数组）都实现这个类的所有方法。Object类的源代码如下所示：<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;     </div><div class="line">      </div><div class="line">   <span class="comment">/* 一个本地方法，具体是用C（C++）在动态图链接库中实现的，然后通过JNI调用。*/</span>      </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;     </div><div class="line">  <span class="comment">/* 对象初始化时自动调用此方法*/</span>    </div><div class="line">    <span class="keyword">static</span> &#123;     </div><div class="line">        registerNatives();     </div><div class="line">    &#125;     </div><div class="line">   <span class="comment">/* 返回此Object的运行时类，也是一个本地方法。*/</span>    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();     </div><div class="line">    </div><div class="line"><span class="comment">/*   </span></div><div class="line">hashCode 的常规协定是：   </div><div class="line">1. 在Java应用程序执行期间，在对同一对象多次调用hashCode方法时，必须一致地返回相同的整数，前提是将对象进行equals比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。    </div><div class="line">2. 如果根据equals(Object)方法，两个对象是相等的，那么对这两个对象中的每个对象调用hashCode方法都必须生成相同的整数结果。    </div><div class="line">3. 如果根据equals(java.lang.Object)方法，两个对象不相等，那么对这两个对象中的任一对象上调用hashCode方法不要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。   </div><div class="line">*/    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;     </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;     </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    <span class="comment">/*本地clone方法，用于对象的复制。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;     </div><div class="line">    </div><div class="line">    <span class="comment">/*返回该对象的字符串表示。非常重要的方法*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;     </div><div class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">   <span class="comment">/*唤醒在此对象监视器上等待的单个线程。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;     </div><div class="line">    </div><div class="line">   <span class="comment">/*唤醒在此对象监视器上等待的所有线程。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;     </div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">/*在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。换句话说，此方法的行为就好像它仅执行 wait(0) 调用一样。    </span></div><div class="line">当前线程必须拥有此对象监视器。该线程发布对此监视器的所有权并等待，直到其他线程通过调用 notify 方法，或 notifyAll 方法通知在此对象的监视器上等待的线程醒来。然后该线程将等到重新获得对监视器的所有权后才能继续执行。*/    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">    wait(<span class="number">0</span>);     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">   <span class="comment">/*在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;     </div><div class="line">    </div><div class="line">    <span class="comment">/* 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;     </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);     </div><div class="line">        &#125;     </div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;     </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(     </div><div class="line">                <span class="string">"nanosecond timeout value out of range"</span>);     </div><div class="line">        &#125;     </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; timeout == <span class="number">0</span>)) &#123;     </div><div class="line">        timeout++;     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    wait(timeout);     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    <span class="comment">/*当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>懂得Objet类中的方法是非重要的，因为每一个类都直接或间接地继承了它的方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谈谈Java的native关键字以及JNI调用和实现]]></title>
      <url>http://bigmingtalk.github.io/2016/12/05/%E8%B0%88%E8%B0%88Java%E7%9A%84native%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8AJNI%E8%B0%83%E7%94%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>今天看Java源代码的时候发现很多的native关键字来修饰一个方法，这些方法没有具体的实现，以前只知道native方法是非Java代码实现的方法，但是对于其具体的调用以及意义并不是非常清楚，所以在这里整理一下，方便大家的阅读，同时也供自己日后参考之用。<br><a id="more"></a></p>
<h2 id="Native-Method"><a href="#Native-Method" class="headerlink" title="Native Method"></a>Native Method</h2><p>Java中的native关键字是方法修饰符, 而由native修饰的方法是由另外一种语言实现的本地方法。</p>
<h3 id="一-什么是Native-Method"><a href="#一-什么是Native-Method" class="headerlink" title="一. 什么是Native Method"></a>一. 什么是Native Method</h3><p>简单地讲，一个native Method就是一个Java调用非Java代码的接口。一个native Method是这样一个Java的方法：该方法的实现由非Java语言实现，比如C。这个特征并非Java所特有，很多其它的编程语言都有这一机制，比如在C++中，你可以用extern “C”告知C++编译器去调用一个C的函数。”A native method is a Java method whose implementation is provided by non-java code.”</p>
<p>在定义一个native method时，并不提供实现体（有些像定义一个Java interface），因为其实现体是由非Java语言在外面实现的。比如在Object.java中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123; </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>; </div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;     </div><div class="line">		registerNatives();     </div><div class="line">	&#125;        </div><div class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;     </div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;     </div><div class="line">	<span class="keyword">return</span> (<span class="keyword">this</span> == obj);     </div><div class="line">	&#125;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;     </div><div class="line">	<span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());     </div><div class="line">	&#125;     </div><div class="line">	  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;     </div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;     </div><div class="line">	</div><div class="line">	  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">	wait(<span class="number">0</span>);     </div><div class="line">	&#125;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">		<span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;     </div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);     </div><div class="line">		&#125;     </div><div class="line">	</div><div class="line">		<span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;     </div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(     </div><div class="line">				<span class="string">"nanosecond timeout value out of range"</span>);     </div><div class="line">		&#125;     </div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; timeout == <span class="number">0</span>)) &#123;     </div><div class="line">		timeout++;     </div><div class="line">	&#125;     </div><div class="line">	</div><div class="line">	wait(timeout);     </div><div class="line">	&#125;     </div><div class="line">	  </div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>诸如getClass()，hashCode()，clone()，notify()，notifyAll()，wait(long timeout)等我们熟悉的方法都是native method。这些native method的声明描述了这些非Java代码在Java代码中应该看起来的样子。</p>
<p>标识符native可以与所有其它的Java标识符连用，但是abstract除外。这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非Java的，但是abstract却显然的指明这些方法无实现体。native与其它Java标识符连用时，其意义同非native method并无差别，比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，比如当你想用一个native method去调用一个C的类库时。</p>
<p>一个native method方法可以返回任何Java类型，包括非基本类型，而且同样可以进行异常控制。这些方法的实现体可以制一个异常并且将其抛出，这一点与Java的方法非常相似。当一个native method接收到一些非基本类型时如Object或一个整型数组时，这个方法可以访问这非些基本型的内部，但是这将使这个native方法依赖于你所访问的Java类的实现。有一点要牢牢记住：我们可以在一个native method的本地实现中访问所有的Java特性，但是这要依赖于你所访问的Java特性的实现，而且这样做远远不如在Java语言中使用那些特性方便和容易。</p>
<p>一个native method的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。JVM将控制调用本地方法的所有细节。需要注意当我们将一个本地方法声明为final的情况。</p>
<p>用Java实现的方法体在被编译时可能会因为内联而产生效率上的提升。但是一个native final方法是否也能获得这样的好处却是值得怀疑的，但是这只是一个代码优化方面的问题，对功能实现没有影响。</p>
<p>如果一个含有本地方法的类被继承，子类会继承这个本地方法并且可以用Java语言重写这个方法（这个似乎看起来有些奇怪），同样的如果一个本地方法被fianl标识，它被继承后不能被重写。</p>
<p>本地方法非常有用，因为它有效地扩充了JVM。事实上，我们所写的Java代码已经用到了本地方法，在sun的Java的并发（多线程）的机制实现中，许多与操作系统的接触点都用到了本地方法，这使得Java程序能够超越Java运行时的界限。有了本地方法，Java程序可以做任何应用层次的任务。</p>
<h3 id="二-为什么要使用Native-Method"><a href="#二-为什么要使用Native-Method" class="headerlink" title="二. 为什么要使用Native Method"></a>二. 为什么要使用Native Method</h3><p>Java使用起来非常方便，然而有些层次的任务用Java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p>
<h4 id="与Java环境外交互："><a href="#与Java环境外交互：" class="headerlink" title="与Java环境外交互："></a>与Java环境外交互：</h4><p>有时Java应用需要与Java外面的环境交互。这是本地方法存在的主要原因，你可以想想Java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p>
<h4 id="与操作系统交互："><a href="#与操作系统交互：" class="headerlink" title="与操作系统交互："></a>与操作系统交互：</h4><p>JVM支持着Java语言本身和运行时库，它是Java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用Java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些Java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</p>
<h4 id="Sun’s-Java"><a href="#Sun’s-Java" class="headerlink" title="Sun’s Java"></a>Sun’s Java</h4><p>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用Java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用Java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows 95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</p>
<h3 id="三-JVM怎样使Native-Method跑起来"><a href="#三-JVM怎样使Native-Method跑起来" class="headerlink" title="三.JVM怎样使Native Method跑起来"></a>三.JVM怎样使Native Method跑起来</h3><p>我们知道，当一个类第一次被使用到时，这个类的字节码会被加载到内存，并且只会回载一次。在这个被加载的字节码的入口维持着一个该类所有方法描述符的list，这些方法描述符包含这样一些信息：方法代码存于何处，它有哪些参数，方法的描述符（public之类）等等。</p>
<p>如果一个方法描述符内有native，这个描述符块将有一个指向该方法的实现的指针。这些实现在一些DLL文件内，但是它们会被操作系统加载到Java程序的地址空间。当一个带有本地方法的类被加载时，其相关的DLL并未被加载，因此指向方法实现的指针并不会被设置。当本地方法被调用之前，这些DLL才会被加载，这是通过调用java.system.loadLibrary()实现的。使用本地方法是有开销的，它丧失了Java的很多好处。如果别无选择，我们可以选择使用本地方法。</p>
<h2 id="JNI调用和实现"><a href="#JNI调用和实现" class="headerlink" title="JNI调用和实现"></a>JNI调用和实现</h2><h3 id="一-JNI简介"><a href="#一-JNI简介" class="headerlink" title="一. JNI简介"></a>一. JNI简介</h3><p>JNI全称是Java Native Interface（Java本地接口）单词首字母的缩写，本地接口就是指用C和C++开发的接口。由于JNI是 JVM规范 中的一部份，因此可以将我们写的JNI程序在任何实现了JNI规范的Java虚拟机中运行。同时，这个特性使我们可以复用以前用C/C++写的大量代码。</p>
<p>开发JNI程序会受到系统环境的限制，因为用C/C++语言写出来的代码或模块，编译过程当中要依赖当前操作系统环境所提供的一些库函数，并和本地库链接在一起。而且编译后生成的二进制代码只能在本地操作系统环境下运行，因为不同的操作系统环境，有自己的本地库和CPU指令集，而且各个平台对标准C/C++的规范和标准库函数实现方式也有所区别。这就造成使用了JNI接口的JAVA程序，不再像以前那样自由的跨平台。如果要实现跨平台，就必须将本地代码在不同的操作系统平台下编译出相应的动态库。</p>
<h3 id="二-JNI实现"><a href="#二-JNI实现" class="headerlink" title="二. JNI实现"></a>二. JNI实现</h3><p>JNI开发流程主要分为以下6步：</p>
<ol>
<li>编写Java源代码</li>
<li>将Java源代码编译成class字节码文件</li>
<li>用javah -jni命令生成.h头文件（javah是jdk自带的一个命令，-jni参数表示将class中用native声明的函数生成jni规则的函数）</li>
<li>用本地代码实现.h头文件中的函数</li>
<li>将本地代码编译成动态库 （windows： <em>.dll ，linux/unix： </em>.so ，mac os x： *.jnilib ）</li>
<li>拷贝动态库至java.library.path 本地库搜索目录下，并运行Java程序</li>
</ol>
<p>通过上面的介绍，相信大家对JNI及开发流程有了一个整体的认识，下面通过一个HelloNative的示例，再深入了解JNI开发的各个环节及注意事项。<br>编译环境：<br>本人的开发环境为Mac os x 10.11.1， 如果在其它操作系统下开发也是一样，只需将本地代码编译成当前操作系统所支持的动态库即可。</p>
<p>g++ -v显示的g++版本如下所示（Mac下默认安装）：<br>Configured with: –prefix=/Applications/Xcode.app/Contents/Developer/usr –with-gxx-include-dir=/usr/include/c++/4.2.1<br>Apple LLVM version 7.0.0 (clang-700.0.72)<br>Target: x86_64-apple-darwin15.5.0<br>Thread model: posix</p>
<p>java -version显示的版本为<br>java version “1.8.0_60”<br>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</p>
<p>1 创建HelloNative.java，并编写代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNative</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">new</span> HelloNative().printHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在static语句块中，会在Java类的初始化阶段用于初始化静态变量；<br>System.loadLibray(“Hello”)用于加载native c++代码编译生成的动态库，从后面的结果我们可以看到，在mac下, 动态库的名字应该是libHello.jnilib;之所以将System.loadLibrary(“Hello”) 放到static block中，就是为了在类初始化时首先执行这部分代码，确保在类执行本地方法时已经加载了对应的库文件；<br>同时使用native关键字声明了一个方法void printHello()，表明这个方法将用native的方式实现； </p>
<p>2 编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ javac HelloNative.java</div></pre></td></tr></table></figure></p>
<p>3 生成native文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$javah -jni HelloNative</div></pre></td></tr></table></figure></p>
<p>当前目录下可以看到已经生成了HelloNative.h,  这是不可修改的代码，用于指定了native代码中需要实现的函数的原型； 执行cat HelloNative.h后可以看到文件内容是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNative</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">new</span> HelloNative().printHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4 新建HelloNative.cpp文件，并在其中添加native c++代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloNative.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_HelloNative_printHello</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>  </div><div class="line">&#123;  </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"Hello, Native!"</span>);  </div><div class="line">   <span class="keyword">return</span> ;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，需要包含头文件 jni.h，该文件定义了JNI的函数类型和数据结构；<br>接着需要包含上一步生成的native头文件HelloNative.h;<br>最后，按照HelloNative.h中声明的函数原型实现函数体；</p>
<p>5 编译c++代码，生成动态库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ g++ -dynamiclib -I /System/Library/Frameworks/JavaVM.framework/Headers HelloNative.cpp -o libHello.jnilib</div></pre></td></tr></table></figure></p>
<p>-dynamiclib选项表示生成动态库，相当于linux环境下的-shared;<br>-I 指定编译的依赖的头文件所在的路径，在这里也就是jni.h和jni_md.h所在的路径。linux环境下，路径可能是/usr/lib/jvm/java-xxx/include;<br>其实这里的jni.h文件也可以在$JAVA_HOME/include目录下找到，jni_md.h则是对应于不同的操作系统所在位置不同，在Mac下为在$JAVA_HOME/include/darwin目录下；<br>-o指定生成的动态库文件的名称，在Mac中，动态库的命名格式为libXXX.jnilib，相当于linux下的libXXX.so; </p>
<p>6 运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java HelloNative</div></pre></td></tr></table></figure></p>
<p>则可以得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, Native!</div></pre></td></tr></table></figure></p>
<p>JNI调用C流程图如下图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/JNI.png" alt="JNI!"></p>
<p>参考：<br><a href="http://blog.csdn.net/codigger/article/details/9296037" target="_blank" rel="external">http://blog.csdn.net/codigger/article/details/9296037</a><br><a href="http://www.tuicool.com/articles/ZV3iee" target="_blank" rel="external">http://www.tuicool.com/articles/ZV3iee</a><br><a href="https://my.oschina.net/u/1413984/blog/199027" target="_blank" rel="external">https://my.oschina.net/u/1413984/blog/199027</a><br><a href="http://blog.csdn.net/sjw890821sjw/article/details/8058843" target="_blank" rel="external">http://blog.csdn.net/sjw890821sjw/article/details/8058843</a><br><a href="http://www.cnblogs.com/Alandre/p/4456719.html" target="_blank" rel="external">http://www.cnblogs.com/Alandre/p/4456719.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说Java中的静态内部类]]></title>
      <url>http://bigmingtalk.github.io/2016/12/01/%E8%AF%B4%E8%AF%B4Java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>Java中有个static关键字，想必大家都很熟悉。static字面上可以理解为“全局”或者“静态”的意思， 同时static可以用来修饰成员变量，成员方法，也可以用来修饰静态代码块，甚至可以用来修饰内部可以用来修饰静态内部类。<br><a id="more"></a></p>
<h1 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h1><p>被static修饰的成员变量称为静态变量，其独立于该类的对象，或者说其附属于于该类，而不是该类的对象。静态变量被该类所有的对象实例所共享。当该类被JVM加载后，JVM就可以根据类名在方法区里面找到它们。静态变量代表不需要被实例化就可以使用，其在内存中只有一个拷贝。而实例变量则对于每一个实例对象都有一个拷贝。 </p>
<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p>被static修饰的成员方法称为静态方法，可以直接通过类名调用。静态方法和静态变量其实可以有相同的理解，就是说该方法是属于类的，而不是类的实例对象的。所以静态方法中不能用this和super关键字，不能访问所属类的实例变量和实例方法（不带static修饰的成员变量和成员方法），因为这些都是与具体的对象关联的。同时，因为static方法是独立于任何实例的，所以static方法不能是abstract的，必须被实现。</p>
<h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><p>被static修饰的代码块叫做静态代码块。静态代码块可以有多个，位置可以随意，其不在任何的方法体中。在JVM加载类时会按在类中的顺序执行这些静态代码块，每个静态代码块只会被执行一次。在如下代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        StaticTest.a = <span class="number">3</span>;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        StaticTest test = <span class="keyword">new</span> StaticTest();</div><div class="line">        test.sayHello();</div><div class="line">        test.b = <span class="number">1024</span>;</div><div class="line">        System.out.println(test.b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        StaticTest.a = <span class="number">4</span>;</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        StaticTest.a = <span class="number">5</span>;</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello Bigming"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出是<br>3<br>Hello Bigming<br>1024<br>4<br>5</p>
<h1 id="内部静态类"><a href="#内部静态类" class="headerlink" title="内部静态类"></a>内部静态类</h1><p>这里指的是内部静态类！因为用static修饰class时，只能是在内部类中使用！所以没有外部静态类一说！Java中的内部类有两种，一种是静态内部类，一种是普通内部类。普通内部类中可以获得外部类的引用，能够访问外部类对象的成员变量，可以说普通内部类依赖于外部类，与外部类是共生共死的。 创建普通内部类对象之前，必须先创建外部类的对象。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OuterClass o = <span class="keyword">new</span> OuterClass();</div><div class="line">OuterClass.InnerClass inner = o.new InnerClass();</div><div class="line"> </div><div class="line">OuterClass.InnerClass inner = <span class="keyword">new</span> o.InnerClass();         <span class="comment">/* 错误 */</span></div><div class="line">OuterClass.InnerClass inner = <span class="keyword">new</span> OuterClass.InnerClass();  <span class="comment">/* 错误 */</span></div></pre></td></tr></table></figure></p>
<p>而静态内部类没有外部对象的引用，无法访问外部对象的资源。但是其无需依赖于外部类，可以独立于外部对象而存在。创建静态内部类的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OuterClass.InnerClass inner = <span class="keyword">new</span> OuterClass.InnerClass();</div></pre></td></tr></table></figure></p>
<p>从某种程度上可以将静态内部类与静态变量对比，其是附属于类的。而普通内部类与实例变量对比，其是附属于类的对象的。<br>静态内部类一般在如下场景中使用：</p>
<ol>
<li>外部类需要使用内部类，而内部类无需使用外部类的资源</li>
<li>内部类可以独立外部类创建对象<br>使用静态内部类可以加强代码的封装性，提高代码的可读性，如下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;  </div><div class="line">     <span class="comment">//姓名  </span></div><div class="line">     <span class="keyword">private</span> String name;  </div><div class="line">     <span class="comment">//家庭  </span></div><div class="line">     <span class="keyword">private</span> Home home;  </div><div class="line">     <span class="comment">//构造函数设置属性值  </span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String _name)</span></span>&#123;  </div><div class="line">          name = _name;  </div><div class="line">     &#125;  </div><div class="line">     <span class="comment">/* home、name的getter/setter方法省略 */</span>  </div><div class="line"> </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span></span>&#123;  </div><div class="line">          <span class="comment">//家庭地址  </span></div><div class="line">          <span class="keyword">private</span> String address;  </div><div class="line">          <span class="comment">//家庭电话  </span></div><div class="line">          <span class="keyword">private</span> String tel;  </div><div class="line"> </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="title">Home</span><span class="params">(String _address,String _tel)</span></span>&#123;  </div><div class="line">            address = _address;  </div><div class="line">            tel = _tel;  </div><div class="line">          &#125;  </div><div class="line">          <span class="comment">/* address、tel的getter/setter方法省略 */</span>  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>将Home放在Person的内部，可以知道Home是Person的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </div><div class="line">    Home home = <span class="keyword">new</span> Person.Home(<span class="string">"上海"</span>, <span class="string">"021"</span>);  </div><div class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>);    </div><div class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>);    </div><div class="line">    p1.setHome(home);    </div><div class="line">    p2.setHome(home);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里创建的Home对象是由p1和p2共享的，类似于属于Person类的静态变量。但是如果把Home类换成普通内部类的话，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>);  </div><div class="line">    Home home = p1.new Home(<span class="string">"上海"</span>, <span class="string">"021"</span>);</div><div class="line">    p1.setHome(home);  </div><div class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>);  </div><div class="line">    p2.setHome(home);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时p1和p2依然共享一个home对象，但是此时home对象是与p1共生共死的，如果p1对象消亡，那么p2就不能访问到home对象了。所以此时使用静态内部类比普通内部类要更加合适。<br>同时，普通内部类和静态内部类还有一些区别：</p>
<ol>
<li>普通内部类不能声明static的方法和变量。这里说的是变量，常量还是可以的，用final static修饰。而静态内部类和外部类一样，没有任何限制。</li>
<li>使用静态内部类，多个外部类的对象可以共享一个内部类的对象。而使用普通内部类，每个外部类的对象都有自己的内部类对象，外部类对象之间不能共享内部类的对象。</li>
</ol>
<p>以上就是全部总结啦~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java传值还是传引用？读完这篇文章你就懂了！]]></title>
      <url>http://bigmingtalk.github.io/2016/10/11/Java%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8%EF%BC%9F%E8%AF%BB%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%BD%A0%E5%B0%B1%E6%87%82%E4%BA%86%EF%BC%81/</url>
      <content type="html"><![CDATA[<p>对于Java函数调用中是传值还是传引用这个问题，许多新手都是一头雾水，特别是那些以前学了C++的童靴更是如此。引用，地址，指针，常常搞不清楚，从而在程序编写过程中出现错误。本篇文章的讨论不涉及C++中的指针以及引用传递等问题，而是针对Java函数中到底是传值还是传引用做一个系统的描述。<br><a id="more"></a></p>
<h1 id="Java中引用是什么？"><a href="#Java中引用是什么？" class="headerlink" title="Java中引用是什么？"></a>Java中引用是什么？</h1><p>要回答Java函数中是传递值还是传递引用，首先要回答的问题就是Java中引用是什么。在Java中，引用代表的是一个对象的名字或者别名。我们都知道，对象的存储需要占用内存空间，当我们需要访问对象的时候，我们通过对象的引用去访问，对象的引用也是一种数据结构，其存储了该对象的地址，类似于C语言中指针的概念，不同的是在Java中我们并不能够得知该地址是什么。</p>
<p>我们可以定义多个引用变量指向同一个对象，这些引用都指向该对象但是相互独立，同时引用作为一种数据类型，其也占用内存空间来保存。比如在下面的代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String t1 = <span class="string">"Hello Bigming"</span>;</div><div class="line">String t2 = t1;</div><div class="line">String t3 = t2;</div></pre></td></tr></table></figure></p>
<p>真实的对象只有一个，就是类型为String的字符串”Hello Bigming”，而有三个String类型的引用t1, t2和t3，t1, t2, t3它们都是”Hello Bigming”的别名，都指向”Hello Bigming”对象，也就是它们的值是相同的。</p>
<p>总结一下引用的两个要点：</p>
<ol>
<li>引用是一种数据类型，其保存了对象在内存中的地址，这种类型既不是我们平时所说的简单数据类型也不是类实例(对象)；</li>
<li>不同的引用可能指向同一个对象，换句话说，一个对象可以有多个引用，即该类类型的变量。</li>
</ol>
<h1 id="Java中基本数据类型是按值传递的"><a href="#Java中基本数据类型是按值传递的" class="headerlink" title="Java中基本数据类型是按值传递的"></a>Java中基本数据类型是按值传递的</h1><p>明白了Java中引用是什么以后，我们先来看看简单一点的，就是对于Java中对int，float等基本数据类型的传递。在这里，因为是基本数据类型，所以没有对象的存在。经典的例子如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = a;</div><div class="line">    a = b;</div><div class="line">    b = a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</div><div class="line">    System.out.println(<span class="string">"before: a = "</span> + a + <span class="string">" b = "</span> + b);</div><div class="line">    swap(a, b);</div><div class="line">    System.out.println(<span class="string">"after:  a = "</span> + a + <span class="string">" b = "</span> + b);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出为：<br>before: a = 1 b = 2<br>after:  a = 1 b = 2</p>
<p>说明swap函数并没有调换a与b的值。之所以a与b的值没有调换的原因是Java中基本数据类型传递时传递的是一份拷贝。在上述代码中，当调用swap(a, b)时，其实是将a和b参数的拷贝值传进函数里的，所以在函数内部调换的是a与b的拷贝值，而在main函数中a与b的值都没有发生改变，所以输出不变。</p>
<h1 id="Java中对象也是按值传递的"><a href="#Java中对象也是按值传递的" class="headerlink" title="Java中对象也是按值传递的"></a>Java中对象也是按值传递的</h1><p>之所以说Java中对象也是按值传递的，是因为在传递对象时传递的是对象引用的拷贝。比如在下面例子中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StringBuffer sb)</span> </span>&#123;</div><div class="line">    sb.append(<span class="string">", Bigming!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</div><div class="line">    test(sb);</div><div class="line">    System.out.println(sb);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出是：<br>Hello, Bigming!</p>
<p>在这个例子中，当调用test(sb)时，其实传递进去的是sb引用的一个拷贝，该拷贝与main函数中的sb一样，指向StringBuilder这个对象。所以，在test()方法中执行sb.append(“, Bigming!”)时，其实上是test()方法中的sb引用所指向的StringBuilder对象的append方法，只不过test函数中的sb引用与main函数中的sb引用一样，指向同一个StringBuilder，所以最后输出时是Hello, Bigming!</p>
<p>好吧，这个例子也许不是那么让你信服，因为你也可以说在test()函数中传入的就是sb对象，所以append生效了啊，那么我们来看下一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    str = <span class="string">"Bigming"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String str = <span class="string">"Hello"</span>;</div><div class="line">    test(str);</div><div class="line">    System.out.println(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数输出是：<br>Hello</p>
<p>原因很简单，在test()函数中不是传递对象，要是传递的是对象，那么输出就应该是Bigming了。那么传递的是不是str引用本身呢？也不是，因为要是传递的是str引用本身，那么str引用在test()函数中将指向新的字符串对象”Bigming”，但是输出并不是Bigming，所以，在这里，传递的还是str引用的一个拷贝引用，该拷贝引用和str引用一样，在未执行test()函数时其指向字符串”Hello”对象，但是在test()函数中，因为String对象是不可变的，所以在执行str = “Bigming”后，该拷贝引用指向了一个新的字符串对象”Bigming”，但是main函数中原来的str引用其并没有改变，还是指向”Hello”对象。</p>
<p>所以，总而言之，Java中在传递对象时，其并没有传递真实的对象，也不是传递对象的引用，而是传递对象的引用的一个拷贝。你还不信？那再来看下一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tricky</span><span class="params">(Point arg1, Point arg2)</span> </span>&#123;</div><div class="line">        arg1.x = <span class="number">100</span>;</div><div class="line">        arg1.y = <span class="number">100</span>;</div><div class="line">        Point temp = arg1;</div><div class="line">        arg1 = arg2;</div><div class="line">        arg2 = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Point pnt1 = <span class="keyword">new</span> Point();</div><div class="line">        Point pnt2 = <span class="keyword">new</span> Point();</div><div class="line">        System.out.println(<span class="string">"Before:"</span>);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt1.x + <span class="string">" y: "</span> +pnt1.y);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt2.x + <span class="string">" y: "</span> +pnt2.y);</div><div class="line">        System.out.println();</div><div class="line">        tricky(pnt1,pnt2);</div><div class="line">        System.out.println(<span class="string">"After:"</span>);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt1.x + <span class="string">" y:"</span> + pnt1.y);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt2.x + <span class="string">" y: "</span> +pnt2.y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>仔细想一想，看看能不能做对，我先不告诉你~</p>
<p>正确的答案是：<br>Before:<br>x: 0 y: 0<br>x: 0 y: 0</p>
<p>After:<br>x: 100 y:100<br>x: 0 y: 0<br>看看你做对了没？ Before的输出没有任何疑问，int型默认初始化为0，对于After，因为其传递的是pnt1引用和pnt2引用的拷贝，在这里我们用pnt1_c和pnt2_c来表示这两个拷贝，pnt1_c和pnt2_c其实也是tricky方法中的arg1和arg2，所以在tricky方法中，当调用arg1.x = 100和arg1.y = 100时，因为pnt1_c是pnt1的拷贝，指向的对象也是pnt1指向的Point对象，所以其改变了pnt1指向的Point对象的x和y的值。随后执行的Point temp = arg1，arg1 = arg2以及arg2 = temp只是改变了pnt1_c和pnt2_c所指向的Point对象。也就是说，在test方法最后一行执行结束时，pnt1_c指向了pnt2所指向的对象，pnt2_c指向了pnt1所指向的对象。但是main函数中pnt1和pnt2所指向的对象并没有发生改变，改变的是他们的拷贝的值所指向的对象。所以，最后输出的是<br>Before:<br>x: 0 y: 0<br>x: 0 y: 0</p>
<p>After:<br>x: 100 y:100<br>x: 0 y: 0<br>而不是<br>Before:<br>x: 0 y: 0<br>x: 0 y: 0</p>
<p>After:<br>x: 0 y: 0<br>x: 100 y:100</p>
<h1 id="正确看传传值还是传引用"><a href="#正确看传传值还是传引用" class="headerlink" title="正确看传传值还是传引用"></a>正确看传传值还是传引用</h1><p>写到这里，我想你对Java中对于函数参数的传递应该有了比较深的认识了。其实，我们大可不必纠结于传递参数还是传递引用，亦或是传递对象本身，因为归根结底都可以认为传递的是一个数据，只不过该数据是具体的基本数据类型，还是一个引用类型，而该引用类型是拷贝的引用，还是原来的而引用。</p>
<p>总而言之，在Java中，当函数参数是基本类型时，传递的是基本类型的一个拷贝值。当参数类型是一个对象时，传递的是该对象引用的一个拷贝。最最需要记住的是，传递的永远是一个拷贝！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的字符编码，代码点与代码单元]]></title>
      <url>http://bigmingtalk.github.io/2016/10/09/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%82%B9%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83/</url>
      <content type="html"><![CDATA[<p>对于我来说，处理字符串编码总是一件非常头疼的事情，不管是在Java中还是在Python等其他编程语言中，花费在字符编码上的时间往往非常多。为了解决这个老大难问题，我在本篇文章中对Java中的字符编码问题做一个总结记录。<br><a id="more"></a></p>
<h1 id="字符编码标准"><a href="#字符编码标准" class="headerlink" title="字符编码标准"></a>字符编码标准</h1><p>计算机能处理的只有数字。对于其他任意的信息，比如文本，图片，音频视频等，都必须先将其转化为数字，才能在计算机中进行存储和传输。将文本信息转换为数字表示的这个过程也就是编码过程。编码的标准多种多样，由于计算机是由美国人发明的，因此，最早只有127个字母符号被编码，包括常用的大小写字母，数字以及一些符号，这也就是最初的ASCII编码。如字符‘A’的编码是65。ASCII编码只需要一个字节即8bit就能够表示（实际7bit就行）。<br>随着计算机在全世界迅速普及，各个国家也都针对自即的语言设计了编码标准，如我国汉字的GB2312编码。日文的Shift_JIS编码等等。如此多的标准带来的一个后果就是混乱不堪🙈，比如用GB2312编码了一段文字，但在解码时却用Shift_JIS解码，那信息肯定会不对。这也是打开有些网页时会出现乱码的原因。为了解决各个国家间编码标准不统一的问题，Unicode编码出现了！Unicode编码标准通常用两个字节表示一个字符，对于非常生僻的字符可能需要4个字节。在1991年发布的Unicode 1.0中，用2个字节共16位能够表示65536个字符，但是在增加了大量的汉语，日语，汉语等表意文字后，Unicode字符迅速超过了65536，为了解决这个问题，Unicode编码采用了代码级别（Code plane）的概念，后文将会对其作详细介绍。Unicode编码标准的出现解决了乱码问题，但在也出现了一些附带问题。比如在一篇纯英文文章，用ASCII编码时每个字符只需要一个字节，但用Unicode编码就需要两个字节，这极大地降低了编码的效率，在文本的存储和传输上造成极大的浪费。<br>为了提高存储和传输的效率，出现了将Unicode编码转换的编码形式，具体如UTF-8编码，UTF-16编码，UTF-32编码等。UTF是Unicode TransferFormat的缩写，即把Unicode编码转做某种格式的意思。UTF-8是我们很常见的一种格式，也是现在应用最广泛的一种编码格式。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。字符’A’和汉字’中’在各种标准中的编码格式如下表所示：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">ASCII</th>
<th style="text-align:right">Unicode</th>
<th>UTF-8</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td style="text-align:center">01000001</td>
<td style="text-align:right">00000000 01000001</td>
<td>01000001</td>
</tr>
<tr>
<td>中</td>
<td style="text-align:center">无法表示</td>
<td style="text-align:right">01001110 00101101</td>
<td>11100100 10111000 10101101</td>
</tr>
</tbody>
</table>
<p>从上例中可以得知，ASCII编码其实是UTF-8中的一部分。UTF-8，UTF-16已经UTF-32等不同类型的编码格式都有其不同的使用场景，UTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节 (2字节) 储存，但UTF-16却无法兼容于ASCII编码。<br>关于Unicode与其具体的UTF-XX的区别为在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码等具体的编码形式。记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%811.png" alt="记事本保存UTF-8编码"><br>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%812.png" alt="UTF-8格式保存的网页"><br>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h1 id="代码点与代码单元，以及Java中的char类型"><a href="#代码点与代码单元，以及Java中的char类型" class="headerlink" title="代码点与代码单元，以及Java中的char类型"></a>代码点与代码单元，以及Java中的char类型</h1><h2 id="代码点"><a href="#代码点" class="headerlink" title="代码点"></a>代码点</h2><p>代码点（code point）是指与一个编码表中的某个字符对应的代码值。在Unicode标准中，代码点采用十六进制书写，并加上前缀U+，例如U+41就字符‘A’的代码点，Unicode的代码点可以分为17个代码级别（code plane）。第一个代码级别称为基本的多语言级别（basic multilingual plane），代码点从U+0000到U+FFFF,其中包括了经典的Unicode代码（2字节共16位），其余的16个附加级别，代码点从U+10000到U+10FFFF，其中包括了一些辅助字符。</p>
<h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>UTF-16则采用不同长度的编码表示所有的Unicode代码点。在基本的多语言级别中，每个字符用16位表示，通常被称为代码单元（Code unit）；而辅助字符采用一段连续的代码单元进行编码。这样构成的编码值一定落入基本的多语言级别中空闲的2048位内，通常被称为替代区域（surrogate area）[U+D800~U+DBFF用于第一个代码单元，U+DC00~U+DFFF用于第二个代码单元，两者之和即U+D800~U+DFFF一共是由2048位]。这样的设计非常巧妙，我们可以从中迅速知道一个代码单元是一个字符的编码，还是一个辅助字符的第一或第二部分。例如，整数集合的数学符号Z(这里不是字母Z,我实在是在markdown里打不出那符号了，囧)的代码点是U+1D56B，并且是用两个代码单元U+D835和U+DD6B编码的，具体的编码算法可以查看<a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="external">UTF-16维基百科</a>。</p>
<h2 id="Java-char"><a href="#Java-char" class="headerlink" title="Java char"></a>Java char</h2><p>在Java中，char类型用UTF-16编码描述一个代码单元。我们都知道Java中char是2个字节的，也就是说，Java中单个char只支持基本平面内的字符，而扩展平面内的字符需要一对char来表示。所以对于一个String类型的变量str来说，可以用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```Java</div><div class="line">int pos = str.offsetByCodePoints(0, i); </div><div class="line">int cp = str.codePointAt(pos);</div></pre></td></tr></table></figure></p>
<p>来获得。</p>
<p>参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="external">廖雪峰关于字符编码的解释</a><br>《Java核心技术 卷I》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中private方法能重写吗？]]></title>
      <url>http://bigmingtalk.github.io/2016/10/04/Java%E4%B8%ADprivate%E6%96%B9%E6%B3%95%E8%83%BD%E9%87%8D%E5%86%99%E5%90%97%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>结论：Java中private方法不能被重写！</p>
<p>为什么呢？请思考30秒，看看你的Java基本功怎么样…</p>
<a id="more"></a>
<p>原因：private方法默认是final的，而final方法是不能被继承的。说起来好像挺简单，但是用起来好像又会傻傻分不清楚。比如下面这个小程序，想一想它的输出是什么？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"A"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        A a = <span class="keyword">new</span> B();</div><div class="line">        a.print();</div><div class="line">        B b = <span class="keyword">new</span> B();</div><div class="line">        b.print();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"B"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>正确输出是:<br>A<br>B</p>
<p>对于第二个输出“B”应该没有任何疑问，这里主要的疑问是a.print()为什么会输出“A”？在上面的程序中，Class B的print()方法相当于是B添加的方法，不属于重写！同时，这里采用的是静态绑定，而不是动态绑定！在Java中，private方法、static方法、final方法或者构造器均采用静态绑定，而静态绑定在调用方法时不依赖于隐式参数的实际类型！所以a.print()调用的是Class A的print()方法！</p>
<p>其实，这只是一个演示的demo程序，在现实的编程中，我们应该尽量避免使用有歧义的同名函数，特别是像上述demo中的情况。良好的命名习惯可以使我们在实际的编程中少走很多弯路。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有的没的，写下来的才是你的]]></title>
      <url>http://bigmingtalk.github.io/2016/09/21/%E6%9C%89%E7%9A%84%E6%B2%A1%E7%9A%84%EF%BC%8C%E5%86%99%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%89%8D%E6%98%AF%E4%BD%A0%E7%9A%84/</url>
      <content type="html"><![CDATA[<p><img src="http://oe0nilvpj.bkt.clouddn.com/write.jpg" alt="Write!"></p>
<p>人总是低估自己的短期记忆能力，高估自己的长期记忆能力。<br><a id="more"></a></p>
<p>我时常把人脑和计算机做对比。比如计算机的处理器对应了人脑的神经元，处理器的主频高低则对应于人反应速度的快慢。而对于人类的记忆能力，我更愿意将其分为短期记忆能力和长期记忆能力。短期记忆能力对应于内存，会被覆盖，亦或是shutdown就没有了；长期记忆则更像是硬盘，能够一直完好地保存。短期记忆和长期记忆之间的转换，则对应于计算机的IO问题。只有将内存里的东西写到硬盘上，才能有效地长期保存，与之对应的我们的人脑，只有将记忆写下来，才能够将短期记忆转换为长期记忆。</p>
<p>写作有很多很多的好处，但也是一项相对艰苦的事情。如果能够一直坚持下来，最后的收获也一定会大大地超出你的预期。</p>
<ul>
<li>写作是对认识的总结。想清楚不等于能说清楚，许多人应该都有过这样的感受。一件事情自己觉得已经想的很清楚了，但是每每和别人解释这件事的时候，却又发现没有那么容易说清楚。从本质上说，这种情况下你更多的只是明白了事情各个方面的逻辑原理，但是你没有一个对事情全局的认识和总结。所以，当你开始说的时间，更多的关注了局部的逻辑，而不能给别人一个全局的认知。此时，写作往往是一件不错的事情，把对事物的理解写下来，有利于你对事物有一个全局的理解。亦或是画一画思维导图，把自己的思维逻辑可视化出来。在这个过程中，往往又会有新的发现，发现有一些地方自己以前没有想到或是不够全面，亦或是对事物的某一方面有了新的认知。</li>
<li>写作是对记忆的强化。不管是在纸上亦或是电脑上，当你开始写字的时候，你总是会想如何去合理地表达你想要表达的事物。在这个过程中，其实也是对你记忆的一次强化，很多细节的事情其实不去理解很容易就会忘记，但是当你在写作中认真地去思考过后，就会对这些细节有更多的记忆。而当你写作完成，重新看自己写下的东西时，又往往会有很多的思考，在这一次又一次的复习中，你对事物的理解和记忆都会进一步加深。</li>
<li>写作是对知识的输出。历史是从书中来的，而书是写下来的。尽管现在有了更多的形式来存储信息，比如视频音频等待，但是文字在知识的传递中所起到的作用并不会有所减少。比如论文，大家在尝试了解某一领域时，最权威的还是论文。比如书籍，课程一般都会有教科书。同样采用人脑和计算机的比喻，每个人的一生总是在不断地从外界得到各种信息，这些信息称之为输入信息；输入信息在每个人大脑中经过思考、总结等各种处理，并转化或创造出新的信息。新的信息通过写作的方式重新发布到外界中去，称之输出信息。写作在这个过程中扮演了非常重要的角色，它让你不再只做无尽的输入，处理，而没有任何的输出。</li>
<li>写作能够帮你认识更多志同道合的朋友。从一个人的文章中，大概就能得知这是一个什么样的人。穷则独善其身，达则兼济天下。纵观历史，每个人都在做输入，但并不是每个人都在做输出。输出的多少往往能够决定你的影响力。在写作中，你可以分享自己的知识，帮助别人少走自己走过的弯路，同时别人看到你的文章也能给你许多的建议，也帮助你成长，久而久之让你认识更多志同道合的朋友。</li>
</ul>
<p>有的没的，写下来的才是你的。改变自己，从写作开始。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[404 Not Found：该页无法显示]]></title>
      <url>http://bigmingtalk.github.io//404.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://bigmingtalk.github.io/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://bigmingtalk.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
