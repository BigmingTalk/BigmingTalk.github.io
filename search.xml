<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java源码解读之Integer及自动装箱拆箱]]></title>
      <url>http://bigmingtalk.github.io/2016/12/06/Java%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B9%8BInteger/</url>
      <content type="html"><![CDATA[<p>今天看到了一道关于包装器类自动装箱和拆箱的题，觉得挺有意思，于是顺便看了一下Integer类的源码，从中找到了答案。很多不理解的问题其实到源码层次都大致能够看得明白，也越发觉得阅读Java中基本类的源码是成为Java牛人过程中必不可少而且非常重要的一步，有问题，看源码！下面是Java中关于包装器类的简单介绍以及Integer类的源码解读。<br><a id="more"></a></p>
<h2 id="包装器类与自动装箱拆箱"><a href="#包装器类与自动装箱拆箱" class="headerlink" title="包装器类与自动装箱拆箱"></a>包装器类与自动装箱拆箱</h2><p>在Java中，有时我们需要将int这样的基本类型转换为对象。所有的基本数据类型都有一个与之对应的包装器类（wrapper）。如Integer、Long、Float、Double、Short、Byte、Character、Void和Boolean（前6个类派生于公共的超类Number）。当我们执行下面语句时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer n = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>其实执行的是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer n  = Integer.valueOf(<span class="number">3</span>);</div></pre></td></tr></table></figure></p>
<p>这个在编译器中将基本数据类型自动转换为包装器类的过程叫做自动装箱。与之对应的，则是自动拆箱，如下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer n = <span class="number">1000</span>;</div><div class="line">n++;</div></pre></td></tr></table></figure></p>
<p>在上述两句代码中，第一句代码进行了自动装箱， 第二句n++则是编译器会插入一条对象拆箱的指令，然后进行自增运算，最后再将结果装箱。</p>
<p>在很多情况下，会有一种假象，那就是基本类型与它们的对象包装器是一样的，只是它们的相等性不同。我们知道==运算符可以应用于对象包装器对象，只不过检测的是对象是否指向同一个内存区域。如果我们想要单纯比较两个对象包装器中的值是否相等，我们则应该调用equals方法。</p>
<p>说了这么多，下面出两个题考考你先~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/6.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer a = <span class="number">1000</span>;</div><div class="line">        Integer b = <span class="number">1000</span>;</div><div class="line"></div><div class="line">        Integer c = <span class="number">10</span>;</div><div class="line">        Integer d = <span class="number">10</span>;</div><div class="line"></div><div class="line">        System.out.println(a == b);</div><div class="line">        System.out.println(c == d);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>想一想这里的输出是什么？</p>
<p>答案是<br>false<br>true</p>
<p>我想没有阅读过Integer源码的人一定会很纳闷，为什么两个答案是不同的。在这道题中。首先如我们之前所说的，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Integer a = <span class="number">1000</span>;</div><div class="line">Integer b = <span class="number">1000</span>;</div><div class="line"></div><div class="line">Integer c = <span class="number">10</span>;</div><div class="line">Integer d = <span class="number">10</span>;</div></pre></td></tr></table></figure></p>
<p>这四个语句都会先进行自动装箱，即等价于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Integer a = Integer.valueOf(<span class="number">1000</span>);</div><div class="line">Integer b = Integer.valueOf(<span class="number">1000</span>);</div><div class="line">        </div><div class="line">Integer c = Integer.valueOf(<span class="number">10</span>);</div><div class="line">Integer d = Integer.valueOf(<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>然后我们又知道==运算符比较的是两个两个对象是否指向同一个区域，所以这里的关键点就在这个valueOf方法，在Integer类中，valueOf的源码(JDK版本为1.8.0_60)如下所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>从中我们可以看到当i在[IntegerCache.low, IntegerCache.high]范围内时，其返回的是IntegerCache内部类的cache数组，而IntegerCache是Integer类中的一个静态内部类（有关静态内部类可以参考我的另外一篇文章<a href="https://bigmingtalk.github.io/2016/12/01/%E8%AF%B4%E8%AF%B4Java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/">说说Java中的静态内部类</a> ）。而IntegerCache这个静态内部类的源码为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="comment">// high value may be configured by property</span></div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>从上面代码中可以看出，在默认情况下，[-128, 127]之内的数都会被缓存在cache数组中，这也解释了上面的答案为什么一个是false一个是true。当声明的Inetger对象的值在-128–127之间时，引用的是缓存中的同一个对象（已经创建好保存在缓存中），所以结果是true；当声明的Integer对象的值不在这个范围之类的时候，就会通过new Integer(i);语句创建一个Integer对象。当然我们也可以通过设置HotSpot VM特定的VM参数来更改IntegerCache.high的值（确保IntegerCache.high &gt;=127即可，具体可参见<a href="http://rednaxelafx.iteye.com/blog/680746" target="_blank" rel="external">[FYI] 关于Integer的自动缓存大小</a>）。</p>
<p>现在看另外一个例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Integer m = <span class="number">1000</span>;</div><div class="line"><span class="keyword">int</span> n = <span class="number">1000</span>;</div><div class="line"></div><div class="line">Integer p = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line">Integer q = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line"></div><div class="line">System.out.println(m == n);</div><div class="line">System.out.println(p == q);</div></pre></td></tr></table></figure></p>
<p>如果你能很快给出正确答案，那说明你是真的懂了，正确答案是</p>
<p>true<br>false</p>
<p>第一个之所以为true是因为当一个Integer类型对象与一个int基本数据类型对象用==比较时，Integer对象会先进行自动拆箱，所以这里m和n比较的其实是两个数值是否相等。这里之所以是m进行自动拆箱而不是n进行装箱进行比较则是Java中编译器的默认设定。第二个答案如果你不明白则说明你还没有真的看明白，在这里虽然10在[-128, 127]范围内，但是这里是直接用new方法在堆上创建了一个对象，而不是调用valueOf方法，所以在堆上两个不同的对象的地址当然是不一样的。相比说到这里大家对自动装箱和自动拆箱以及包装器类有了一定的了解了吧，要说明的是装箱和拆箱是编译器认可的，而不是虚拟机。编译器在生成类的字节码时，自动插入必要的方法调用。虚拟机只是执行这些字节码。最后再看一个Integer类的源码吧，共1500多行，绝大多数为注释，参考了一些别人的解答，也加上了一些自己的认识，仅供大家参考。</p>
<h2 id="Integer类源码解读"><a href="#Integer类源码解读" class="headerlink" title="Integer类源码解读"></a>Integer类源码解读</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div><div class="line">1347</div><div class="line">1348</div><div class="line">1349</div><div class="line">1350</div><div class="line">1351</div><div class="line">1352</div><div class="line">1353</div><div class="line">1354</div><div class="line">1355</div><div class="line">1356</div><div class="line">1357</div><div class="line">1358</div><div class="line">1359</div><div class="line">1360</div><div class="line">1361</div><div class="line">1362</div><div class="line">1363</div><div class="line">1364</div><div class="line">1365</div><div class="line">1366</div><div class="line">1367</div><div class="line">1368</div><div class="line">1369</div><div class="line">1370</div><div class="line">1371</div><div class="line">1372</div><div class="line">1373</div><div class="line">1374</div><div class="line">1375</div><div class="line">1376</div><div class="line">1377</div><div class="line">1378</div><div class="line">1379</div><div class="line">1380</div><div class="line">1381</div><div class="line">1382</div><div class="line">1383</div><div class="line">1384</div><div class="line">1385</div><div class="line">1386</div><div class="line">1387</div><div class="line">1388</div><div class="line">1389</div><div class="line">1390</div><div class="line">1391</div><div class="line">1392</div><div class="line">1393</div><div class="line">1394</div><div class="line">1395</div><div class="line">1396</div><div class="line">1397</div><div class="line">1398</div><div class="line">1399</div><div class="line">1400</div><div class="line">1401</div><div class="line">1402</div><div class="line">1403</div><div class="line">1404</div><div class="line">1405</div><div class="line">1406</div><div class="line">1407</div><div class="line">1408</div><div class="line">1409</div><div class="line">1410</div><div class="line">1411</div><div class="line">1412</div><div class="line">1413</div><div class="line">1414</div><div class="line">1415</div><div class="line">1416</div><div class="line">1417</div><div class="line">1418</div><div class="line">1419</div><div class="line">1420</div><div class="line">1421</div><div class="line">1422</div><div class="line">1423</div><div class="line">1424</div><div class="line">1425</div><div class="line">1426</div><div class="line">1427</div><div class="line">1428</div><div class="line">1429</div><div class="line">1430</div><div class="line">1431</div><div class="line">1432</div><div class="line">1433</div><div class="line">1434</div><div class="line">1435</div><div class="line">1436</div><div class="line">1437</div><div class="line">1438</div><div class="line">1439</div><div class="line">1440</div><div class="line">1441</div><div class="line">1442</div><div class="line">1443</div><div class="line">1444</div><div class="line">1445</div><div class="line">1446</div><div class="line">1447</div><div class="line">1448</div><div class="line">1449</div><div class="line">1450</div><div class="line">1451</div><div class="line">1452</div><div class="line">1453</div><div class="line">1454</div><div class="line">1455</div><div class="line">1456</div><div class="line">1457</div><div class="line">1458</div><div class="line">1459</div><div class="line">1460</div><div class="line">1461</div><div class="line">1462</div><div class="line">1463</div><div class="line">1464</div><div class="line">1465</div><div class="line">1466</div><div class="line">1467</div><div class="line">1468</div><div class="line">1469</div><div class="line">1470</div><div class="line">1471</div><div class="line">1472</div><div class="line">1473</div><div class="line">1474</div><div class="line">1475</div><div class="line">1476</div><div class="line">1477</div><div class="line">1478</div><div class="line">1479</div><div class="line">1480</div><div class="line">1481</div><div class="line">1482</div><div class="line">1483</div><div class="line">1484</div><div class="line">1485</div><div class="line">1486</div><div class="line">1487</div><div class="line">1488</div><div class="line">1489</div><div class="line">1490</div><div class="line">1491</div><div class="line">1492</div><div class="line">1493</div><div class="line">1494</div><div class="line">1495</div><div class="line">1496</div><div class="line">1497</div><div class="line">1498</div><div class="line">1499</div><div class="line">1500</div><div class="line">1501</div><div class="line">1502</div><div class="line">1503</div><div class="line">1504</div><div class="line">1505</div><div class="line">1506</div><div class="line">1507</div><div class="line">1508</div><div class="line">1509</div><div class="line">1510</div><div class="line">1511</div><div class="line">1512</div><div class="line">1513</div><div class="line">1514</div><div class="line">1515</div><div class="line">1516</div><div class="line">1517</div><div class="line">1518</div><div class="line">1519</div><div class="line">1520</div><div class="line">1521</div><div class="line">1522</div><div class="line">1523</div><div class="line">1524</div><div class="line">1525</div><div class="line">1526</div><div class="line">1527</div><div class="line">1528</div><div class="line">1529</div><div class="line">1530</div><div class="line">1531</div><div class="line">1532</div><div class="line">1533</div><div class="line">1534</div><div class="line">1535</div><div class="line">1536</div><div class="line">1537</div><div class="line">1538</div><div class="line">1539</div><div class="line">1540</div><div class="line">1541</div><div class="line">1542</div><div class="line">1543</div><div class="line">1544</div><div class="line">1545</div><div class="line">1546</div><div class="line">1547</div><div class="line">1548</div><div class="line">1549</div><div class="line">1550</div><div class="line">1551</div><div class="line">1552</div><div class="line">1553</div><div class="line">1554</div><div class="line">1555</div><div class="line">1556</div><div class="line">1557</div><div class="line">1558</div><div class="line">1559</div><div class="line">1560</div><div class="line">1561</div><div class="line">1562</div><div class="line">1563</div><div class="line">1564</div><div class="line">1565</div><div class="line">1566</div><div class="line">1567</div><div class="line">1568</div><div class="line">1569</div><div class="line">1570</div><div class="line">1571</div><div class="line">1572</div><div class="line">1573</div><div class="line">1574</div><div class="line">1575</div><div class="line">1576</div><div class="line">1577</div><div class="line">1578</div><div class="line">1579</div><div class="line">1580</div><div class="line">1581</div><div class="line">1582</div><div class="line">1583</div><div class="line">1584</div><div class="line">1585</div><div class="line">1586</div><div class="line">1587</div><div class="line">1588</div><div class="line">1589</div><div class="line">1590</div><div class="line">1591</div><div class="line">1592</div><div class="line">1593</div><div class="line">1594</div><div class="line">1595</div><div class="line">1596</div><div class="line">1597</div><div class="line">1598</div><div class="line">1599</div><div class="line">1600</div><div class="line">1601</div><div class="line">1602</div><div class="line">1603</div><div class="line">1604</div><div class="line">1605</div><div class="line">1606</div><div class="line">1607</div><div class="line">1608</div><div class="line">1609</div><div class="line">1610</div><div class="line">1611</div><div class="line">1612</div><div class="line">1613</div><div class="line">1614</div><div class="line">1615</div><div class="line">1616</div><div class="line">1617</div><div class="line">1618</div><div class="line">1619</div><div class="line">1620</div><div class="line">1621</div><div class="line">1622</div><div class="line">1623</div><div class="line">1624</div><div class="line">1625</div><div class="line">1626</div><div class="line">1627</div><div class="line">1628</div><div class="line">1629</div><div class="line">1630</div><div class="line">1631</div><div class="line">1632</div><div class="line">1633</div><div class="line">1634</div><div class="line">1635</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.</div><div class="line"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> java.lang;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Native;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The &#123;<span class="doctag">@code</span> Integer&#125; class wraps a value of the primitive type</div><div class="line"> * &#123;<span class="doctag">@code</span> int&#125; in an object. An object of type &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line"> * contains a single field whose type is &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;In addition, this class provides several methods for converting</div><div class="line"> * an &#123;<span class="doctag">@code</span> int&#125; to a &#123;<span class="doctag">@code</span> String&#125; and a &#123;<span class="doctag">@code</span> String&#125; to an</div><div class="line"> * &#123;<span class="doctag">@code</span> int&#125;, as well as other constants and methods useful when</div><div class="line"> * dealing with an &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Implementation note: The implementations of the "bit twiddling"</div><div class="line"> * methods (such as &#123;<span class="doctag">@link</span> #highestOneBit(int) highestOneBit&#125; and</div><div class="line"> * &#123;<span class="doctag">@link</span> #numberOfTrailingZeros(int) numberOfTrailingZeros&#125;) are</div><div class="line"> * based on material from Henry S. Warren, Jr.'s &lt;i&gt;Hacker's</div><div class="line"> * Delight&lt;/i&gt;, (Addison Wesley, 2002).</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>  Lee Boynton</div><div class="line"> * <span class="doctag">@author</span>  Arthur van Hoff</div><div class="line"> * <span class="doctag">@author</span>  Josh Bloch</div><div class="line"> * <span class="doctag">@author</span>  Joseph D. Darcy</div><div class="line"> * <span class="doctag">@since</span> JDK1.0</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// final类，所以不能定义它们的子类，即不能被继承</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A constant holding the minimum value an &#123;<span class="doctag">@code</span> int&#125; can</div><div class="line">     * have, -2&lt;sup&gt;31&lt;/sup&gt;.</div><div class="line">     */</div><div class="line">    <span class="comment">// 值为（-（2的31次方））的常量，它表示int类型能够表示的最小值，皆为补码表示 </span></div><div class="line">    <span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>   MIN_VALUE = <span class="number">0x80000000</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A constant holding the maximum value an &#123;<span class="doctag">@code</span> int&#125; can</div><div class="line">     * have, 2&lt;sup&gt;31&lt;/sup&gt;-1.</div><div class="line">     */</div><div class="line">    <span class="comment">// //值为 （（2的31次方）－1） 的常量，它表示 int 类型能够表示的最大值。 </span></div><div class="line">    <span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>   MAX_VALUE = <span class="number">0x7fffffff</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The &#123;<span class="doctag">@code</span> Class&#125; instance representing the primitive type</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span>   JDK1.1</div><div class="line">     */</div><div class="line">    <span class="comment">// 表示基本类型 int 的 Class 实例。 </span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class="string">"int"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * All possible chars for representing a number as a String</div><div class="line">     */</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span>[] digits = &#123;</div><div class="line">            <span class="string">'0'</span> , <span class="string">'1'</span> , <span class="string">'2'</span> , <span class="string">'3'</span> , <span class="string">'4'</span> , <span class="string">'5'</span> ,</div><div class="line">            <span class="string">'6'</span> , <span class="string">'7'</span> , <span class="string">'8'</span> , <span class="string">'9'</span> , <span class="string">'a'</span> , <span class="string">'b'</span> ,</div><div class="line">            <span class="string">'c'</span> , <span class="string">'d'</span> , <span class="string">'e'</span> , <span class="string">'f'</span> , <span class="string">'g'</span> , <span class="string">'h'</span> ,</div><div class="line">            <span class="string">'i'</span> , <span class="string">'j'</span> , <span class="string">'k'</span> , <span class="string">'l'</span> , <span class="string">'m'</span> , <span class="string">'n'</span> ,</div><div class="line">            <span class="string">'o'</span> , <span class="string">'p'</span> , <span class="string">'q'</span> , <span class="string">'r'</span> , <span class="string">'s'</span> , <span class="string">'t'</span> ,</div><div class="line">            <span class="string">'u'</span> , <span class="string">'v'</span> , <span class="string">'w'</span> , <span class="string">'x'</span> , <span class="string">'y'</span> , <span class="string">'z'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the first argument in the</div><div class="line">     * radix specified by the second argument.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the radix is smaller than &#123;<span class="doctag">@code</span> Character.MIN_RADIX&#125;</div><div class="line">     * or larger than &#123;<span class="doctag">@code</span> Character.MAX_RADIX&#125;, then the radix</div><div class="line">     * &#123;<span class="doctag">@code</span> 10&#125; is used instead.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the first argument is negative, the first element of the</div><div class="line">     * result is the ASCII minus character &#123;<span class="doctag">@code</span> '-'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;). If the first argument is not</div><div class="line">     * negative, no sign character appears in the result.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The remaining characters of the result represent the magnitude</div><div class="line">     * of the first argument. If the magnitude is zero, it is</div><div class="line">     * represented by a single zero character &#123;<span class="doctag">@code</span> '0'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;); otherwise, the first character of</div><div class="line">     * the representation of the magnitude will not be the zero</div><div class="line">     * character.  The following ASCII characters are used as digits:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *   &#123;<span class="doctag">@code</span> 0123456789abcdefghijklmnopqrstuvwxyz&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * These are &#123;<span class="doctag">@code</span> '\u005Cu0030'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0039'&#125; and &#123;<span class="doctag">@code</span> '\u005Cu0061'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu007A'&#125;. If &#123;<span class="doctag">@code</span> radix&#125; is</div><div class="line">     * &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters</div><div class="line">     * are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,</div><div class="line">     * the digits for hexadecimal (radix 16) are</div><div class="line">     * &#123;<span class="doctag">@code</span> 0123456789abcdef&#125;. If uppercase letters are</div><div class="line">     * desired, the &#123;<span class="doctag">@link</span> java.lang.String#toUpperCase()&#125; method may</div><div class="line">     * be called on the result:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> Integer.toString(n, 16).toUpperCase()&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i       an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@param</span>   radix   the radix to use in the string representation.</div><div class="line">     * <span class="doctag">@return</span>  a string representation of the argument in the specified radix.</div><div class="line">     * <span class="doctag">@see</span>     java.lang.Character#MAX_RADIX</div><div class="line">     * <span class="doctag">@see</span>     java.lang.Character#MIN_RADIX</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> radix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX || radix &gt; Character.MAX_RADIX)</div><div class="line">            radix = <span class="number">10</span>;</div><div class="line"></div><div class="line">        <span class="comment">/* Use the faster version */</span></div><div class="line">        <span class="keyword">if</span> (radix == <span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">return</span> toString(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">33</span>];</div><div class="line">        <span class="keyword">boolean</span> negative = (i &lt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> charPos = <span class="number">32</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!negative) &#123;</div><div class="line">            i = -i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt;= -radix) &#123;</div><div class="line">            buf[charPos--] = digits[-(i % radix)];</div><div class="line">            i = i / radix;</div><div class="line">        &#125;</div><div class="line">        buf[charPos] = digits[-i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (negative) &#123;</div><div class="line">            buf[--charPos] = <span class="string">'-'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, charPos, (<span class="number">33</span> - charPos));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the first argument as an</div><div class="line">     * unsigned integer value in the radix specified by the second</div><div class="line">     * argument.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the radix is smaller than &#123;<span class="doctag">@code</span> Character.MIN_RADIX&#125;</div><div class="line">     * or larger than &#123;<span class="doctag">@code</span> Character.MAX_RADIX&#125;, then the radix</div><div class="line">     * &#123;<span class="doctag">@code</span> 10&#125; is used instead.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that since the first argument is treated as an unsigned</div><div class="line">     * value, no leading sign character is printed.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the magnitude is zero, it is represented by a single zero</div><div class="line">     * character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;); otherwise,</div><div class="line">     * the first character of the representation of the magnitude will</div><div class="line">     * not be the zero character.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The behavior of radixes and the characters used as digits</div><div class="line">     * are the same as &#123;<span class="doctag">@link</span> #toString(int, int) toString&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i       an integer to be converted to an unsigned string.</div><div class="line">     * <span class="doctag">@param</span>   radix   the radix to use in the string representation.</div><div class="line">     * <span class="doctag">@return</span>  an unsigned string representation of the argument in the specified radix.</div><div class="line">     * <span class="doctag">@see</span>     #toString(int, int)</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toUnsignedString</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> radix)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Long.toUnsignedString(toUnsignedLong(i), radix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the integer argument as an</div><div class="line">     * unsigned integer in base&amp;nbsp;16.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;</div><div class="line">     * if the argument is negative; otherwise, it is equal to the</div><div class="line">     * argument.  This value is converted to a string of ASCII digits</div><div class="line">     * in hexadecimal (base&amp;nbsp;16) with no extra leading</div><div class="line">     * &#123;<span class="doctag">@code</span> 0&#125;s.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The value of the argument can be recovered from the returned</div><div class="line">     * string &#123;<span class="doctag">@code</span> s&#125; by calling &#123;<span class="doctag">@link</span></div><div class="line">     * Integer#parseUnsignedInt(String, int)</div><div class="line">     * Integer.parseUnsignedInt(s, 16)&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the unsigned magnitude is zero, it is represented by a</div><div class="line">     * single zero character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;);</div><div class="line">     * otherwise, the first character of the representation of the</div><div class="line">     * unsigned magnitude will not be the zero character. The</div><div class="line">     * following characters are used as hexadecimal digits:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> 0123456789abcdef&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * These are the characters &#123;<span class="doctag">@code</span> '\u005Cu0030'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0039'&#125; and &#123;<span class="doctag">@code</span> '\u005Cu0061'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0066'&#125;. If uppercase letters are</div><div class="line">     * desired, the &#123;<span class="doctag">@link</span> java.lang.String#toUpperCase()&#125; method may</div><div class="line">     * be called on the result:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> Integer.toHexString(n).toUpperCase()&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@return</span>  the string representation of the unsigned integer value</div><div class="line">     *          represented by the argument in hexadecimal (base&amp;nbsp;16).</div><div class="line">     * <span class="doctag">@see</span> #parseUnsignedInt(String, int)</div><div class="line">     * <span class="doctag">@see</span> #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span>   JDK1.0.2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toUnsignedString0(i, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the integer argument as an</div><div class="line">     * unsigned integer in base&amp;nbsp;8.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;</div><div class="line">     * if the argument is negative; otherwise, it is equal to the</div><div class="line">     * argument.  This value is converted to a string of ASCII digits</div><div class="line">     * in octal (base&amp;nbsp;8) with no extra leading &#123;<span class="doctag">@code</span> 0&#125;s.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The value of the argument can be recovered from the returned</div><div class="line">     * string &#123;<span class="doctag">@code</span> s&#125; by calling &#123;<span class="doctag">@link</span></div><div class="line">     * Integer#parseUnsignedInt(String, int)</div><div class="line">     * Integer.parseUnsignedInt(s, 8)&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the unsigned magnitude is zero, it is represented by a</div><div class="line">     * single zero character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;);</div><div class="line">     * otherwise, the first character of the representation of the</div><div class="line">     * unsigned magnitude will not be the zero character. The</div><div class="line">     * following characters are used as octal digits:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     * &#123;<span class="doctag">@code</span> 01234567&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * These are the characters &#123;<span class="doctag">@code</span> '\u005Cu0030'&#125; through</div><div class="line">     * &#123;<span class="doctag">@code</span> '\u005Cu0037'&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@return</span>  the string representation of the unsigned integer value</div><div class="line">     *          represented by the argument in octal (base&amp;nbsp;8).</div><div class="line">     * <span class="doctag">@see</span> #parseUnsignedInt(String, int)</div><div class="line">     * <span class="doctag">@see</span> #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span>   JDK1.0.2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toOctalString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toUnsignedString0(i, <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the integer argument as an</div><div class="line">     * unsigned integer in base&amp;nbsp;2.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;</div><div class="line">     * if the argument is negative; otherwise it is equal to the</div><div class="line">     * argument.  This value is converted to a string of ASCII digits</div><div class="line">     * in binary (base&amp;nbsp;2) with no extra leading &#123;<span class="doctag">@code</span> 0&#125;s.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The value of the argument can be recovered from the returned</div><div class="line">     * string &#123;<span class="doctag">@code</span> s&#125; by calling &#123;<span class="doctag">@link</span></div><div class="line">     * Integer#parseUnsignedInt(String, int)</div><div class="line">     * Integer.parseUnsignedInt(s, 2)&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the unsigned magnitude is zero, it is represented by a</div><div class="line">     * single zero character &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;);</div><div class="line">     * otherwise, the first character of the representation of the</div><div class="line">     * unsigned magnitude will not be the zero character. The</div><div class="line">     * characters &#123;<span class="doctag">@code</span> '0'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0030'&#125;) and &#123;<span class="doctag">@code</span></div><div class="line">     * '1'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu0031'&#125;) are used as binary digits.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted to a string.</div><div class="line">     * <span class="doctag">@return</span>  the string representation of the unsigned integer value</div><div class="line">     *          represented by the argument in binary (base&amp;nbsp;2).</div><div class="line">     * <span class="doctag">@see</span> #parseUnsignedInt(String, int)</div><div class="line">     * <span class="doctag">@see</span> #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span>   JDK1.0.2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toBinaryString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toUnsignedString0(i, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Convert the integer to an unsigned number.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toUnsignedString0</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> shift)</span> </span>&#123;</div><div class="line">        <span class="comment">// assert shift &gt; 0 &amp;&amp; shift &lt;=5 : "Illegal shift value";</span></div><div class="line">        <span class="keyword">int</span> mag = Integer.SIZE - Integer.numberOfLeadingZeros(val);</div><div class="line">        <span class="keyword">int</span> chars = Math.max(((mag + (shift - <span class="number">1</span>)) / shift), <span class="number">1</span>);</div><div class="line">        <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[chars];</div><div class="line"></div><div class="line">        formatUnsignedInt(val, shift, buf, <span class="number">0</span>, chars);</div><div class="line"></div><div class="line">        <span class="comment">// Use special constructor which takes over "buf".</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Format a long (treated as unsigned) into a character buffer.</div><div class="line">     * <span class="doctag">@param</span> val the unsigned int to format</div><div class="line">     * <span class="doctag">@param</span> shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)</div><div class="line">     * <span class="doctag">@param</span> buf the character buffer to write to</div><div class="line">     * <span class="doctag">@param</span> offset the offset in the destination buffer to start at</div><div class="line">     * <span class="doctag">@param</span> len the number of characters to write</div><div class="line">     * <span class="doctag">@return</span> the lowest character  location used</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">formatUnsignedInt</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> shift, <span class="keyword">char</span>[] buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> charPos = len;</div><div class="line">        <span class="keyword">int</span> radix = <span class="number">1</span> &lt;&lt; shift;</div><div class="line">        <span class="keyword">int</span> mask = radix - <span class="number">1</span>;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            buf[offset + --charPos] = Integer.digits[val &amp; mask];</div><div class="line">            val &gt;&gt;&gt;= shift;</div><div class="line">        &#125; <span class="keyword">while</span> (val != <span class="number">0</span> &amp;&amp; charPos &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> charPos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//100以内的数字除以10的结果（取整），</span></div><div class="line">    <span class="comment">//比如取DigitTens[78]，返回的是数字7</span></div><div class="line">    <span class="comment">//只要是70-79的数字，返回的都是7，依次类推，所以总结出规律，其实就是返回的对应数字除10取整的结果。</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span> [] DigitTens = &#123;</div><div class="line">            <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>,</div><div class="line">            <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>,</div><div class="line">            <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>,</div><div class="line">            <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'3'</span>,</div><div class="line">            <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>,</div><div class="line">            <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>, <span class="string">'5'</span>,</div><div class="line">            <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>, <span class="string">'6'</span>,</div><div class="line">            <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>, <span class="string">'7'</span>,</div><div class="line">            <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>, <span class="string">'8'</span>,</div><div class="line">            <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>, <span class="string">'9'</span>,</div><div class="line">    &#125; ;</div><div class="line"></div><div class="line">    <span class="comment">//100以内的数字对10取模的结果，</span></div><div class="line">    <span class="comment">//比如取DigitTens[78]，返回的8</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span> [] DigitOnes = &#123;</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</div><div class="line">    &#125; ;</div><div class="line"></div><div class="line">    <span class="comment">// I use the "invariant division by multiplication" trick to</span></div><div class="line">    <span class="comment">// accelerate Integer.toString.  In particular we want to</span></div><div class="line">    <span class="comment">// avoid division by 10.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// The "trick" has roughly the same performance characteristics</span></div><div class="line">    <span class="comment">// as the "classic" Integer.toString code on a non-JIT VM.</span></div><div class="line">    <span class="comment">// The trick avoids .rem and .div calls but has a longer code</span></div><div class="line">    <span class="comment">// path and is thus dominated by dispatch overhead.  In the</span></div><div class="line">    <span class="comment">// JIT case the dispatch overhead doesn't exist and the</span></div><div class="line">    <span class="comment">// "trick" is considerably faster than the classic code.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// TODO-<span class="doctag">FIXME:</span> convert (x * 52429) into the equiv shift-add</span></div><div class="line">    <span class="comment">// sequence.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// RE:  Division by Invariant Integers using Multiplication</span></div><div class="line">    <span class="comment">//      T Gralund, P Montgomery</span></div><div class="line">    <span class="comment">//      ACM PLDI 1994</span></div><div class="line">    <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a &#123;<span class="doctag">@code</span> String&#125; object representing the</div><div class="line">     * specified integer. The argument is converted to signed decimal</div><div class="line">     * representation and returned as a string, exactly as if the</div><div class="line">     * argument and radix 10 were given as arguments to the &#123;<span class="doctag">@link</span></div><div class="line">     * #toString(int, int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i   an integer to be converted.</div><div class="line">     * <span class="doctag">@return</span>  a string representation of the argument in base&amp;nbsp;10.</div><div class="line">     */</div><div class="line">    <span class="comment">// 把一个int类型的数字转换成字符串类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// 将-2147483648的值直接返回的原因就是整数最大只能表示2147483647，否则下面的stringSize(-i)不能表示</span></div><div class="line">        <span class="keyword">if</span> (i == Integer.MIN_VALUE)</div><div class="line">            <span class="keyword">return</span> <span class="string">"-2147483648"</span>;</div><div class="line">        <span class="comment">// 主要目的是体取出整数i的位数设，当i&lt;0的时候返回的size数组在stringSize方法的基础上+1的目的是这一位用来存储负号</span></div><div class="line">        <span class="keyword">int</span> size = (i &lt; <span class="number">0</span>) ? stringSize(-i) + <span class="number">1</span> : stringSize(i);</div><div class="line">        <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[size];</div><div class="line">        getChars(i, size, buf);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a string representation of the argument as an unsigned</div><div class="line">     * decimal value.</div><div class="line">     *</div><div class="line">     * The argument is converted to unsigned decimal representation</div><div class="line">     * and returned as a string exactly as if the argument and radix</div><div class="line">     * 10 were given as arguments to the &#123;<span class="doctag">@link</span> #toUnsignedString(int,</div><div class="line">     * int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   i  an integer to be converted to an unsigned string.</div><div class="line">     * <span class="doctag">@return</span>  an unsigned string representation of the argument.</div><div class="line">     * <span class="doctag">@see</span>     #toUnsignedString(int, int)</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toUnsignedString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Long.toString(toUnsignedLong(i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Places characters representing the integer i into the</div><div class="line">     * character array buf. The characters are placed into</div><div class="line">     * the buffer backwards starting with the least significant</div><div class="line">     * digit at the specified index (exclusive), and working</div><div class="line">     * backwards from there.</div><div class="line">     *</div><div class="line">     * Will fail if i == Integer.MIN_VALUE</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getChars</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> index, <span class="keyword">char</span>[] buf)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> q, r;</div><div class="line">        <span class="keyword">int</span> charPos = index;</div><div class="line">        <span class="keyword">char</span> sign = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</div><div class="line">            sign = <span class="string">'-'</span>;</div><div class="line">            i = -i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Generate two digits per iteration</span></div><div class="line">        <span class="comment">// 每次循环过后，都会将i中的走后两位保存到字符数组buf中的最后两位中，读者可以将数字i设置为12345678测试一下，</span></div><div class="line">        <span class="comment">// 第一次循环结束之后，buf[7] = 8,buf[6]=7。第二次循环结束之后，buf[5] = 6,buf[4] = 5。</span></div><div class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">65536</span>) &#123;</div><div class="line">            q = i / <span class="number">100</span>;</div><div class="line">            <span class="comment">// really: r = i - (q * 100);</span></div><div class="line">            r = i - ((q &lt;&lt; <span class="number">6</span>) + (q &lt;&lt; <span class="number">5</span>) + (q &lt;&lt; <span class="number">2</span>));</div><div class="line">            i = q;</div><div class="line">            <span class="comment">//取DigitOnes[r]的目的其实取数字r%10的结果</span></div><div class="line">            buf [--charPos] = DigitOnes[r];</div><div class="line">            <span class="comment">//取DigitTens[r]的目的其实是取数字r/10的结果</span></div><div class="line">            buf [--charPos] = DigitTens[r];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Fall thru to fast mode for smaller numbers</span></div><div class="line">        <span class="comment">// assert(i &lt;= 65536, i);</span></div><div class="line">        <span class="comment">// //循环将其他数字存入字符数组中空余位置</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="comment">// 这里其实就是除以10</span></div><div class="line">            q = (i * <span class="number">52429</span>) &gt;&gt;&gt; (<span class="number">16</span>+<span class="number">3</span>);</div><div class="line">            <span class="comment">//将数字i的最后一位存入字符数组，</span></div><div class="line">            <span class="comment">//还是12345678那个例子，这个for循环第一次结束后，buf[3]=4。</span></div><div class="line">            r = i - ((q &lt;&lt; <span class="number">3</span>) + (q &lt;&lt; <span class="number">1</span>));  <span class="comment">// r = i-(q*10) ...</span></div><div class="line">            buf [--charPos] = digits [r];</div><div class="line">            i = q;</div><div class="line">            <span class="comment">//for循环结束后，buf内容为“12345678”；</span></div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sign != <span class="number">0</span>) &#123;</div><div class="line">            buf [--charPos] = sign;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sizeTable = &#123; <span class="number">9</span>, <span class="number">99</span>, <span class="number">999</span>, <span class="number">9999</span>, <span class="number">99999</span>, <span class="number">999999</span>, <span class="number">9999999</span>,</div><div class="line">            <span class="number">99999999</span>, <span class="number">999999999</span>, Integer.MAX_VALUE &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Requires positive x</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stringSize</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="comment">// 基于范围的查找</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; ; i++)</div><div class="line">            <span class="keyword">if</span> (x &lt;= sizeTable[i])</div><div class="line">                <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as a signed integer in the radix</div><div class="line">     * specified by the second argument. The characters in the string</div><div class="line">     * must all be digits of the specified radix (as determined by</div><div class="line">     * whether &#123;<span class="doctag">@link</span> java.lang.Character#digit(char, int)&#125; returns a</div><div class="line">     * nonnegative value), except that the first character may be an</div><div class="line">     * ASCII minus sign &#123;<span class="doctag">@code</span> '-'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;) to</div><div class="line">     * indicate a negative value or an ASCII plus sign &#123;<span class="doctag">@code</span> '+'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) to indicate a positive value. The</div><div class="line">     * resulting integer value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;An exception of type &#123;<span class="doctag">@code</span> NumberFormatException&#125; is</div><div class="line">     * thrown if any of the following situations occurs:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;The first argument is &#123;<span class="doctag">@code</span> null&#125; or is a string of</div><div class="line">     * length zero.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The radix is either smaller than</div><div class="line">     * &#123;<span class="doctag">@link</span> java.lang.Character#MIN_RADIX&#125; or</div><div class="line">     * larger than &#123;<span class="doctag">@link</span> java.lang.Character#MAX_RADIX&#125;.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;Any character of the string is not a digit of the specified</div><div class="line">     * radix, except that the first character may be a minus sign</div><div class="line">     * &#123;<span class="doctag">@code</span> '-'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;) or plus sign</div><div class="line">     * &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) provided that the</div><div class="line">     * string is longer than length 1.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The value represented by the string is not a value of type</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Examples:</div><div class="line">     * &lt;blockquote&gt;&lt;pre&gt;</div><div class="line">     * parseInt("0", 10) returns 0</div><div class="line">     * parseInt("473", 10) returns 473</div><div class="line">     * parseInt("+42", 10) returns 42</div><div class="line">     * parseInt("-0", 10) returns 0</div><div class="line">     * parseInt("-FF", 16) returns -255</div><div class="line">     * parseInt("1100110", 2) returns 102</div><div class="line">     * parseInt("2147483647", 10) returns 2147483647</div><div class="line">     * parseInt("-2147483648", 10) returns -2147483648</div><div class="line">     * parseInt("2147483648", 10) throws a NumberFormatException</div><div class="line">     * parseInt("99", 8) throws a NumberFormatException</div><div class="line">     * parseInt("Kona", 10) throws a NumberFormatException</div><div class="line">     * parseInt("Kona", 27) returns 411787</div><div class="line">     * &lt;/pre&gt;&lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the &#123;<span class="doctag">@code</span> String&#125; containing the integer</div><div class="line">     *                  representation to be parsed</div><div class="line">     * <span class="doctag">@param</span>      radix   the radix to be used while parsing &#123;<span class="doctag">@code</span> s&#125;.</div><div class="line">     * <span class="doctag">@return</span>     the integer represented by the string argument in the</div><div class="line">     *             specified radix.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException if the &#123;<span class="doctag">@code</span> String&#125;</div><div class="line">     *             does not contain a parsable &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     */</div><div class="line">    <span class="comment">// 使用第二个参数指定的基数(如果没指定，则按照十进制处理），将字符串参数解析为有符号的整数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></div><div class="line">            <span class="keyword">throws</span> NumberFormatException</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * WARNING: This method may be invoked early during VM initialization</div><div class="line">         * before IntegerCache is initialized. Care must be taken to not use</div><div class="line">         * the valueOf method.</div><div class="line">         */</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</div><div class="line">                    <span class="string">" less than Character.MIN_RADIX"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (radix &gt; Character.MAX_RADIX) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</div><div class="line">                    <span class="string">" greater than Character.MAX_RADIX"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, len = s.length();</div><div class="line">        <span class="keyword">int</span> limit = -Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> multmin;</div><div class="line">        <span class="keyword">int</span> digit;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">char</span> firstChar = s.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (firstChar &lt; <span class="string">'0'</span>) &#123; <span class="comment">// Possible leading "+" or "-"</span></div><div class="line">                <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">                    negative = <span class="keyword">true</span>;</div><div class="line">                    limit = Integer.MIN_VALUE;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar != <span class="string">'+'</span>)</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="comment">// Cannot have lone "+" or "-"</span></div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            multmin = limit / radix;</div><div class="line">            <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">                <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></div><div class="line">                digit = Character.digit(s.charAt(i++),radix);</div><div class="line">                <span class="keyword">if</span> (digit &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (result &lt; multmin) &#123;</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                &#125;</div><div class="line">                result *= radix;</div><div class="line">                <span class="keyword">if</span> (result &lt; limit + digit) &#123;</div><div class="line">                    <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">                &#125;</div><div class="line">                result -= digit;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> negative ? result : -result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as a signed decimal integer. The</div><div class="line">     * characters in the string must all be decimal digits, except</div><div class="line">     * that the first character may be an ASCII minus sign &#123;<span class="doctag">@code</span> '-'&#125;</div><div class="line">     * (&#123;<span class="doctag">@code</span> '\u005Cu002D'&#125;) to indicate a negative value or an</div><div class="line">     * ASCII plus sign &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) to</div><div class="line">     * indicate a positive value. The resulting integer value is</div><div class="line">     * returned, exactly as if the argument and the radix 10 were</div><div class="line">     * given as arguments to the &#123;<span class="doctag">@link</span> #parseInt(java.lang.String,</div><div class="line">     * int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> s    a &#123;<span class="doctag">@code</span> String&#125; containing the &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     *             representation to be parsed</div><div class="line">     * <span class="doctag">@return</span>     the integer value represented by the argument in decimal.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException  if the string does not contain a</div><div class="line">     *               parsable integer.</div><div class="line">     */</div><div class="line">    <span class="comment">// 调用栈其实是getInteger(String nm) -&gt; getInteger(nm, null); -&gt;Integer.decode()-&gt;Integer.valueOf()-&gt;parseInt()</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> parseInt(s,<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as an unsigned integer in the radix</div><div class="line">     * specified by the second argument.  An unsigned integer maps the</div><div class="line">     * values usually associated with negative numbers to positive</div><div class="line">     * numbers larger than &#123;<span class="doctag">@code</span> MAX_VALUE&#125;.</div><div class="line">     *</div><div class="line">     * The characters in the string must all be digits of the</div><div class="line">     * specified radix (as determined by whether &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.Character#digit(char, int)&#125; returns a nonnegative</div><div class="line">     * value), except that the first character may be an ASCII plus</div><div class="line">     * sign &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;). The resulting</div><div class="line">     * integer value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;An exception of type &#123;<span class="doctag">@code</span> NumberFormatException&#125; is</div><div class="line">     * thrown if any of the following situations occurs:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;The first argument is &#123;<span class="doctag">@code</span> null&#125; or is a string of</div><div class="line">     * length zero.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The radix is either smaller than</div><div class="line">     * &#123;<span class="doctag">@link</span> java.lang.Character#MIN_RADIX&#125; or</div><div class="line">     * larger than &#123;<span class="doctag">@link</span> java.lang.Character#MAX_RADIX&#125;.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;Any character of the string is not a digit of the specified</div><div class="line">     * radix, except that the first character may be a plus sign</div><div class="line">     * &#123;<span class="doctag">@code</span> '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;) provided that the</div><div class="line">     * string is longer than length 1.</div><div class="line">     *</div><div class="line">     * &lt;li&gt;The value represented by the string is larger than the</div><div class="line">     * largest unsigned &#123;<span class="doctag">@code</span> int&#125;, 2&lt;sup&gt;32&lt;/sup&gt;-1.</div><div class="line">     *</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the &#123;<span class="doctag">@code</span> String&#125; containing the unsigned integer</div><div class="line">     *                  representation to be parsed</div><div class="line">     * <span class="doctag">@param</span>      radix   the radix to be used while parsing &#123;<span class="doctag">@code</span> s&#125;.</div><div class="line">     * <span class="doctag">@return</span>     the integer represented by the string argument in the</div><div class="line">     *             specified radix.</div><div class="line">     * <span class="doctag">@throws</span>     NumberFormatException if the &#123;<span class="doctag">@code</span> String&#125;</div><div class="line">     *             does not contain a parsable &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="comment">// 将String类型的值转成Integer(int)类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseUnsignedInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></div><div class="line">            <span class="keyword">throws</span> NumberFormatException &#123;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)  &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">char</span> firstChar = s.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span></div><div class="line">                        NumberFormatException(String.format(<span class="string">"Illegal leading minus sign "</span> +</div><div class="line">                        <span class="string">"on unsigned string %s."</span>, s));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (len &lt;= <span class="number">5</span> || <span class="comment">// Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits</span></div><div class="line">                        (radix == <span class="number">10</span> &amp;&amp; len &lt;= <span class="number">9</span>) ) &#123; <span class="comment">// Integer.MAX_VALUE in base 10 is 10 digits</span></div><div class="line">                    <span class="keyword">return</span> parseInt(s, radix);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">long</span> ell = Long.parseLong(s, radix);</div><div class="line">                    <span class="keyword">if</span> ((ell &amp; <span class="number">0xffff_ffff_0000_0000L</span>) == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> (<span class="keyword">int</span>) ell;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span></div><div class="line">                                NumberFormatException(String.format(<span class="string">"String value %s exceeds "</span> +</div><div class="line">                                <span class="string">"range of unsigned int."</span>, s));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses the string argument as an unsigned decimal integer. The</div><div class="line">     * characters in the string must all be decimal digits, except</div><div class="line">     * that the first character may be an an ASCII plus sign &#123;<span class="doctag">@code</span></div><div class="line">     * '+'&#125; (&#123;<span class="doctag">@code</span> '\u005Cu002B'&#125;). The resulting integer value</div><div class="line">     * is returned, exactly as if the argument and the radix 10 were</div><div class="line">     * given as arguments to the &#123;<span class="doctag">@link</span></div><div class="line">     * #parseUnsignedInt(java.lang.String, int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> s   a &#123;<span class="doctag">@code</span> String&#125; containing the unsigned &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     *            representation to be parsed</div><div class="line">     * <span class="doctag">@return</span>    the unsigned integer value represented by the argument in decimal.</div><div class="line">     * <span class="doctag">@throws</span>    NumberFormatException  if the string does not contain a</div><div class="line">     *            parsable unsigned integer.</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="comment">//将String类型的值转成Integer(int)类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseUnsignedInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> parseUnsignedInt(s, <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; object holding the value</div><div class="line">     * extracted from the specified &#123;<span class="doctag">@code</span> String&#125; when parsed</div><div class="line">     * with the radix given by the second argument. The first argument</div><div class="line">     * is interpreted as representing a signed integer in the radix</div><div class="line">     * specified by the second argument, exactly as if the arguments</div><div class="line">     * were given to the &#123;<span class="doctag">@link</span> #parseInt(java.lang.String, int)&#125;</div><div class="line">     * method. The result is an &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the integer value specified by the string.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> new Integer(Integer.parseInt(s, radix))&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the string to be parsed.</div><div class="line">     * <span class="doctag">@param</span>      radix the radix to be used in interpreting &#123;<span class="doctag">@code</span> s&#125;</div><div class="line">     * <span class="doctag">@return</span>     an &#123;<span class="doctag">@code</span> Integer&#125; object holding the value</div><div class="line">     *             represented by the string argument in the specified</div><div class="line">     *             radix.</div><div class="line">     * <span class="doctag">@exception</span> NumberFormatException if the &#123;<span class="doctag">@code</span> String&#125;</div><div class="line">     *            does not contain a parsable &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     */</div><div class="line">    <span class="comment">// 返回一个 Integer 对象。如果指定第二个参数radix，将第一个参数解释为用第二个参数指定的基数表示的有符号整数。如果没指定则按照十进制进行处理。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String s, <span class="keyword">int</span> radix)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.valueOf(parseInt(s,radix));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; object holding the</div><div class="line">     * value of the specified &#123;<span class="doctag">@code</span> String&#125;. The argument is</div><div class="line">     * interpreted as representing a signed decimal integer, exactly</div><div class="line">     * as if the argument were given to the &#123;<span class="doctag">@link</span></div><div class="line">     * #parseInt(java.lang.String)&#125; method. The result is an</div><div class="line">     * &#123;<span class="doctag">@code</span> Integer&#125; object that represents the integer value</div><div class="line">     * specified by the string.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> new Integer(Integer.parseInt(s))&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the string to be parsed.</div><div class="line">     * <span class="doctag">@return</span>     an &#123;<span class="doctag">@code</span> Integer&#125; object holding the value</div><div class="line">     *             represented by the string argument.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException  if the string cannot be parsed</div><div class="line">     *             as an integer.</div><div class="line">     */</div><div class="line">    <span class="comment">// 返回一个 Integer 对象。如果指定第二个参数radix，将第一个参数解释为用第二个参数指定的基数表示的有符号整数。如果没指定则按照十进制进行处理。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.valueOf(parseInt(s, <span class="number">10</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Cache to support the object identity semantics of autoboxing for values between</div><div class="line">     * -128 and 127 (inclusive) as required by JLS.</div><div class="line">     *</div><div class="line">     * The cache is initialized on first usage.  The size of the cache</div><div class="line">     * may be controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</div><div class="line">     * During VM initialization, java.lang.Integer.IntegerCache.high property</div><div class="line">     * may be set and saved in the private system properties in the</div><div class="line">     * sun.misc.VM class.</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="comment">// high value may be configured by property</span></div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                    sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</div><div class="line">     * required, this method should generally be used in preference to</div><div class="line">     * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</div><div class="line">     * to yield significantly better space and time performance by</div><div class="line">     * caching frequently requested values.</div><div class="line">     *</div><div class="line">     * This method will always cache values in the range -128 to 127,</div><div class="line">     * inclusive, and may cache other values outside of this range.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</div><div class="line">     * <span class="doctag">@since</span>  1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The value of the &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     * 私有属性，保存于基本数据类型对应的值</div><div class="line">     * <span class="doctag">@serial</span></div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   value   the value to be represented by the</div><div class="line">     *                  &#123;<span class="doctag">@code</span> Integer&#125; object.</div><div class="line">     */</div><div class="line">    <span class="comment">// 构造方法，构造一个新分配的 Integer 对象，它表示指定的 int 值。 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the &#123;<span class="doctag">@code</span> int&#125; value indicated by the</div><div class="line">     * &#123;<span class="doctag">@code</span> String&#125; parameter. The string is converted to an</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value in exactly the manner used by the</div><div class="line">     * &#123;<span class="doctag">@code</span> parseInt&#125; method for radix 10.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>      s   the &#123;<span class="doctag">@code</span> String&#125; to be converted to an</div><div class="line">     *                 &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     * <span class="doctag">@exception</span>  NumberFormatException  if the &#123;<span class="doctag">@code</span> String&#125; does not</div><div class="line">     *               contain a parsable integer.</div><div class="line">     * <span class="doctag">@see</span>        java.lang.Integer#parseInt(java.lang.String, int)</div><div class="line">     */</div><div class="line">    <span class="comment">// 构造方法，构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = parseInt(s, <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> byte&#125;</div><div class="line">     * after a narrowing primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.3 Narrowing Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">byteValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">byte</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> short&#125;</div><div class="line">     * after a narrowing primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.3 Narrowing Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">short</span> <span class="title">shortValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">short</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as an</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> long&#125;</div><div class="line">     * after a widening primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</div><div class="line">     * <span class="doctag">@see</span> Integer#toUnsignedLong(int)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> float&#125;</div><div class="line">     * after a widening primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value of this &#123;<span class="doctag">@code</span> Integer&#125; as a &#123;<span class="doctag">@code</span> double&#125;</div><div class="line">     * after a widening primitive conversion.</div><div class="line">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a &#123;<span class="doctag">@code</span> String&#125; object representing this</div><div class="line">     * &#123;<span class="doctag">@code</span> Integer&#125;'s value. The value is converted to signed</div><div class="line">     * decimal representation and returned as a string, exactly as if</div><div class="line">     * the integer value were given as an argument to the &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.Integer#toString(int)&#125; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  a string representation of the value of this object in</div><div class="line">     *          base&amp;nbsp;10.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toString(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a hash code for this &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  a hash code value for this object, equal to the</div><div class="line">     *          primitive &#123;<span class="doctag">@code</span> int&#125; value represented by this</div><div class="line">     *          &#123;<span class="doctag">@code</span> Integer&#125; object.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.hashCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a hash code for a &#123;<span class="doctag">@code</span> int&#125; value; compatible with</div><div class="line">     * &#123;<span class="doctag">@code</span> Integer.hashCode()&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value the value to hash</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a hash code value for a &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares this object to the specified object.  The result is</div><div class="line">     * &#123;<span class="doctag">@code</span> true&#125; if and only if the argument is not</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125; and is an &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * contains the same &#123;<span class="doctag">@code</span> int&#125; value as this object.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   obj   the object to compare with.</div><div class="line">     * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the objects are the same;</div><div class="line">     *          &#123;<span class="doctag">@code</span> false&#125; otherwise.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</div><div class="line">            <span class="keyword">return</span> value == ((Integer)obj).intValue();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Determines the integer value of the system property with the</div><div class="line">     * specified name.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The first argument is treated as the name of a system</div><div class="line">     * property.  System properties are accessible through the &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.System#getProperty(java.lang.String)&#125; method. The</div><div class="line">     * string value of this property is then interpreted as an integer</div><div class="line">     * value using the grammar supported by &#123;<span class="doctag">@link</span> Integer#decode decode&#125; and</div><div class="line">     * an &#123;<span class="doctag">@code</span> Integer&#125; object representing this value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If there is no property with the specified name, if the</div><div class="line">     * specified name is empty or &#123;<span class="doctag">@code</span> null&#125;, or if the property</div><div class="line">     * does not have the correct numeric format, then &#123;<span class="doctag">@code</span> null&#125; is</div><div class="line">     * returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> getInteger(nm, null)&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   nm   property name.</div><div class="line">     * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> Integer&#125; value of the property.</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException for the same reasons as</div><div class="line">     *          &#123;<span class="doctag">@link</span> System#getProperty(String) System.getProperty&#125;</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String)</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String, java.lang.String)</div><div class="line">     */</div><div class="line">    <span class="comment">// 确定具有指定名称的系统属性的整数值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getInteger(nm, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Determines the integer value of the system property with the</div><div class="line">     * specified name.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The first argument is treated as the name of a system</div><div class="line">     * property.  System properties are accessible through the &#123;<span class="doctag">@link</span></div><div class="line">     * java.lang.System#getProperty(java.lang.String)&#125; method. The</div><div class="line">     * string value of this property is then interpreted as an integer</div><div class="line">     * value using the grammar supported by &#123;<span class="doctag">@link</span> Integer#decode decode&#125; and</div><div class="line">     * an &#123;<span class="doctag">@code</span> Integer&#125; object representing this value is returned.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The second argument is the default value. An &#123;<span class="doctag">@code</span> Integer&#125; object</div><div class="line">     * that represents the value of the second argument is returned if there</div><div class="line">     * is no property of the specified name, if the property does not have</div><div class="line">     * the correct numeric format, or if the specified name is empty or</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;In other words, this method returns an &#123;<span class="doctag">@code</span> Integer&#125; object</div><div class="line">     * equal to the value of:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     *  &#123;<span class="doctag">@code</span> getInteger(nm, new Integer(val))&#125;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * but in practice it may be implemented in a manner such as:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;&lt;pre&gt;</div><div class="line">     * Integer result = getInteger(nm, null);</div><div class="line">     * return (result == null) ? new Integer(val) : result;</div><div class="line">     * &lt;/pre&gt;&lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * to avoid the unnecessary allocation of an &#123;<span class="doctag">@code</span> Integer&#125;</div><div class="line">     * object when the default value is not needed.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   nm   property name.</div><div class="line">     * <span class="doctag">@param</span>   val   default value.</div><div class="line">     * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> Integer&#125; value of the property.</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException for the same reasons as</div><div class="line">     *          &#123;<span class="doctag">@link</span> System#getProperty(String) System.getProperty&#125;</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String)</div><div class="line">     * <span class="doctag">@see</span>     java.lang.System#getProperty(java.lang.String, java.lang.String)</div><div class="line">     */</div><div class="line">    <span class="comment">// 确定具有指定名称的系统属性的整数值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        Integer result = getInteger(nm, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> (result == <span class="keyword">null</span>) ? Integer.valueOf(val) : result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the integer value of the system property with the</div><div class="line">     * specified name.  The first argument is treated as the name of a</div><div class="line">     * system property.  System properties are accessible through the</div><div class="line">     * &#123;<span class="doctag">@link</span> java.lang.System#getProperty(java.lang.String)&#125; method.</div><div class="line">     * The string value of this property is then interpreted as an</div><div class="line">     * integer value, as per the &#123;<span class="doctag">@link</span> Integer#decode decode&#125; method,</div><div class="line">     * and an &#123;<span class="doctag">@code</span> Integer&#125; object representing this value is</div><div class="line">     * returned; in summary:</div><div class="line">     *</div><div class="line">     * &lt;ul&gt;&lt;li&gt;If the property value begins with the two ASCII characters</div><div class="line">     *         &#123;<span class="doctag">@code</span> 0x&#125; or the ASCII character &#123;<span class="doctag">@code</span> #&#125;, not</div><div class="line">     *      followed by a minus sign, then the rest of it is parsed as a</div><div class="line">     *      hexadecimal integer exactly as by the method</div><div class="line">     *      &#123;<span class="doctag">@link</span> #valueOf(java.lang.String, int)&#125; with radix 16.</div><div class="line">     * &lt;li&gt;If the property value begins with the ASCII character</div><div class="line">     *     &#123;<span class="doctag">@code</span> 0&#125; followed by another character, it is parsed as an</div><div class="line">     *     octal integer exactly as by the method</div><div class="line">     *     &#123;<span class="doctag">@link</span> #valueOf(java.lang.String, int)&#125; with radix 8.</div><div class="line">     * &lt;li&gt;Otherwise, the property value is parsed as a decimal integer</div><div class="line">     * exactly as by the method &#123;<span class="doctag">@link</span> #valueOf(java.lang.String, int)&#125;</div><div class="line">     * with radix 10.</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The second argument is the default value. The default value is</div><div class="line">     * returned if there is no property of the specified name, if the</div><div class="line">     * property does not have the correct numeric format, or if the</div><div class="line">     * specified name is empty or &#123;<span class="doctag">@code</span> null&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   nm   property name.</div><div class="line">     * <span class="doctag">@param</span>   val   default value.</div><div class="line">     * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> Integer&#125; value of the property.</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException for the same reasons as</div><div class="line">     *          &#123;<span class="doctag">@link</span> System#getProperty(String) System.getProperty&#125;</div><div class="line">     * <span class="doctag">@see</span>     System#getProperty(java.lang.String)</div><div class="line">     * <span class="doctag">@see</span>     System#getProperty(java.lang.String, java.lang.String)</div><div class="line">     */</div><div class="line">    <span class="comment">// 确定具有指定名称的系统属性的整数值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm, Integer val)</span> </span>&#123;</div><div class="line">        String v = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            v = System.getProperty(nm);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException | NullPointerException e) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> Integer.decode(v);</div><div class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Decodes a &#123;<span class="doctag">@code</span> String&#125; into an &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     * Accepts decimal, hexadecimal, and octal numbers given</div><div class="line">     * by the following grammar:</div><div class="line">     *</div><div class="line">     * &lt;blockquote&gt;</div><div class="line">     * &lt;dl&gt;</div><div class="line">     * &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> 0x&#125; &lt;i&gt;HexDigits&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> 0X&#125; &lt;i&gt;HexDigits&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> #&#125; &lt;i&gt;HexDigits&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &#123;<span class="doctag">@code</span> 0&#125; &lt;i&gt;OctalDigits&lt;/i&gt;</div><div class="line">     *</div><div class="line">     * &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;</div><div class="line">     * &lt;dd&gt;&#123;<span class="doctag">@code</span> -&#125;</div><div class="line">     * &lt;dd&gt;&#123;<span class="doctag">@code</span> +&#125;</div><div class="line">     * &lt;/dl&gt;</div><div class="line">     * &lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;</div><div class="line">     * are as defined in section 3.10.1 of</div><div class="line">     * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;,</div><div class="line">     * except that underscores are not accepted between digits.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;The sequence of characters following an optional</div><div class="line">     * sign and/or radix specifier ("&#123;<span class="doctag">@code</span> 0x&#125;", "&#123;<span class="doctag">@code</span> 0X&#125;",</div><div class="line">     * "&#123;<span class="doctag">@code</span> #&#125;", or leading zero) is parsed as by the &#123;<span class="doctag">@code</span></div><div class="line">     * Integer.parseInt&#125; method with the indicated radix (10, 16, or</div><div class="line">     * 8).  This sequence of characters must represent a positive</div><div class="line">     * value or a &#123;<span class="doctag">@link</span> NumberFormatException&#125; will be thrown.  The</div><div class="line">     * result is negated if first character of the specified &#123;<span class="doctag">@code</span></div><div class="line">     * String&#125; is the minus sign.  No whitespace characters are</div><div class="line">     * permitted in the &#123;<span class="doctag">@code</span> String&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>     nm the &#123;<span class="doctag">@code</span> String&#125; to decode.</div><div class="line">     * <span class="doctag">@return</span>    an &#123;<span class="doctag">@code</span> Integer&#125; object holding the &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     *             value represented by &#123;<span class="doctag">@code</span> nm&#125;</div><div class="line">     * <span class="doctag">@exception</span> NumberFormatException  if the &#123;<span class="doctag">@code</span> String&#125; does not</div><div class="line">     *            contain a parsable integer.</div><div class="line">     * <span class="doctag">@see</span> java.lang.Integer#parseInt(java.lang.String, int)</div><div class="line">     */</div><div class="line">    <span class="comment">// 该方法的作用是将 String 解码为 Integer。接受十进制、十六进制和八进制数字</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">decode</span><span class="params">(String nm)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">        <span class="keyword">int</span> radix = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</div><div class="line">        Integer result;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (nm.length() == <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"Zero length string"</span>);</div><div class="line">        <span class="keyword">char</span> firstChar = nm.charAt(<span class="number">0</span>);</div><div class="line">        <span class="comment">// Handle sign, if present</span></div><div class="line">        <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">            negative = <span class="keyword">true</span>;</div><div class="line">            index++;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar == <span class="string">'+'</span>)</div><div class="line">            index++;</div><div class="line"></div><div class="line">        <span class="comment">// Handle radix specifier, if present</span></div><div class="line">        <span class="keyword">if</span> (nm.startsWith(<span class="string">"0x"</span>, index) || nm.startsWith(<span class="string">"0X"</span>, index)) &#123;</div><div class="line">            index += <span class="number">2</span>;</div><div class="line">            radix = <span class="number">16</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nm.startsWith(<span class="string">"#"</span>, index)) &#123;</div><div class="line">            index ++;</div><div class="line">            radix = <span class="number">16</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nm.startsWith(<span class="string">"0"</span>, index) &amp;&amp; nm.length() &gt; <span class="number">1</span> + index) &#123;</div><div class="line">            index ++;</div><div class="line">            radix = <span class="number">8</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (nm.startsWith(<span class="string">"-"</span>, index) || nm.startsWith(<span class="string">"+"</span>, index))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"Sign character in wrong position"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = Integer.valueOf(nm.substring(index), radix);</div><div class="line">            result = negative ? Integer.valueOf(-result.intValue()) : result;</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="comment">// If number is Integer.MIN_VALUE, we'll end up here. The next line</span></div><div class="line">            <span class="comment">// handles this case, and causes any genuine format error to be</span></div><div class="line">            <span class="comment">// rethrown.</span></div><div class="line">            String constant = negative ? (<span class="string">"-"</span> + nm.substring(index))</div><div class="line">                    : nm.substring(index);</div><div class="line">            result = Integer.valueOf(constant, radix);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares two &#123;<span class="doctag">@code</span> Integer&#125; objects numerically.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   anotherInteger   the &#123;<span class="doctag">@code</span> Integer&#125; to be compared.</div><div class="line">     * <span class="doctag">@return</span>  the value &#123;<span class="doctag">@code</span> 0&#125; if this &#123;<span class="doctag">@code</span> Integer&#125; is</div><div class="line">     *          equal to the argument &#123;<span class="doctag">@code</span> Integer&#125;; a value less than</div><div class="line">     *          &#123;<span class="doctag">@code</span> 0&#125; if this &#123;<span class="doctag">@code</span> Integer&#125; is numerically less</div><div class="line">     *          than the argument &#123;<span class="doctag">@code</span> Integer&#125;; and a value greater</div><div class="line">     *          than &#123;<span class="doctag">@code</span> 0&#125; if this &#123;<span class="doctag">@code</span> Integer&#125; is numerically</div><div class="line">     *           greater than the argument &#123;<span class="doctag">@code</span> Integer&#125; (signed</div><div class="line">     *           comparison).</div><div class="line">     * <span class="doctag">@since</span>   1.2</div><div class="line">     */</div><div class="line">    <span class="comment">// 很简单，直接比较</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares two &#123;<span class="doctag">@code</span> int&#125; values numerically.</div><div class="line">     * The value returned is identical to what would be returned by:</div><div class="line">     * &lt;pre&gt;</div><div class="line">     *    Integer.valueOf(x).compareTo(Integer.valueOf(y))</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  x the first &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@param</span>  y the second &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@return</span> the value &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x == y&#125;;</div><div class="line">     *         a value less than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &lt; y&#125;; and</div><div class="line">     *         a value greater than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &gt; y&#125;</div><div class="line">     * <span class="doctag">@since</span> 1.7</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compares two &#123;<span class="doctag">@code</span> int&#125; values numerically treating the values</div><div class="line">     * as unsigned.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  x the first &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@param</span>  y the second &#123;<span class="doctag">@code</span> int&#125; to compare</div><div class="line">     * <span class="doctag">@return</span> the value &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x == y&#125;; a value less</div><div class="line">     *         than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &lt; y&#125; as unsigned values; and</div><div class="line">     *         a value greater than &#123;<span class="doctag">@code</span> 0&#125; if &#123;<span class="doctag">@code</span> x &gt; y&#125; as</div><div class="line">     *         unsigned values</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareUnsigned</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> compare(x + MIN_VALUE, y + MIN_VALUE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Converts the argument to a &#123;<span class="doctag">@code</span> long&#125; by an unsigned</div><div class="line">     * conversion.  In an unsigned conversion to a &#123;<span class="doctag">@code</span> long&#125;, the</div><div class="line">     * high-order 32 bits of the &#123;<span class="doctag">@code</span> long&#125; are zero and the</div><div class="line">     * low-order 32 bits are equal to the bits of the integer</div><div class="line">     * argument.</div><div class="line">     *</div><div class="line">     * Consequently, zero and positive &#123;<span class="doctag">@code</span> int&#125; values are mapped</div><div class="line">     * to a numerically equal &#123;<span class="doctag">@code</span> long&#125; value and negative &#123;<span class="doctag">@code</span></div><div class="line">     * int&#125; values are mapped to a &#123;<span class="doctag">@code</span> long&#125; value equal to the</div><div class="line">     * input plus 2&lt;sup&gt;32&lt;/sup&gt;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  x the value to convert to an unsigned &#123;<span class="doctag">@code</span> long&#125;</div><div class="line">     * <span class="doctag">@return</span> the argument converted to &#123;<span class="doctag">@code</span> long&#125; by an unsigned</div><div class="line">     *         conversion</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">toUnsignedLong</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((<span class="keyword">long</span>) x) &amp; <span class="number">0xffffffffL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the unsigned quotient of dividing the first argument by</div><div class="line">     * the second where each argument and the result is interpreted as</div><div class="line">     * an unsigned value.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that in two's complement arithmetic, the three other</div><div class="line">     * basic arithmetic operations of add, subtract, and multiply are</div><div class="line">     * bit-wise identical if the two operands are regarded as both</div><div class="line">     * being signed or both being unsigned.  Therefore separate &#123;<span class="doctag">@code</span></div><div class="line">     * addUnsigned&#125;, etc. methods are not provided.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dividend the value to be divided</div><div class="line">     * <span class="doctag">@param</span> divisor the value doing the dividing</div><div class="line">     * <span class="doctag">@return</span> the unsigned quotient of the first argument divided by</div><div class="line">     * the second argument</div><div class="line">     * <span class="doctag">@see</span> #remainderUnsigned</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divideUnsigned</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="comment">// In lieu of tricky code, for now just use long arithmetic.</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(toUnsignedLong(dividend) / toUnsignedLong(divisor));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the unsigned remainder from dividing the first argument</div><div class="line">     * by the second where each argument and the result is interpreted</div><div class="line">     * as an unsigned value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dividend the value to be divided</div><div class="line">     * <span class="doctag">@param</span> divisor the value doing the dividing</div><div class="line">     * <span class="doctag">@return</span> the unsigned remainder of the first argument divided by</div><div class="line">     * the second argument</div><div class="line">     * <span class="doctag">@see</span> #divideUnsigned</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">remainderUnsigned</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">        <span class="comment">// In lieu of tricky code, for now just use long arithmetic.</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(toUnsignedLong(dividend) % toUnsignedLong(divisor));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Bit twiddling</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The number of bits used to represent an &#123;<span class="doctag">@code</span> int&#125; value in two's</div><div class="line">     * complement binary form.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="comment">//用来以二进制补码形式表示 int 值的比特位数。 </span></div><div class="line">    <span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">32</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The number of bytes used to represent a &#123;<span class="doctag">@code</span> int&#125; value in two's</div><div class="line">     * complement binary form.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="comment">//用来以二进制补码形式表示 int 值的字节数。1.8以后才有 </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BYTES = SIZE / Byte.SIZE;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> int&#125; value with at most a single one-bit, in the</div><div class="line">     * position of the highest-order ("leftmost") one-bit in the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  Returns zero if the specified value has no</div><div class="line">     * one-bits in its two's complement binary representation, that is, if it</div><div class="line">     * is equal to zero.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose highest one bit is to be computed</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> int&#125; value with a single one-bit, in the position</div><div class="line">     *     of the highest-order one-bit in the specified value, or zero if</div><div class="line">     *     the specified value is itself equal to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">highestOneBit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 3-1</span></div><div class="line">        i |= (i &gt;&gt;  <span class="number">1</span>);</div><div class="line">        i |= (i &gt;&gt;  <span class="number">2</span>);</div><div class="line">        i |= (i &gt;&gt;  <span class="number">4</span>);</div><div class="line">        i |= (i &gt;&gt;  <span class="number">8</span>);</div><div class="line">        i |= (i &gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="keyword">return</span> i - (i &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> int&#125; value with at most a single one-bit, in the</div><div class="line">     * position of the lowest-order ("rightmost") one-bit in the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  Returns zero if the specified value has no</div><div class="line">     * one-bits in its two's complement binary representation, that is, if it</div><div class="line">     * is equal to zero.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose lowest one bit is to be computed</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> int&#125; value with a single one-bit, in the position</div><div class="line">     *     of the lowest-order one-bit in the specified value, or zero if</div><div class="line">     *     the specified value is itself equal to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowestOneBit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Section 2-1</span></div><div class="line">        <span class="keyword">return</span> i &amp; -i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of zero bits preceding the highest-order</div><div class="line">     * ("leftmost") one-bit in the two's complement binary representation</div><div class="line">     * of the specified &#123;<span class="doctag">@code</span> int&#125; value.  Returns 32 if the</div><div class="line">     * specified value has no one-bits in its two's complement representation,</div><div class="line">     * in other words if it is equal to zero.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that this method is closely related to the logarithm base 2.</div><div class="line">     * For all positive &#123;<span class="doctag">@code</span> int&#125; values x:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;floor(log&lt;sub&gt;2&lt;/sub&gt;(x)) = &#123;<span class="doctag">@code</span> 31 - numberOfLeadingZeros(x)&#125;</div><div class="line">     * &lt;li&gt;ceil(log&lt;sub&gt;2&lt;/sub&gt;(x)) = &#123;<span class="doctag">@code</span> 32 - numberOfLeadingZeros(x - 1)&#125;</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose number of leading zeros is to be computed</div><div class="line">     * <span class="doctag">@return</span> the number of zero bits preceding the highest-order</div><div class="line">     *     ("leftmost") one-bit in the two's complement binary representation</div><div class="line">     *     of the specified &#123;<span class="doctag">@code</span> int&#125; value, or 32 if the value</div><div class="line">     *     is equal to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-6</span></div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">32</span>;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">16</span> == <span class="number">0</span>) &#123; n += <span class="number">16</span>; i &lt;&lt;= <span class="number">16</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">24</span> == <span class="number">0</span>) &#123; n +=  <span class="number">8</span>; i &lt;&lt;=  <span class="number">8</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">28</span> == <span class="number">0</span>) &#123; n +=  <span class="number">4</span>; i &lt;&lt;=  <span class="number">4</span>; &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;&gt;&gt; <span class="number">30</span> == <span class="number">0</span>) &#123; n +=  <span class="number">2</span>; i &lt;&lt;=  <span class="number">2</span>; &#125;</div><div class="line">        n -= i &gt;&gt;&gt; <span class="number">31</span>;</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of zero bits following the lowest-order ("rightmost")</div><div class="line">     * one-bit in the two's complement binary representation of the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  Returns 32 if the specified value has no</div><div class="line">     * one-bits in its two's complement representation, in other words if it is</div><div class="line">     * equal to zero.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose number of trailing zeros is to be computed</div><div class="line">     * <span class="doctag">@return</span> the number of zero bits following the lowest-order ("rightmost")</div><div class="line">     *     one-bit in the two's complement binary representation of the</div><div class="line">     *     specified &#123;<span class="doctag">@code</span> int&#125; value, or 32 if the value is equal</div><div class="line">     *     to zero.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfTrailingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-14</span></div><div class="line">        <span class="keyword">int</span> y;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">32</span>;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">31</span>;</div><div class="line">        y = i &lt;&lt;<span class="number">16</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n -<span class="number">16</span>; i = y; &#125;</div><div class="line">        y = i &lt;&lt; <span class="number">8</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n - <span class="number">8</span>; i = y; &#125;</div><div class="line">        y = i &lt;&lt; <span class="number">4</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n - <span class="number">4</span>; i = y; &#125;</div><div class="line">        y = i &lt;&lt; <span class="number">2</span>; <span class="keyword">if</span> (y != <span class="number">0</span>) &#123; n = n - <span class="number">2</span>; i = y; &#125;</div><div class="line">        <span class="keyword">return</span> n - ((i &lt;&lt; <span class="number">1</span>) &gt;&gt;&gt; <span class="number">31</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of one-bits in the two's complement binary</div><div class="line">     * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.  This function is</div><div class="line">     * sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bits are to be counted</div><div class="line">     * <span class="doctag">@return</span> the number of one-bits in the two's complement binary</div><div class="line">     *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 5-2</span></div><div class="line">        i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</div><div class="line">        i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</div><div class="line">        i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line">        i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by rotating the two's complement binary</div><div class="line">     * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value left by the</div><div class="line">     * specified number of bits.  (Bits shifted out of the left hand, or</div><div class="line">     * high-order, side reenter on the right, or low-order.)</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that left rotation with a negative distance is equivalent to</div><div class="line">     * right rotation: &#123;<span class="doctag">@code</span> rotateLeft(val, -distance) == rotateRight(val,</div><div class="line">     * distance)&#125;.  Note also that rotation by any multiple of 32 is a</div><div class="line">     * no-op, so all but the last five bits of the rotation distance can be</div><div class="line">     * ignored, even if the distance is negative: &#123;<span class="doctag">@code</span> rotateLeft(val,</div><div class="line">     * distance) == rotateLeft(val, distance &amp; 0x1F)&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bits are to be rotated left</div><div class="line">     * <span class="doctag">@param</span> distance the number of bit positions to rotate left</div><div class="line">     * <span class="doctag">@return</span> the value obtained by rotating the two's complement binary</div><div class="line">     *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value left by the</div><div class="line">     *     specified number of bits.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rotateLeft</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> distance)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (i &lt;&lt; distance) | (i &gt;&gt;&gt; -distance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by rotating the two's complement binary</div><div class="line">     * representation of the specified &#123;<span class="doctag">@code</span> int&#125; value right by the</div><div class="line">     * specified number of bits.  (Bits shifted out of the right hand, or</div><div class="line">     * low-order, side reenter on the left, or high-order.)</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that right rotation with a negative distance is equivalent to</div><div class="line">     * left rotation: &#123;<span class="doctag">@code</span> rotateRight(val, -distance) == rotateLeft(val,</div><div class="line">     * distance)&#125;.  Note also that rotation by any multiple of 32 is a</div><div class="line">     * no-op, so all but the last five bits of the rotation distance can be</div><div class="line">     * ignored, even if the distance is negative: &#123;<span class="doctag">@code</span> rotateRight(val,</div><div class="line">     * distance) == rotateRight(val, distance &amp; 0x1F)&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bits are to be rotated right</div><div class="line">     * <span class="doctag">@param</span> distance the number of bit positions to rotate right</div><div class="line">     * <span class="doctag">@return</span> the value obtained by rotating the two's complement binary</div><div class="line">     *     representation of the specified &#123;<span class="doctag">@code</span> int&#125; value right by the</div><div class="line">     *     specified number of bits.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rotateRight</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> distance)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (i &gt;&gt;&gt; distance) | (i &lt;&lt; -distance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by reversing the order of the bits in the</div><div class="line">     * two's complement binary representation of the specified &#123;<span class="doctag">@code</span> int&#125;</div><div class="line">     * value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value to be reversed</div><div class="line">     * <span class="doctag">@return</span> the value obtained by reversing order of the bits in the</div><div class="line">     *     specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Figure 7-1</span></div><div class="line">        i = (i &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span> | (i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>;</div><div class="line">        i = (i &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span> | (i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>;</div><div class="line">        i = (i &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span> | (i &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f0f0f0f</span>;</div><div class="line">        i = (i &lt;&lt; <span class="number">24</span>) | ((i &amp; <span class="number">0xff00</span>) &lt;&lt; <span class="number">8</span>) |</div><div class="line">                ((i &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff00</span>) | (i &gt;&gt;&gt; <span class="number">24</span>);</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the signum function of the specified &#123;<span class="doctag">@code</span> int&#125; value.  (The</div><div class="line">     * return value is -1 if the specified value is negative; 0 if the</div><div class="line">     * specified value is zero; and 1 if the specified value is positive.)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose signum is to be computed</div><div class="line">     * <span class="doctag">@return</span> the signum function of the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">signum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">// HD, Section 2-7</span></div><div class="line">        <span class="keyword">return</span> (i &gt;&gt; <span class="number">31</span>) | (-i &gt;&gt;&gt; <span class="number">31</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value obtained by reversing the order of the bytes in the</div><div class="line">     * two's complement representation of the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> i the value whose bytes are to be reversed</div><div class="line">     * <span class="doctag">@return</span> the value obtained by reversing the bytes in the specified</div><div class="line">     *     &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@since</span> 1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverseBytes</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((i &gt;&gt;&gt; <span class="number">24</span>)           ) |</div><div class="line">                ((i &gt;&gt;   <span class="number">8</span>) &amp;   <span class="number">0xFF00</span>) |</div><div class="line">                ((i &lt;&lt;   <span class="number">8</span>) &amp; <span class="number">0xFF0000</span>) |</div><div class="line">                ((i &lt;&lt; <span class="number">24</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Adds two integers together as per the + operator.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a the first operand</div><div class="line">     * <span class="doctag">@param</span> b the second operand</div><div class="line">     * <span class="doctag">@return</span> the sum of &#123;<span class="doctag">@code</span> a&#125; and &#123;<span class="doctag">@code</span> b&#125;</div><div class="line">     * <span class="doctag">@see</span> java.util.function.BinaryOperator</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the greater of two &#123;<span class="doctag">@code</span> int&#125; values</div><div class="line">     * as if by calling &#123;<span class="doctag">@link</span> Math#max(int, int) Math.max&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a the first operand</div><div class="line">     * <span class="doctag">@param</span> b the second operand</div><div class="line">     * <span class="doctag">@return</span> the greater of &#123;<span class="doctag">@code</span> a&#125; and &#123;<span class="doctag">@code</span> b&#125;</div><div class="line">     * <span class="doctag">@see</span> java.util.function.BinaryOperator</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.max(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the smaller of two &#123;<span class="doctag">@code</span> int&#125; values</div><div class="line">     * as if by calling &#123;<span class="doctag">@link</span> Math#min(int, int) Math.min&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a the first operand</div><div class="line">     * <span class="doctag">@param</span> b the second operand</div><div class="line">     * <span class="doctag">@return</span> the smaller of &#123;<span class="doctag">@code</span> a&#125; and &#123;<span class="doctag">@code</span> b&#125;</div><div class="line">     * <span class="doctag">@see</span> java.util.function.BinaryOperator</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.min(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability </span></div><div class="line">     * serialVersionUID和序列化有关，可以在String源码中学习到</div><div class="line">     */</div><div class="line">    <span class="meta">@Native</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1360826667806852920L</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考资料：<br><a href="http://www.tuicool.com/articles/22aQjuu" target="_blank" rel="external">http://www.tuicool.com/articles/22aQjuu</a><br><a href="http://www.07net01.com/program/2016/03/1387703.html" target="_blank" rel="external">http://www.07net01.com/program/2016/03/1387703.html</a><br><a href="http://www.cnblogs.com/fangfuhai/p/5502290.html" target="_blank" rel="external">http://www.cnblogs.com/fangfuhai/p/5502290.html</a><br><a href="https://my.oschina.net/wnayuanbiao/blog/188725" target="_blank" rel="external">https://my.oschina.net/wnayuanbiao/blog/188725</a><br><a href="http://blog.csdn.net/yvonne8_5/article/details/50956016" target="_blank" rel="external">http://blog.csdn.net/yvonne8_5/article/details/50956016</a><br>《Java核心技术 卷I》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中Object类源代码详解(转)]]></title>
      <url>http://bigmingtalk.github.io/2016/12/05/Java%E4%B8%ADObject%E7%B1%BB%E6%BA%90%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3(%E8%BD%AC)/</url>
      <content type="html"><![CDATA[<p>Java中的Object类是类层次结构的根类。Java中每个类都使用Object作为超类（都直接或间接继承此类）。所有对象（包括数组）都实现这个类的所有方法。Object类的源代码如下所示：<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;     </div><div class="line">      </div><div class="line">   <span class="comment">/* 一个本地方法，具体是用C（C++）在动态图链接库中实现的，然后通过JNI调用。*/</span>      </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;     </div><div class="line">  <span class="comment">/* 对象初始化时自动调用此方法*/</span>    </div><div class="line">    <span class="keyword">static</span> &#123;     </div><div class="line">        registerNatives();     </div><div class="line">    &#125;     </div><div class="line">   <span class="comment">/* 返回此Object的运行时类，也是一个本地方法。*/</span>    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();     </div><div class="line">    </div><div class="line"><span class="comment">/*   </span></div><div class="line">hashCode 的常规协定是：   </div><div class="line">1. 在Java应用程序执行期间，在对同一对象多次调用hashCode方法时，必须一致地返回相同的整数，前提是将对象进行equals比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。    </div><div class="line">2. 如果根据equals(Object)方法，两个对象是相等的，那么对这两个对象中的每个对象调用hashCode方法都必须生成相同的整数结果。    </div><div class="line">3. 如果根据equals(java.lang.Object)方法，两个对象不相等，那么对这两个对象中的任一对象上调用hashCode方法不要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。   </div><div class="line">*/    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;     </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;     </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    <span class="comment">/*本地clone方法，用于对象的复制。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;     </div><div class="line">    </div><div class="line">    <span class="comment">/*返回该对象的字符串表示。非常重要的方法*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;     </div><div class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">   <span class="comment">/*唤醒在此对象监视器上等待的单个线程。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;     </div><div class="line">    </div><div class="line">   <span class="comment">/*唤醒在此对象监视器上等待的所有线程。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;     </div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">/*在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。换句话说，此方法的行为就好像它仅执行 wait(0) 调用一样。    </span></div><div class="line">当前线程必须拥有此对象监视器。该线程发布对此监视器的所有权并等待，直到其他线程通过调用 notify 方法，或 notifyAll 方法通知在此对象的监视器上等待的线程醒来。然后该线程将等到重新获得对监视器的所有权后才能继续执行。*/    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">    wait(<span class="number">0</span>);     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">   <span class="comment">/*在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;     </div><div class="line">    </div><div class="line">    <span class="comment">/* 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;     </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);     </div><div class="line">        &#125;     </div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;     </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(     </div><div class="line">                <span class="string">"nanosecond timeout value out of range"</span>);     </div><div class="line">        &#125;     </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; timeout == <span class="number">0</span>)) &#123;     </div><div class="line">        timeout++;     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    wait(timeout);     </div><div class="line">    &#125;     </div><div class="line">    </div><div class="line">    <span class="comment">/*当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。*/</span>    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>懂得Objet类中的方法是非重要的，因为每一个类都直接或间接地继承了它的方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谈谈Java的native关键字以及JNI调用和实现]]></title>
      <url>http://bigmingtalk.github.io/2016/12/05/%E8%B0%88%E8%B0%88Java%E7%9A%84native%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8AJNI%E8%B0%83%E7%94%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>今天看Java源代码的时候发现很多的native关键字来修饰一个方法，这些方法没有具体的实现，以前只知道native方法是非Java代码实现的方法，但是对于其具体的调用以及意义并不是非常清楚，所以在这里整理一下，方便大家的阅读，同时也供自己日后参考之用。<br><a id="more"></a></p>
<h2 id="Native-Method"><a href="#Native-Method" class="headerlink" title="Native Method"></a>Native Method</h2><p>Java中的native关键字是方法修饰符, 而由native修饰的方法是由另外一种语言实现的本地方法。</p>
<h3 id="一-什么是Native-Method"><a href="#一-什么是Native-Method" class="headerlink" title="一. 什么是Native Method"></a>一. 什么是Native Method</h3><p>简单地讲，一个native Method就是一个Java调用非Java代码的接口。一个native Method是这样一个Java的方法：该方法的实现由非Java语言实现，比如C。这个特征并非Java所特有，很多其它的编程语言都有这一机制，比如在C++中，你可以用extern “C”告知C++编译器去调用一个C的函数。”A native method is a Java method whose implementation is provided by non-java code.”</p>
<p>在定义一个native method时，并不提供实现体（有些像定义一个Java interface），因为其实现体是由非Java语言在外面实现的。比如在Object.java中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123; </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>; </div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;     </div><div class="line">		registerNatives();     </div><div class="line">	&#125;        </div><div class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;     </div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;     </div><div class="line">	<span class="keyword">return</span> (<span class="keyword">this</span> == obj);     </div><div class="line">	&#125;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;     </div><div class="line">	<span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());     </div><div class="line">	&#125;     </div><div class="line">	  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;     </div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;     </div><div class="line">	</div><div class="line">	  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">	wait(<span class="number">0</span>);     </div><div class="line">	&#125;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;     </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;     </div><div class="line">		<span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;     </div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);     </div><div class="line">		&#125;     </div><div class="line">	</div><div class="line">		<span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;     </div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(     </div><div class="line">				<span class="string">"nanosecond timeout value out of range"</span>);     </div><div class="line">		&#125;     </div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (nanos &gt;= <span class="number">500000</span> || (nanos != <span class="number">0</span> &amp;&amp; timeout == <span class="number">0</span>)) &#123;     </div><div class="line">		timeout++;     </div><div class="line">	&#125;     </div><div class="line">	</div><div class="line">	wait(timeout);     </div><div class="line">	&#125;     </div><div class="line">	  </div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>诸如getClass()，hashCode()，clone()，notify()，notifyAll()，wait(long timeout)等我们熟悉的方法都是native method。这些native method的声明描述了这些非Java代码在Java代码中应该看起来的样子。</p>
<p>标识符native可以与所有其它的Java标识符连用，但是abstract除外。这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非Java的，但是abstract却显然的指明这些方法无实现体。native与其它Java标识符连用时，其意义同非native method并无差别，比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，比如当你想用一个native method去调用一个C的类库时。</p>
<p>一个native method方法可以返回任何Java类型，包括非基本类型，而且同样可以进行异常控制。这些方法的实现体可以制一个异常并且将其抛出，这一点与Java的方法非常相似。当一个native method接收到一些非基本类型时如Object或一个整型数组时，这个方法可以访问这非些基本型的内部，但是这将使这个native方法依赖于你所访问的Java类的实现。有一点要牢牢记住：我们可以在一个native method的本地实现中访问所有的Java特性，但是这要依赖于你所访问的Java特性的实现，而且这样做远远不如在Java语言中使用那些特性方便和容易。</p>
<p>一个native method的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。JVM将控制调用本地方法的所有细节。需要注意当我们将一个本地方法声明为final的情况。</p>
<p>用Java实现的方法体在被编译时可能会因为内联而产生效率上的提升。但是一个native final方法是否也能获得这样的好处却是值得怀疑的，但是这只是一个代码优化方面的问题，对功能实现没有影响。</p>
<p>如果一个含有本地方法的类被继承，子类会继承这个本地方法并且可以用Java语言重写这个方法（这个似乎看起来有些奇怪），同样的如果一个本地方法被fianl标识，它被继承后不能被重写。</p>
<p>本地方法非常有用，因为它有效地扩充了JVM。事实上，我们所写的Java代码已经用到了本地方法，在sun的Java的并发（多线程）的机制实现中，许多与操作系统的接触点都用到了本地方法，这使得Java程序能够超越Java运行时的界限。有了本地方法，Java程序可以做任何应用层次的任务。</p>
<h3 id="二-为什么要使用Native-Method"><a href="#二-为什么要使用Native-Method" class="headerlink" title="二. 为什么要使用Native Method"></a>二. 为什么要使用Native Method</h3><p>Java使用起来非常方便，然而有些层次的任务用Java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p>
<h4 id="与Java环境外交互："><a href="#与Java环境外交互：" class="headerlink" title="与Java环境外交互："></a>与Java环境外交互：</h4><p>有时Java应用需要与Java外面的环境交互。这是本地方法存在的主要原因，你可以想想Java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p>
<h4 id="与操作系统交互："><a href="#与操作系统交互：" class="headerlink" title="与操作系统交互："></a>与操作系统交互：</h4><p>JVM支持着Java语言本身和运行时库，它是Java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用Java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些Java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</p>
<h4 id="Sun’s-Java"><a href="#Sun’s-Java" class="headerlink" title="Sun’s Java"></a>Sun’s Java</h4><p>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用Java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用Java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows 95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</p>
<h3 id="三-JVM怎样使Native-Method跑起来"><a href="#三-JVM怎样使Native-Method跑起来" class="headerlink" title="三.JVM怎样使Native Method跑起来"></a>三.JVM怎样使Native Method跑起来</h3><p>我们知道，当一个类第一次被使用到时，这个类的字节码会被加载到内存，并且只会回载一次。在这个被加载的字节码的入口维持着一个该类所有方法描述符的list，这些方法描述符包含这样一些信息：方法代码存于何处，它有哪些参数，方法的描述符（public之类）等等。</p>
<p>如果一个方法描述符内有native，这个描述符块将有一个指向该方法的实现的指针。这些实现在一些DLL文件内，但是它们会被操作系统加载到Java程序的地址空间。当一个带有本地方法的类被加载时，其相关的DLL并未被加载，因此指向方法实现的指针并不会被设置。当本地方法被调用之前，这些DLL才会被加载，这是通过调用java.system.loadLibrary()实现的。使用本地方法是有开销的，它丧失了Java的很多好处。如果别无选择，我们可以选择使用本地方法。</p>
<h2 id="JNI调用和实现"><a href="#JNI调用和实现" class="headerlink" title="JNI调用和实现"></a>JNI调用和实现</h2><h3 id="一-JNI简介"><a href="#一-JNI简介" class="headerlink" title="一. JNI简介"></a>一. JNI简介</h3><p>JNI全称是Java Native Interface（Java本地接口）单词首字母的缩写，本地接口就是指用C和C++开发的接口。由于JNI是 JVM规范 中的一部份，因此可以将我们写的JNI程序在任何实现了JNI规范的Java虚拟机中运行。同时，这个特性使我们可以复用以前用C/C++写的大量代码。</p>
<p>开发JNI程序会受到系统环境的限制，因为用C/C++语言写出来的代码或模块，编译过程当中要依赖当前操作系统环境所提供的一些库函数，并和本地库链接在一起。而且编译后生成的二进制代码只能在本地操作系统环境下运行，因为不同的操作系统环境，有自己的本地库和CPU指令集，而且各个平台对标准C/C++的规范和标准库函数实现方式也有所区别。这就造成使用了JNI接口的JAVA程序，不再像以前那样自由的跨平台。如果要实现跨平台，就必须将本地代码在不同的操作系统平台下编译出相应的动态库。</p>
<h3 id="二-JNI实现"><a href="#二-JNI实现" class="headerlink" title="二. JNI实现"></a>二. JNI实现</h3><p>JNI开发流程主要分为以下6步：</p>
<ol>
<li>编写Java源代码</li>
<li>将Java源代码编译成class字节码文件</li>
<li>用javah -jni命令生成.h头文件（javah是jdk自带的一个命令，-jni参数表示将class中用native声明的函数生成jni规则的函数）</li>
<li>用本地代码实现.h头文件中的函数</li>
<li>将本地代码编译成动态库 （windows： <em>.dll ，linux/unix： </em>.so ，mac os x： *.jnilib ）</li>
<li>拷贝动态库至java.library.path 本地库搜索目录下，并运行Java程序</li>
</ol>
<p>通过上面的介绍，相信大家对JNI及开发流程有了一个整体的认识，下面通过一个HelloNative的示例，再深入了解JNI开发的各个环节及注意事项。<br>编译环境：<br>本人的开发环境为Mac os x 10.11.1， 如果在其它操作系统下开发也是一样，只需将本地代码编译成当前操作系统所支持的动态库即可。</p>
<p>g++ -v显示的g++版本如下所示（Mac下默认安装）：<br>Configured with: –prefix=/Applications/Xcode.app/Contents/Developer/usr –with-gxx-include-dir=/usr/include/c++/4.2.1<br>Apple LLVM version 7.0.0 (clang-700.0.72)<br>Target: x86_64-apple-darwin15.5.0<br>Thread model: posix</p>
<p>java -version显示的版本为<br>java version “1.8.0_60”<br>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</p>
<p>1 创建HelloNative.java，并编写代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNative</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">new</span> HelloNative().printHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在static语句块中，会在Java类的初始化阶段用于初始化静态变量；<br>System.loadLibray(“Hello”)用于加载native c++代码编译生成的动态库，从后面的结果我们可以看到，在mac下, 动态库的名字应该是libHello.jnilib;之所以将System.loadLibrary(“Hello”) 放到static block中，就是为了在类初始化时首先执行这部分代码，确保在类执行本地方法时已经加载了对应的库文件；<br>同时使用native关键字声明了一个方法void printHello()，表明这个方法将用native的方式实现； </p>
<p>2 编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ javac HelloNative.java</div></pre></td></tr></table></figure></p>
<p>3 生成native文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$javah -jni HelloNative</div></pre></td></tr></table></figure></p>
<p>当前目录下可以看到已经生成了HelloNative.h,  这是不可修改的代码，用于指定了native代码中需要实现的函数的原型； 执行cat HelloNative.h后可以看到文件内容是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNative</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">new</span> HelloNative().printHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4 新建HelloNative.cpp文件，并在其中添加native c++代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloNative.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_HelloNative_printHello</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>  </div><div class="line">&#123;  </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"Hello, Native!"</span>);  </div><div class="line">   <span class="keyword">return</span> ;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，需要包含头文件 jni.h，该文件定义了JNI的函数类型和数据结构；<br>接着需要包含上一步生成的native头文件HelloNative.h;<br>最后，按照HelloNative.h中声明的函数原型实现函数体；</p>
<p>5 编译c++代码，生成动态库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ g++ -dynamiclib -I /System/Library/Frameworks/JavaVM.framework/Headers HelloNative.cpp -o libHello.jnilib</div></pre></td></tr></table></figure></p>
<p>-dynamiclib选项表示生成动态库，相当于linux环境下的-shared;<br>-I 指定编译的依赖的头文件所在的路径，在这里也就是jni.h和jni_md.h所在的路径。linux环境下，路径可能是/usr/lib/jvm/java-xxx/include;<br>其实这里的jni.h文件也可以在$JAVA_HOME/include目录下找到，jni_md.h则是对应于不同的操作系统所在位置不同，在Mac下为在$JAVA_HOME/include/darwin目录下；<br>-o指定生成的动态库文件的名称，在Mac中，动态库的命名格式为libXXX.jnilib，相当于linux下的libXXX.so; </p>
<p>6 运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java HelloNative</div></pre></td></tr></table></figure></p>
<p>则可以得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, Native!</div></pre></td></tr></table></figure></p>
<p>JNI调用C流程图如下图所示：<br><img src="http://oe0nilvpj.bkt.clouddn.com/JNI.png" alt="JNI!"></p>
<p>参考：<br><a href="http://blog.csdn.net/codigger/article/details/9296037" target="_blank" rel="external">http://blog.csdn.net/codigger/article/details/9296037</a><br><a href="http://www.tuicool.com/articles/ZV3iee" target="_blank" rel="external">http://www.tuicool.com/articles/ZV3iee</a><br><a href="https://my.oschina.net/u/1413984/blog/199027" target="_blank" rel="external">https://my.oschina.net/u/1413984/blog/199027</a><br><a href="http://blog.csdn.net/sjw890821sjw/article/details/8058843" target="_blank" rel="external">http://blog.csdn.net/sjw890821sjw/article/details/8058843</a><br><a href="http://www.cnblogs.com/Alandre/p/4456719.html" target="_blank" rel="external">http://www.cnblogs.com/Alandre/p/4456719.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说Java中的静态内部类]]></title>
      <url>http://bigmingtalk.github.io/2016/12/01/%E8%AF%B4%E8%AF%B4Java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>Java中有个static关键字，想必大家都很熟悉。static字面上可以理解为“全局”或者“静态”的意思， 同时static可以用来修饰成员变量，成员方法，也可以用来修饰静态代码块，甚至可以用来修饰内部可以用来修饰静态内部类。<br><a id="more"></a></p>
<h1 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h1><p>被static修饰的成员变量称为静态变量，其独立于该类的对象，或者说其附属于于该类，而不是该类的对象。静态变量被该类所有的对象实例所共享。当该类被JVM加载后，JVM就可以根据类名在方法区里面找到它们。静态变量代表不需要被实例化就可以使用，其在内存中只有一个拷贝。而实例变量则对于每一个实例对象都有一个拷贝。 </p>
<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p>被static修饰的成员方法称为静态方法，可以直接通过类名调用。静态方法和静态变量其实可以有相同的理解，就是说该方法是属于类的，而不是类的实例对象的。所以静态方法中不能用this和super关键字，不能访问所属类的实例变量和实例方法（不带static修饰的成员变量和成员方法），因为这些都是与具体的对象关联的。同时，因为static方法是独立于任何实例的，所以static方法不能是abstract的，必须被实现。</p>
<h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><p>被static修饰的代码块叫做静态代码块。静态代码块可以有多个，位置可以随意，其不在任何的方法体中。在JVM加载类时会按在类中的顺序执行这些静态代码块，每个静态代码块只会被执行一次。在如下代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by bigming on 16/12/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        StaticTest.a = <span class="number">3</span>;</div><div class="line">        System.out.println(a);</div><div class="line"></div><div class="line">        StaticTest test = <span class="keyword">new</span> StaticTest();</div><div class="line">        test.sayHello();</div><div class="line">        test.b = <span class="number">1024</span>;</div><div class="line">        System.out.println(test.b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        StaticTest.a = <span class="number">4</span>;</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        StaticTest.a = <span class="number">5</span>;</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello Bigming"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出是<br>3<br>Hello Bigming<br>1024<br>4<br>5</p>
<h1 id="内部静态类"><a href="#内部静态类" class="headerlink" title="内部静态类"></a>内部静态类</h1><p>这里指的是内部静态类！因为用static修饰class时，只能是在内部类中使用！所以没有外部静态类一说！Java中的内部类有两种，一种是静态内部类，一种是普通内部类。普通内部类中可以获得外部类的引用，能够访问外部类对象的成员变量，可以说普通内部类依赖于外部类，与外部类是共生共死的。 创建普通内部类对象之前，必须先创建外部类的对象。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OuterClass o = <span class="keyword">new</span> OuterClass();</div><div class="line">OuterClass.InnerClass inner = o.new InnerClass();</div><div class="line"> </div><div class="line">OuterClass.InnerClass inner = <span class="keyword">new</span> o.InnerClass();         <span class="comment">/* 错误 */</span></div><div class="line">OuterClass.InnerClass inner = <span class="keyword">new</span> OuterClass.InnerClass();  <span class="comment">/* 错误 */</span></div></pre></td></tr></table></figure></p>
<p>而静态内部类没有外部对象的引用，无法访问外部对象的资源。但是其无需依赖于外部类，可以独立于外部对象而存在。创建静态内部类的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OuterClass.InnerClass inner = <span class="keyword">new</span> OuterClass.InnerClass();</div></pre></td></tr></table></figure></p>
<p>从某种程度上可以将静态内部类与静态变量对比，其是附属于类的。而普通内部类与实例变量对比，其是附属于类的对象的。<br>静态内部类一般在如下场景中使用：</p>
<ol>
<li>外部类需要使用内部类，而内部类无需使用外部类的资源</li>
<li>内部类可以独立外部类创建对象<br>使用静态内部类可以加强代码的封装性，提高代码的可读性，如下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;  </div><div class="line">     <span class="comment">//姓名  </span></div><div class="line">     <span class="keyword">private</span> String name;  </div><div class="line">     <span class="comment">//家庭  </span></div><div class="line">     <span class="keyword">private</span> Home home;  </div><div class="line">     <span class="comment">//构造函数设置属性值  </span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String _name)</span></span>&#123;  </div><div class="line">          name = _name;  </div><div class="line">     &#125;  </div><div class="line">     <span class="comment">/* home、name的getter/setter方法省略 */</span>  </div><div class="line"> </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span></span>&#123;  </div><div class="line">          <span class="comment">//家庭地址  </span></div><div class="line">          <span class="keyword">private</span> String address;  </div><div class="line">          <span class="comment">//家庭电话  </span></div><div class="line">          <span class="keyword">private</span> String tel;  </div><div class="line"> </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="title">Home</span><span class="params">(String _address,String _tel)</span></span>&#123;  </div><div class="line">            address = _address;  </div><div class="line">            tel = _tel;  </div><div class="line">          &#125;  </div><div class="line">          <span class="comment">/* address、tel的getter/setter方法省略 */</span>  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>将Home放在Person的内部，可以知道Home是Person的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </div><div class="line">    Home home = <span class="keyword">new</span> Person.Home(<span class="string">"上海"</span>, <span class="string">"021"</span>);  </div><div class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>);    </div><div class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>);    </div><div class="line">    p1.setHome(home);    </div><div class="line">    p2.setHome(home);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里创建的Home对象是由p1和p2共享的，类似于属于Person类的静态变量。但是如果把Home类换成普通内部类的话，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"张三"</span>);  </div><div class="line">    Home home = p1.new Home(<span class="string">"上海"</span>, <span class="string">"021"</span>);</div><div class="line">    p1.setHome(home);  </div><div class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>);  </div><div class="line">    p2.setHome(home);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时p1和p2依然共享一个home对象，但是此时home对象是与p1共生共死的，如果p1对象消亡，那么p2就不能访问到home对象了。所以此时使用静态内部类比普通内部类要更加合适。<br>同时，普通内部类和静态内部类还有一些区别：</p>
<ol>
<li>普通内部类不能声明static的方法和变量。这里说的是变量，常量还是可以的，用final static修饰。而静态内部类和外部类一样，没有任何限制。</li>
<li>使用静态内部类，多个外部类的对象可以共享一个内部类的对象。而使用普通内部类，每个外部类的对象都有自己的内部类对象，外部类对象之间不能共享内部类的对象。</li>
</ol>
<p>以上就是全部总结啦~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java传值还是传引用？读完这篇文章你就懂了！]]></title>
      <url>http://bigmingtalk.github.io/2016/10/11/Java%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8%EF%BC%9F%E8%AF%BB%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%BD%A0%E5%B0%B1%E6%87%82%E4%BA%86%EF%BC%81/</url>
      <content type="html"><![CDATA[<p>对于Java函数调用中是传值还是传引用这个问题，许多新手都是一头雾水，特别是那些以前学了C++的童靴更是如此。引用，地址，指针，常常搞不清楚，从而在程序编写过程中出现错误。本篇文章的讨论不涉及C++中的指针以及引用传递等问题，而是针对Java函数中到底是传值还是传引用做一个系统的描述。<br><a id="more"></a></p>
<h1 id="Java中引用是什么？"><a href="#Java中引用是什么？" class="headerlink" title="Java中引用是什么？"></a>Java中引用是什么？</h1><p>要回答Java函数中是传递值还是传递引用，首先要回答的问题就是Java中引用是什么。在Java中，引用代表的是一个对象的名字或者别名。我们都知道，对象的存储需要占用内存空间，当我们需要访问对象的时候，我们通过对象的引用去访问，对象的引用也是一种数据结构，其存储了该对象的地址，类似于C语言中指针的概念，不同的是在Java中我们并不能够得知该地址是什么。</p>
<p>我们可以定义多个引用变量指向同一个对象，这些引用都指向该对象但是相互独立，同时引用作为一种数据类型，其也占用内存空间来保存。比如在下面的代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String t1 = <span class="string">"Hello Bigming"</span>;</div><div class="line">String t2 = t1;</div><div class="line">String t3 = t2;</div></pre></td></tr></table></figure></p>
<p>真实的对象只有一个，就是类型为String的字符串”Hello Bigming”，而有三个String类型的引用t1, t2和t3，t1, t2, t3它们都是”Hello Bigming”的别名，都指向”Hello Bigming”对象，也就是它们的值是相同的。</p>
<p>总结一下引用的两个要点：</p>
<ol>
<li>引用是一种数据类型，其保存了对象在内存中的地址，这种类型既不是我们平时所说的简单数据类型也不是类实例(对象)；</li>
<li>不同的引用可能指向同一个对象，换句话说，一个对象可以有多个引用，即该类类型的变量。</li>
</ol>
<h1 id="Java中基本数据类型是按值传递的"><a href="#Java中基本数据类型是按值传递的" class="headerlink" title="Java中基本数据类型是按值传递的"></a>Java中基本数据类型是按值传递的</h1><p>明白了Java中引用是什么以后，我们先来看看简单一点的，就是对于Java中对int，float等基本数据类型的传递。在这里，因为是基本数据类型，所以没有对象的存在。经典的例子如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = a;</div><div class="line">    a = b;</div><div class="line">    b = a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</div><div class="line">    System.out.println(<span class="string">"before: a = "</span> + a + <span class="string">" b = "</span> + b);</div><div class="line">    swap(a, b);</div><div class="line">    System.out.println(<span class="string">"after:  a = "</span> + a + <span class="string">" b = "</span> + b);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出为：<br>before: a = 1 b = 2<br>after:  a = 1 b = 2</p>
<p>说明swap函数并没有调换a与b的值。之所以a与b的值没有调换的原因是Java中基本数据类型传递时传递的是一份拷贝。在上述代码中，当调用swap(a, b)时，其实是将a和b参数的拷贝值传进函数里的，所以在函数内部调换的是a与b的拷贝值，而在main函数中a与b的值都没有发生改变，所以输出不变。</p>
<h1 id="Java中对象也是按值传递的"><a href="#Java中对象也是按值传递的" class="headerlink" title="Java中对象也是按值传递的"></a>Java中对象也是按值传递的</h1><p>之所以说Java中对象也是按值传递的，是因为在传递对象时传递的是对象引用的拷贝。比如在下面例子中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StringBuffer sb)</span> </span>&#123;</div><div class="line">    sb.append(<span class="string">", Bigming!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</div><div class="line">    test(sb);</div><div class="line">    System.out.println(sb);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其输出是：<br>Hello, Bigming!</p>
<p>在这个例子中，当调用test(sb)时，其实传递进去的是sb引用的一个拷贝，该拷贝与main函数中的sb一样，指向StringBuilder这个对象。所以，在test()方法中执行sb.append(“, Bigming!”)时，其实上是test()方法中的sb引用所指向的StringBuilder对象的append方法，只不过test函数中的sb引用与main函数中的sb引用一样，指向同一个StringBuilder，所以最后输出时是Hello, Bigming!</p>
<p>好吧，这个例子也许不是那么让你信服，因为你也可以说在test()函数中传入的就是sb对象，所以append生效了啊，那么我们来看下一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    str = <span class="string">"Bigming"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String str = <span class="string">"Hello"</span>;</div><div class="line">    test(str);</div><div class="line">    System.out.println(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数输出是：<br>Hello</p>
<p>原因很简单，在test()函数中不是传递对象，要是传递的是对象，那么输出就应该是Bigming了。那么传递的是不是str引用本身呢？也不是，因为要是传递的是str引用本身，那么str引用在test()函数中将指向新的字符串对象”Bigming”，但是输出并不是Bigming，所以，在这里，传递的还是str引用的一个拷贝引用，该拷贝引用和str引用一样，在未执行test()函数时其指向字符串”Hello”对象，但是在test()函数中，因为String对象是不可变的，所以在执行str = “Bigming”后，该拷贝引用指向了一个新的字符串对象”Bigming”，但是main函数中原来的str引用其并没有改变，还是指向”Hello”对象。</p>
<p>所以，总而言之，Java中在传递对象时，其并没有传递真实的对象，也不是传递对象的引用，而是传递对象的引用的一个拷贝。你还不信？那再来看下一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tricky</span><span class="params">(Point arg1, Point arg2)</span> </span>&#123;</div><div class="line">        arg1.x = <span class="number">100</span>;</div><div class="line">        arg1.y = <span class="number">100</span>;</div><div class="line">        Point temp = arg1;</div><div class="line">        arg1 = arg2;</div><div class="line">        arg2 = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Point pnt1 = <span class="keyword">new</span> Point();</div><div class="line">        Point pnt2 = <span class="keyword">new</span> Point();</div><div class="line">        System.out.println(<span class="string">"Before:"</span>);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt1.x + <span class="string">" y: "</span> +pnt1.y);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt2.x + <span class="string">" y: "</span> +pnt2.y);</div><div class="line">        System.out.println();</div><div class="line">        tricky(pnt1,pnt2);</div><div class="line">        System.out.println(<span class="string">"After:"</span>);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt1.x + <span class="string">" y:"</span> + pnt1.y);</div><div class="line">        System.out.println(<span class="string">"x: "</span> + pnt2.x + <span class="string">" y: "</span> +pnt2.y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>仔细想一想，看看能不能做对，我先不告诉你~</p>
<p>正确的答案是：<br>Before:<br>x: 0 y: 0<br>x: 0 y: 0</p>
<p>After:<br>x: 100 y:100<br>x: 0 y: 0<br>看看你做对了没？ Before的输出没有任何疑问，int型默认初始化为0，对于After，因为其传递的是pnt1引用和pnt2引用的拷贝，在这里我们用pnt1_c和pnt2_c来表示这两个拷贝，pnt1_c和pnt2_c其实也是tricky方法中的arg1和arg2，所以在tricky方法中，当调用arg1.x = 100和arg1.y = 100时，因为pnt1_c是pnt1的拷贝，指向的对象也是pnt1指向的Point对象，所以其改变了pnt1指向的Point对象的x和y的值。随后执行的Point temp = arg1，arg1 = arg2以及arg2 = temp只是改变了pnt1_c和pnt2_c所指向的Point对象。也就是说，在test方法最后一行执行结束时，pnt1_c指向了pnt2所指向的对象，pnt2_c指向了pnt1所指向的对象。但是main函数中pnt1和pnt2所指向的对象并没有发生改变，改变的是他们的拷贝的值所指向的对象。所以，最后输出的是<br>Before:<br>x: 0 y: 0<br>x: 0 y: 0</p>
<p>After:<br>x: 100 y:100<br>x: 0 y: 0<br>而不是<br>Before:<br>x: 0 y: 0<br>x: 0 y: 0</p>
<p>After:<br>x: 0 y: 0<br>x: 100 y:100</p>
<h1 id="正确看传传值还是传引用"><a href="#正确看传传值还是传引用" class="headerlink" title="正确看传传值还是传引用"></a>正确看传传值还是传引用</h1><p>写到这里，我想你对Java中对于函数参数的传递应该有了比较深的认识了。其实，我们大可不必纠结于传递参数还是传递引用，亦或是传递对象本身，因为归根结底都可以认为传递的是一个数据，只不过该数据是具体的基本数据类型，还是一个引用类型，而该引用类型是拷贝的引用，还是原来的而引用。</p>
<p>总而言之，在Java中，当函数参数是基本类型时，传递的是基本类型的一个拷贝值。当参数类型是一个对象时，传递的是该对象引用的一个拷贝。最最需要记住的是，传递的永远是一个拷贝！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的字符编码，代码点与代码单元]]></title>
      <url>http://bigmingtalk.github.io/2016/10/09/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%82%B9%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83/</url>
      <content type="html"><![CDATA[<p>对于我来说，处理字符串编码总是一件非常头疼的事情，不管是在Java中还是在Python等其他编程语言中，花费在字符编码上的时间往往非常多。为了解决这个老大难问题，我在本篇文章中对Java中的字符编码问题做一个总结记录。<br><a id="more"></a></p>
<h1 id="字符编码标准"><a href="#字符编码标准" class="headerlink" title="字符编码标准"></a>字符编码标准</h1><p>计算机能处理的只有数字。对于其他任意的信息，比如文本，图片，音频视频等，都必须先将其转化为数字，才能在计算机中进行存储和传输。将文本信息转换为数字表示的这个过程也就是编码过程。编码的标准多种多样，由于计算机是由美国人发明的，因此，最早只有127个字母符号被编码，包括常用的大小写字母，数字以及一些符号，这也就是最初的ASCII编码。如字符‘A’的编码是65。ASCII编码只需要一个字节即8bit就能够表示（实际7bit就行）。<br>随着计算机在全世界迅速普及，各个国家也都针对自即的语言设计了编码标准，如我国汉字的GB2312编码。日文的Shift_JIS编码等等。如此多的标准带来的一个后果就是混乱不堪🙈，比如用GB2312编码了一段文字，但在解码时却用Shift_JIS解码，那信息肯定会不对。这也是打开有些网页时会出现乱码的原因。为了解决各个国家间编码标准不统一的问题，Unicode编码出现了！Unicode编码标准通常用两个字节表示一个字符，对于非常生僻的字符可能需要4个字节。在1991年发布的Unicode 1.0中，用2个字节共16位能够表示65536个字符，但是在增加了大量的汉语，日语，汉语等表意文字后，Unicode字符迅速超过了65536，为了解决这个问题，Unicode编码采用了代码级别（Code plane）的概念，后文将会对其作详细介绍。Unicode编码标准的出现解决了乱码问题，但在也出现了一些附带问题。比如在一篇纯英文文章，用ASCII编码时每个字符只需要一个字节，但用Unicode编码就需要两个字节，这极大地降低了编码的效率，在文本的存储和传输上造成极大的浪费。<br>为了提高存储和传输的效率，出现了将Unicode编码转换的编码形式，具体如UTF-8编码，UTF-16编码，UTF-32编码等。UTF是Unicode TransferFormat的缩写，即把Unicode编码转做某种格式的意思。UTF-8是我们很常见的一种格式，也是现在应用最广泛的一种编码格式。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。字符’A’和汉字’中’在各种标准中的编码格式如下表所示：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">ASCII</th>
<th style="text-align:right">Unicode</th>
<th>UTF-8</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td style="text-align:center">01000001</td>
<td style="text-align:right">00000000 01000001</td>
<td>01000001</td>
</tr>
<tr>
<td>中</td>
<td style="text-align:center">无法表示</td>
<td style="text-align:right">01001110 00101101</td>
<td>11100100 10111000 10101101</td>
</tr>
</tbody>
</table>
<p>从上例中可以得知，ASCII编码其实是UTF-8中的一部分。UTF-8，UTF-16已经UTF-32等不同类型的编码格式都有其不同的使用场景，UTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节 (2字节) 储存，但UTF-16却无法兼容于ASCII编码。<br>关于Unicode与其具体的UTF-XX的区别为在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码等具体的编码形式。记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%811.png" alt="记事本保存UTF-8编码"><br>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：<br><img src="http://oe0nilvpj.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%812.png" alt="UTF-8格式保存的网页"><br>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h1 id="代码点与代码单元，以及Java中的char类型"><a href="#代码点与代码单元，以及Java中的char类型" class="headerlink" title="代码点与代码单元，以及Java中的char类型"></a>代码点与代码单元，以及Java中的char类型</h1><h2 id="代码点"><a href="#代码点" class="headerlink" title="代码点"></a>代码点</h2><p>代码点（code point）是指与一个编码表中的某个字符对应的代码值。在Unicode标准中，代码点采用十六进制书写，并加上前缀U+，例如U+41就字符‘A’的代码点，Unicode的代码点可以分为17个代码级别（code plane）。第一个代码级别称为基本的多语言级别（basic multilingual plane），代码点从U+0000到U+FFFF,其中包括了经典的Unicode代码（2字节共16位），其余的16个附加级别，代码点从U+10000到U+10FFFF，其中包括了一些辅助字符。</p>
<h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>UTF-16则采用不同长度的编码表示所有的Unicode代码点。在基本的多语言级别中，每个字符用16位表示，通常被称为代码单元（Code unit）；而辅助字符采用一段连续的代码单元进行编码。这样构成的编码值一定落入基本的多语言级别中空闲的2048位内，通常被称为替代区域（surrogate area）[U+D800~U+DBFF用于第一个代码单元，U+DC00~U+DFFF用于第二个代码单元，两者之和即U+D800~U+DFFF一共是由2048位]。这样的设计非常巧妙，我们可以从中迅速知道一个代码单元是一个字符的编码，还是一个辅助字符的第一或第二部分。例如，整数集合的数学符号Z(这里不是字母Z,我实在是在markdown里打不出那符号了，囧)的代码点是U+1D56B，并且是用两个代码单元U+D835和U+DD6B编码的，具体的编码算法可以查看<a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="external">UTF-16维基百科</a>。</p>
<h2 id="Java-char"><a href="#Java-char" class="headerlink" title="Java char"></a>Java char</h2><p>在Java中，char类型用UTF-16编码描述一个代码单元。我们都知道Java中char是2个字节的，也就是说，Java中单个char只支持基本平面内的字符，而扩展平面内的字符需要一对char来表示。所以对于一个String类型的变量str来说，可以用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```Java</div><div class="line">int pos = str.offsetByCodePoints(0, i); </div><div class="line">int cp = str.codePointAt(pos);</div></pre></td></tr></table></figure></p>
<p>来获得。</p>
<p>参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="external">廖雪峰关于字符编码的解释</a><br>《Java核心技术 卷I》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中private方法能重写吗？]]></title>
      <url>http://bigmingtalk.github.io/2016/10/04/Java%E4%B8%ADprivate%E6%96%B9%E6%B3%95%E8%83%BD%E9%87%8D%E5%86%99%E5%90%97%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>结论：Java中private方法不能被重写！</p>
<p>为什么呢？请思考30秒，看看你的Java基本功怎么样…</p>
<a id="more"></a>
<p>原因：private方法默认是final的，而final方法是不能被继承的。说起来好像挺简单，但是用起来好像又会傻傻分不清楚。比如下面这个小程序，想一想它的输出是什么？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"A"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        A a = <span class="keyword">new</span> B();</div><div class="line">        a.print();</div><div class="line">        B b = <span class="keyword">new</span> B();</div><div class="line">        b.print();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"B"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>正确输出是:<br>A<br>B</p>
<p>对于第二个输出“B”应该没有任何疑问，这里主要的疑问是a.print()为什么会输出“A”？在上面的程序中，Class B的print()方法相当于是B添加的方法，不属于重写！同时，这里采用的是静态绑定，而不是动态绑定！在Java中，private方法、static方法、final方法或者构造器均采用静态绑定，而静态绑定在调用方法时不依赖于隐式参数的实际类型！所以a.print()调用的是Class A的print()方法！</p>
<p>其实，这只是一个演示的demo程序，在现实的编程中，我们应该尽量避免使用有歧义的同名函数，特别是像上述demo中的情况。良好的命名习惯可以使我们在实际的编程中少走很多弯路。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有的没的，写下来的才是你的]]></title>
      <url>http://bigmingtalk.github.io/2016/09/21/%E6%9C%89%E7%9A%84%E6%B2%A1%E7%9A%84%EF%BC%8C%E5%86%99%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%89%8D%E6%98%AF%E4%BD%A0%E7%9A%84/</url>
      <content type="html"><![CDATA[<p><img src="http://oe0nilvpj.bkt.clouddn.com/write.jpg" alt="Write!"></p>
<p>人总是低估自己的短期记忆能力，高估自己的长期记忆能力。<br><a id="more"></a></p>
<p>我时常把人脑和计算机做对比。比如计算机的处理器对应了人脑的神经元，处理器的主频高低则对应于人反应速度的快慢。而对于人类的记忆能力，我更愿意将其分为短期记忆能力和长期记忆能力。短期记忆能力对应于内存，会被覆盖，亦或是shutdown就没有了；长期记忆则更像是硬盘，能够一直完好地保存。短期记忆和长期记忆之间的转换，则对应于计算机的IO问题。只有将内存里的东西写到硬盘上，才能有效地长期保存，与之对应的我们的人脑，只有将记忆写下来，才能够将短期记忆转换为长期记忆。</p>
<p>写作有很多很多的好处，但也是一项相对艰苦的事情。如果能够一直坚持下来，最后的收获也一定会大大地超出你的预期。</p>
<ul>
<li>写作是对认识的总结。想清楚不等于能说清楚，许多人应该都有过这样的感受。一件事情自己觉得已经想的很清楚了，但是每每和别人解释这件事的时候，却又发现没有那么容易说清楚。从本质上说，这种情况下你更多的只是明白了事情各个方面的逻辑原理，但是你没有一个对事情全局的认识和总结。所以，当你开始说的时间，更多的关注了局部的逻辑，而不能给别人一个全局的认知。此时，写作往往是一件不错的事情，把对事物的理解写下来，有利于你对事物有一个全局的理解。亦或是画一画思维导图，把自己的思维逻辑可视化出来。在这个过程中，往往又会有新的发现，发现有一些地方自己以前没有想到或是不够全面，亦或是对事物的某一方面有了新的认知。</li>
<li>写作是对记忆的强化。不管是在纸上亦或是电脑上，当你开始写字的时候，你总是会想如何去合理地表达你想要表达的事物。在这个过程中，其实也是对你记忆的一次强化，很多细节的事情其实不去理解很容易就会忘记，但是当你在写作中认真地去思考过后，就会对这些细节有更多的记忆。而当你写作完成，重新看自己写下的东西时，又往往会有很多的思考，在这一次又一次的复习中，你对事物的理解和记忆都会进一步加深。</li>
<li>写作是对知识的输出。历史是从书中来的，而书是写下来的。尽管现在有了更多的形式来存储信息，比如视频音频等待，但是文字在知识的传递中所起到的作用并不会有所减少。比如论文，大家在尝试了解某一领域时，最权威的还是论文。比如书籍，课程一般都会有教科书。同样采用人脑和计算机的比喻，每个人的一生总是在不断地从外界得到各种信息，这些信息称之为输入信息；输入信息在每个人大脑中经过思考、总结等各种处理，并转化或创造出新的信息。新的信息通过写作的方式重新发布到外界中去，称之输出信息。写作在这个过程中扮演了非常重要的角色，它让你不再只做无尽的输入，处理，而没有任何的输出。</li>
<li>写作能够帮你认识更多志同道合的朋友。从一个人的文章中，大概就能得知这是一个什么样的人。穷则独善其身，达则兼济天下。纵观历史，每个人都在做输入，但并不是每个人都在做输出。输出的多少往往能够决定你的影响力。在写作中，你可以分享自己的知识，帮助别人少走自己走过的弯路，同时别人看到你的文章也能给你许多的建议，也帮助你成长，久而久之让你认识更多志同道合的朋友。</li>
</ul>
<p>有的没的，写下来的才是你的。改变自己，从写作开始。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[404 Not Found：该页无法显示]]></title>
      <url>http://bigmingtalk.github.io//404.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://bigmingtalk.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://bigmingtalk.github.io/about/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
